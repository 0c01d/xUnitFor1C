////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мМассивПиктограммСостояний;
Перем мМассивПиктограммТиповСтроки;

Перем мСохраненныйПутьОтдельногоТестовогоНабора;
Перем мАвтозапускТестовыхНаборов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Открывает диалог выбора каталога тестов.
// Возвращает Истину, если каталог выбран и ложь в противном случае.
// Путь к выбранному каталогу запоминается в реквизите формы Путь.
// 
Функция ВыбратьКаталогТестов()
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Каталог = Путь;
	
	Если ДиалогВыбораКаталога.Выбрать() Тогда
		
		Путь = ДиалогВыбораКаталога.Каталог;
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Разворачивает строки табличного поля дерева тестов.
// По умолчанию разворачивается только самый верхний уровень.
// 
Процедура РазвернутьСтрокиДерева(ВключаяПодчиненные=Ложь)
	
	Для каждого СтрокаДерева из ДеревоТестов.Строки Цикл
		ЭлементыФормы.тпДеревоТестов.Развернуть(СтрокаДерева, ВключаяПодчиненные);
	КонецЦикла;	
	
КонецПроцедуры

Функция ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(РодительскаяСтрока)
	коллекцияСтрок = РодительскаяСтрока.Строки;
	Если коллекцияСтрок.Количество() = 0 Тогда
		Возврат 1; // строка теста
	КонецЕсли;
	количествоТестов = 0;
	Для каждого СтрокаДерева из коллекцияСтрок Цикл
		лКоличество = ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаДерева);
		СтрокаДерева.КоличествоТестов = лКоличество;
        количествоТестов = количествоТестов + лКоличество;
	КонецЦикла;
	Возврат количествоТестов;
КонецФункции

// Устанавливает начальное состояние индикатора выполнения тестов.
// 
Процедура ИнициализироватьИндикаторВыполнения(КоличествоТестовыхСлучаев = 0)
	
	ЭлементыФормы.ИндикаторВыполнения.МаксимальноеЗначение = КоличествоТестовыхСлучаев;
	ЭлементыФормы.ИндикаторВыполнения.Значение = 1;
	ЭлементыФормы.ИндикаторВыполнения.ЦветРамки = Новый Цвет(0, 174, 0); // Зеленый.
	
КонецПроцедуры

// Рекурсивно из строк дерева тестов запоминает в соответствии в качестве ключа
// только те строки дерева тестов, которые являются тестовыми случаями.
// Возвращает созданное и заполненное тестовыми случаями соответствие.
// 
Функция ПолучитьТолькоТестовыеСлучаи(СтрокиДереваТестов, КэшТестовыхСлучаев=Неопределено)
	
	Если КэшТестовыхСлучаев=Неопределено Тогда
		КэшТестовыхСлучаев = Новый Соответствие;
	КонецЕсли;
	
	Для каждого СтрокаДереваТестов из СтрокиДереваТестов Цикл
		Если СтрокаДереваТестов.ТипСтроки = мЗначенияТиповСтроки.ТестовыйМетод Тогда
			КэшТестовыхСлучаев.Вставить(СтрокаДереваТестов);
		Иначе
			ПолучитьТолькоТестовыеСлучаи(СтрокаДереваТестов.Строки, КэшТестовыхСлучаев);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КэшТестовыхСлучаев;
	
КонецФункции

Процедура ЗагрузитьТестыПоРанееСохраненнымПараметрам()
	лПараметры = ВосстановитьЗначение(ПолучитьИмяДляСохраненияПараметров());
	Если ЗначениеЗаполнено(лПараметры) Тогда
		Путь = лПараметры.Путь;
		мСохраненныйПутьОтдельногоТестовогоНабора = лПараметры.мСохраненныйПутьОтдельногоТестовогоНабора;
		
		Если ЗначениеЗаполнено(мСохраненныйПутьОтдельногоТестовогоНабора) Тогда
			
			Форма_ЗагрузитьОтдельныйТестовыйНабор(мСохраненныйПутьОтдельногоТестовогоНабора);
			
		ИначеЕсли ЗначениеЗаполнено(Путь) Тогда
			
			Форма_ЗагрузитьТестовыеНаборы();
			
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Функция ПолучитьИмяДляСохраненияПараметров()
	Возврат Метаданные().Имя + "_Параметры";
КонецФункции

Процедура ОбработатьПараметрыЗапуска(ПараметрЗапуска)
	
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат ;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	МассивПараметрыЗапуска = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
	Для Номер = 0 По МассивПараметрыЗапуска.Количество()-1 Цикл
		ЭлементМассива = МассивПараметрыЗапуска.Получить(Номер);
		Если ВРег(ЭлементМассива) = ВРег("unittest") И Номер+1<=МассивПараметрыЗапуска.Количество()-1 Тогда
			Путь = МассивПараметрыЗапуска.Получить(Номер+1);
			Файл = Новый Файл(Путь);
			Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоКаталог() Тогда
				Путь = "";
			КонецЕсли;
		КонецЕсли;
		
		Если ВРег(ЭлементМассива) = ВРег("unittestauto") Тогда
			мАвтозапускТестовыхНаборов = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Путь) Тогда
		Форма_ЗагрузитьТестовыеНаборы();
	КонецЕсли;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	ЭтаФорма.Заголовок = СокрЛП(Метаданные().Синоним) + ", версия " + Версия(); // специально ЭтотОбъект.Версия() для проверки Экспорта!
	
	ЗагрузитьТестыПоРанееСохраненнымПараметрам();
	
	ОбработатьПараметрыЗапуска(ПараметрЗапуска);
	Если мАвтозапускТестовыхНаборов Тогда
		ПодключитьОбработчикОжидания("ВыполнитьВсеТесты", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	лПараметры = Новый Структура("Путь, мСохраненныйПутьОтдельногоТестовогоНабора", Путь, мСохраненныйПутьОтдельногоТестовогоНабора);
	СохранитьЗначение(ПолучитьИмяДляСохраненияПараметров(), лПараметры);
КонецПроцедуры

// Обработка оповещений о загрузке или ходе выполнения тестов.
// 
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Возможные события:
	// 		1CUnit.TestLoaded
	// 		1CUnit.TestPassed
	// 		1CUnit.TestNotInplemented
	// 		1CUnit.TestFailed
		
	Если ИмяСобытия = "1CUnit.TestPassed" Тогда
		
		ЭлементыФормы.ИндикаторВыполнения.Значение = ЭлементыФормы.ИндикаторВыполнения.Значение + 1;
		
	ИначеЕсли ИмяСобытия = "1CUnit.TestNotImplemented" Тогда
		
		ЭлементыФормы.ИндикаторВыполнения.Значение = ЭлементыФормы.ИндикаторВыполнения.Значение + 1;
		
		Если ЭлементыФормы.ИндикаторВыполнения.ЦветРамки <> WebЦвета.Красный Тогда
			ЭлементыФормы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Золотой;
		КонецЕсли;
				
	ИначеЕсли ИмяСобытия = "1CUnit.TestFailed" Тогда
		
		ЭлементыФормы.ИндикаторВыполнения.Значение = ЭлементыФормы.ИндикаторВыполнения.Значение + 1;
		ЭлементыФормы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Красный;
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ СТРАНИЦЫ "Тестирование"

Процедура КнопкаВыполнитьВыделенныйНажатие(Элемент)
	
	// В случае множественного выделения в общем случае у нас могут быть одновременно выделены 
	// как строки на уровне обработок тестирования и папок, но и отдельные тестовые случаи.
	// Поэтому мы предварительно из выделенных строк получаем ТОЛЬКО строки, соответствующие 
	// тестовым случаям. При этом, если выделена строка обработки или папка, то значит надо выполнить
	// все тестовые случае, реализованные в этой обработке (или все тестовые случаи, реализованные во
	// всех обработках в выделенной папке). 
	
	КэшТестовыхСлучаев = ПолучитьТолькоТестовыеСлучаи(ЭлементыФормы.тпДеревоТестов.ВыделенныеСтроки);	
	
	ИнициализироватьИндикаторВыполнения(КэшТестовыхСлучаев.Количество());
	
	ПередВыполнениемТестов();
	
	датаНачалаТестирования = ТекущаяДата();
	
	ОчиститьСообщения();
	Для каждого ЭлементКэша  из КэшТестовыхСлучаев Цикл
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли 
		
		СтрокаТестовогоСлучая = ЭлементКэша.Ключ;		
		СтрокаТестовогоСлучая.Состояние = ВыполнитьТест(СтрокаТестовогоСлучая, мСписокОшибок);
		
		ИзменитьСостояниеВыполненияРодителей(СтрокаТестовогоСлучая);
		
	КонецЦикла;
	
	ВывестиОтчетТестирования(датаНачалаТестирования);
		//ВывестиОтчетТестирования(мСписокОшибок, мВсегоТестов, датаНачалаТестирования);
	
КонецПроцедуры

Процедура КнопкаВыполнитьВсеТестыНажатие(Элемент)
	
	ВыполнитьВсеТесты();
		
КонецПроцедуры

Процедура ВыполнитьВсеТесты()
	
	ИнициализироватьИндикаторВыполнения(мКоличествоТестовыхСлучаев);
	
	ОчиститьСообщения();
	ВыполнитьТесты(ДеревоТестов.Строки);
	
КонецПроцедуры

Процедура КнопкаЗагрузитьТестыНажатие(Элемент)
	мСохраненныйПутьОтдельногоТестовогоНабора = "";
	
	Если ВыбратьКаталогТестов() Тогда
		
		Форма_ЗагрузитьТестовыеНаборы();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаЗагрузитьТестыЗагрузитьТестКейс(Кнопка)
		
	ДиалогВыбораТеста = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораТеста.Фильтр = "Обработка-тест (*.epf)|*.epf|Все файлы|*";
	ДиалогВыбораТеста.МножественныйВыбор = Ложь;
	ДиалогВыбораТеста.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораТеста.Каталог = Путь;
	
	Если ДиалогВыбораТеста.Выбрать() Тогда
		
		Путь = ДиалогВыбораТеста.Каталог;
		Форма_ЗагрузитьОтдельныйТестовыйНабор(ДиалогВыбораТеста.ПолноеИмяФайла);
		
	КонецЕсли;
			
КонецПроцедуры

Процедура КнопкаПерезагрузитьНажатие(Элемент)
		
	Если ЗначениеЗаполнено(мСохраненныйПутьОтдельногоТестовогоНабора) Тогда
		
		Форма_ЗагрузитьОтдельныйТестовыйНабор(мСохраненныйПутьОтдельногоТестовогоНабора);
		
	ИначеЕсли ЗначениеЗаполнено(Путь) Тогда
		
		Форма_ЗагрузитьТестовыеНаборы();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура Форма_ЗагрузитьОтдельныйТестовыйНабор(путьКТестовомуНабору)
	ИнициализироватьИндикаторВыполнения();
	
	мСохраненныйПутьОтдельногоТестовогоНабора = путьКТестовомуНабору;
	
	ЗагрузитьВсеТесты(мСохраненныйПутьОтдельногоТестовогоНабора);
	
	ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(ДеревоТестов);
	РазвернутьСтрокиДерева(Истина);
КонецПроцедуры

Процедура Форма_ЗагрузитьТестовыеНаборы()
	ИнициализироватьИндикаторВыполнения();
	
	ЗагрузитьВсеТесты(Путь);	

	ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(ДеревоТестов);
	РазвернутьСтрокиДерева();
КонецПроцедуры

// Процедура для кнопки "Переоткрыть"
// Закрывает и вновь открывает текущую форму.
// 
Процедура КнопкаПерезагрузитьПерезагрузитьБраузерТестирования(Кнопка)
	
	Для каждого МетаФорма Из ЭтаФорма.Метаданные().Формы Цикл
		ТекФорма = ПолучитьФорму(МетаФорма); // может возвращать неопределено, если есть управляемая форма
		Если ТекФорма <> Неопределено И ТекФорма.Открыта() Тогда
			ТекФорма.Закрыть();
			Если ТекФорма = ЭтаФорма Тогда
				Если Найти(Строка(ТипЗнч(ЭтотОбъект)), "Внешняя обработка объект:") = 1 Тогда
					ВнешниеОбработки.Создать(ЭтотОбъект.ИспользуемоеИмяФайла).ПолучитьФорму(МетаФорма.Имя).Открыть();
				Иначе
					ВнешниеОтчеты.Создать(ЭтотОбъект.ИспользуемоеИмяФайла).ПолучитьФорму(МетаФорма.Имя).Открыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ДеревоТестов

Процедура тпДеревоТестовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ПиктограммаСостояния.УстановитьКартинку(мМассивПиктограммСостояний[ДанныеСтроки.Состояние]);		
	ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(мМассивПиктограммТиповСтроки[ДанныеСтроки.ТипСтроки]);		
	ОформлениеСтроки.Ячейки.ПолныйПуть.УстановитьТекст(СтрЗаменить(ДанныеСтроки.ПолныйПуть, Путь, "..."));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

//{ Состояния тестов
мМассивПиктограммСостояний = Новый Массив(4);
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.НеВыполнялся]	= ЭлементыФормы.ПолеКартинкиСерый.Картинка; 
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.Сломался]		= ЭлементыФормы.ПолеКартинкиКрасный.Картинка;
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.НеРеализован]	= ЭлементыФормы.ПолеКартинкиЖелтый.Картинка;
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.Прошел]			= ЭлементыФормы.ПолеКартинкиЗеленый.Картинка;
//} Состояния тестов

//{ Типы строк дерева тестов
мМассивПиктограммТиповСтроки = Новый Массив(3);
мМассивПиктограммТиповСтроки[мЗначенияТиповСтроки.КаталогТестов]	= ЭлементыФормы.ПолеКартинкиКаталогТестов.Картинка;
мМассивПиктограммТиповСтроки[мЗначенияТиповСтроки.ТестовыйСлучай]			= ЭлементыФормы.ПолеКартинкиТест.Картинка;
мМассивПиктограммТиповСтроки[мЗначенияТиповСтроки.ТестовыйМетод] = ЭлементыФормы.ПолеКартинкиТестовыйСлучай.Картинка;
//} Типы строк дерева тестов

мСохраненныйПутьОтдельногоТестовогоНабора = "";
мАвтозапускТестовыхНаборов = Ложь;