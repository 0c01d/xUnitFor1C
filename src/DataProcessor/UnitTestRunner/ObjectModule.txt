////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Прокси-объект для взаимодействия с внешним миром, 
// когда браузер тестов открывается извне, например,
// скриптом для Снегопата.
// 
Перем mMiddleMan;

Перем мИнформатор; // работа с таблицей методов в runtime
Перем мПытаемсяСоздатьИнформатор;

Перем мЗначенияСостоянияТестов Экспорт;
Перем мЗначенияТиповСтроки Экспорт;
Перем мЗначениеМодульИлиФорма Экспорт;

// Хранит количество загруженных тестовых случаев.
Перем мКоличествоТестовыхСлучаев Экспорт;


Функция Версия() Экспорт
	Возврат "1.0.4.1";
КонецФункции

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ДЛЯ ПРОВЕРКИ ЗНАЧЕНИЙ (assertions). 
// 
// На основе общего модуля тестирования Я_Тест для 1С:Предприятия 8 (SnowTest) Федора Езеева.
// 

Процедура Проверить(_Истина, ДопСообщениеОшибки = "") Экспорт
	Если Не _Истина Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Истина, "БЛ=ложь; БИ=истина")+") не является Истиной, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьИстину(_Истина, ДопСообщениеОшибки = "") Экспорт
	Проверить(_Истина, ДопСообщениеОшибки);
КонецПроцедуры

Процедура ПроверитьЛожь(_Ложь, ДопСообщениеОшибки = "") Экспорт
	Если _Ложь Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Ложь, "БЛ=ложь; БИ=истина")+") не является Ложью, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 <> _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") не равны, а хотели, чтобы были равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьНеРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 = _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") равны, а хотели, чтобы были не равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьБольше(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше <= _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше или равен второму ("+_Меньше+") а хотели, чтобы был больше." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьБольшеИлиРавно(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше < _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше второго ("+_Меньше+") а хотели, чтобы был больше или равен." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьМеньше(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 >= проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> больше или равно, чем <"+проверяемоеЗначение2+">, а ожидалось меньше"+
				ФорматДСО(СообщениеОбОшибке);
	КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьМеньшеИлиРавно(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 > проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> больше, чем <"+проверяемоеЗначение2+">, а ожидалось меньше или равно"+
				ФорматДСО(СообщениеОбОшибке);
	КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьВыполнилось(СтрокаВыполнения, ДопСообщениеОшибки = "") Экспорт
	Попытка
		Выполнить(СтрокаВыполнения);
		Упало = Ложь;
	Исключение
		Упало = Истина;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Упало Тогда
		СообщениеОшибки = "Хотели, чтобы код """+СтрокаВыполнения+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьМетодВыполнился(Объект, ИмяМетода, ДопСообщениеОшибки = "") Экспорт
	СтрокаВыполнения = "Объект."+ИмяМетода+"()";
	
	Попытка
		Выполнить(СтрокаВыполнения);
		Упало = Ложь;
	Исключение
		Упало = Истина;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Упало Тогда
		СообщениеОшибки = "Хотели, чтобы код """+СтрокаВыполнения+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьНеВыполнилось(СтрокаВыполнения, ОжидаемоеОписаниеОшибки, ДопСообщениеОшибки = "") Экспорт
	Попытка
		Выполнить(СтрокаВыполнения);
		Успех = Истина;
	Исключение
		Успех = Ложь;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Успех Тогда
		ВызватьИсключение("Хотели, чтобы код """+СтрокаВыполнения+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если ОжидаемоеОписаниеОшибки <> ПолученноеОписаниеОшибки Тогда
		ВызватьИсключение("Хотели, чтобы код """+СтрокаВыполнения+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьМетодНеВыполнился(Объект, ИмяМетода, ОжидаемоеОписаниеОшибки, ДопСообщениеОшибки = "") Экспорт
	СтрокаВыполнения = "Объект."+ИмяМетода+"()";
	
	Попытка
		Выполнить(СтрокаВыполнения);
		Успех = Истина;
	Исключение
		Успех = Ложь;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Успех Тогда
		ВызватьИсключение("Хотели, чтобы код """+СтрокаВыполнения+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если ОжидаемоеОписаниеОшибки <> ПолученноеОписаниеОшибки Тогда
		ВызватьИсключение("Хотели, чтобы код """+СтрокаВыполнения+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

// проверка идет через ЗначениеЗаполнено, но мутабельные значение всегда считаем заполненными
Процедура ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
    Попытка
        фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
    Исключение
        Возврат;
    КонецПопытки; 
    Если НЕ фЗаполнено Тогда
        ВызватьИсключение "Значение ("+ПроверяемоеЗначение+") не заполнено, а ожидалась заполненность" + ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	СообщениеОшибки = "Значение ("+ПроверяемоеЗначение+") заполнено, а ожидалась незаполненность" + ФорматДСО(ДопСообщениеОшибки);
	Попытка
        фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
    Исключение
        ВызватьИсключение СообщениеОшибки;
    КонецПопытки; 
    Если фЗаполнено Тогда
        ВызватьИсключение СообщениеОшибки;
    КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьТип(значение, ТипИлиИмяТипа, ДопСообщениеОшибки = "") Экспорт
    Если ТипЗнч(ТипИлиИмяТипа) = Тип("Строка") Тогда
        искомыйТип = Тип(ТипИлиИмяТипа);
    ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип("Тип") Тогда
        искомыйТип = ТипИлиИмяТипа;
    Иначе
        ВызватьИсключение "ПроверитьТип: Тип значения параметра ТипИлиИмяТипа должен быть <Тип> или <Строка>, а получили <"+ ТипЗнч(ТипИлиИмяТипа) + ">" + ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
    Если ТипЗнч(значение) <> искомыйТип Тогда
        ВызватьИсключение "Типом значения <"+значение+"> является <"+ТипЗнч(значение)+">, а ожидался тип <"+ТипИлиИмяТипа+">."+ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ДЛЯ ИСПОЛЬЗОВАНИЯ ИЗ ОБРАБОТОК ТЕСТИРОВАНИЯ

// Создает новый набор тестов.
// 
Функция Новый_НаборТестов() Экспорт
	Возврат Новый Массив;
КонецФункции

// Добавляет новый тестовый случай в набор.
// 
Функция НаборТестов_Добавить(НаборТестов, ИмяТестовогоСлучая, П1=Неопределено, П2=Неопределено, П3=Неопределено, П4=Неопределено, П5=Неопределено, П6=Неопределено, П7=Неопределено) Экспорт
	
	НаборТестов.Добавить(ИмяТестовогоСлучая);
	Возврат НаборТестов;
	
КонецФункции

// Выводит сообщение. В тестах ВСЕГДА должна использоваться ВМЕСТО метода Сообщить().
// 
Функция ВывестиСообщение(ТекстСообщения, Статус=Неопределено) Экспорт	
	
	Если mMiddleMan <> Неопределено Тогда
		mMiddleMan.Message(ТекстСообщения);
	Иначе
		Сообщить(ТекстСообщения, Статус);	
	КонецЕсли;
			
КонецФункции

// Вызывает исключение с заданным текстом ошибки для прерывания выполнения тестового случая.
// 
Функция ПрерватьТест(ТекстОшибки) Экспорт
	
	ВызватьИсключение ТекстОшибки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВНЕШНЕЕ API (для использования из скрипта Снегопата или из COM-подключения).

Процедура OpenBrowserForm() Экспорт
	ЭтотОбъект.ПолучитьФорму("Форма").Открыть();
КонецПроцедуры

// Устанавливает объект-прокси, который будет получать сообщения 
// о ходе загрузки и выполнения тестов, сообщения, выводимые при 
// выполнении тестов. Для использования в скрипте для Снегопата.
// 
Функция SetHandlerObject(obj) Экспорт
	mMiddleMan = obj;
КонецФункции

// Загружает все тесты из каталога в дерево тестов.
// 
Функция LoadAllTests(ПутьККаталогу) Экспорт
	
	ДеревоТестов.Строки.Очистить();
			
	ЗагрузитьТесты(ДеревоТестов, Новый Файл(ПутьККаталогу));
		
КонецФункции

// Загружает отдельную обработку тестирования в дерево тестов.
// 
Функция LoadTest(ПутьКФайлуТеста) Экспорт
	
	ДеревоТестов.Строки.Очистить();
			
	ЗагрузитьТесты(ДеревоТестов, Новый Файл(ПутьКФайлуТеста));
		
КонецФункции

// Выполняет все тесты, загруженные в дерево тестов.
// 
Функция RunAllTests() Экспорт
    
    #Если Клиент Тогда
	ОчиститьСообщения();
    #КонецЕсли
	ВыполнитьТесты(ДеревоТестов.Строки);

КонецФункции

// Запускает отдельный тест из дерева тестов.
// 
Функция RunTest(TestRow) Экспорт
	
    #Если Клиент Тогда
	ОчиститьСообщения();
    #КонецЕсли
	
	ПередВыполнениемТестов();
	ВыполнитьТест(TestRow, мСписокОшибок);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ДЛЯ ВЫПОЛНЕНИЯ ТЕСТОВ

// Выполняет отдельный тест.
// 
Функция ВыполнитьТест(СтрокаДереваТестов, СписокОшибокРез) Экспорт
	Перем Тест; // специально локальная переменная для исключения циклических ссылок
	
	Тест = Неопределено;
	
	мСписокОшибок = СписокОшибокРез;
	
	ИмяТестовогоСлучая	= СтрокаДереваТестов.ИмяТестовогоСлучая; //Имя;
	
	Попытка
		Тест = СоздатьОбъектВнешнейОбработкиОтключаяБезопасныйРежим(СтрокаДереваТестов.ПолныйПуть); //ВнешниеОбработки.Создать(СтрокаДереваТестов.ПолныйПуть, Ложь);	// безопасный режим выключен
		массивТестов = ПолучитьТестовыеСлучаи(Тест); // возможно, что тест сохранит у себя ссылку на браузер
		ПроверитьЗаполненность(массивТестов, "Не удалось получить тестовые случаи");
	Исключение
		
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ;
		СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(ИмяТестовогоСлучая, текстОшибки, СтрокаДереваТестов, ОписаниеОшибки(), ИнформацияОбОшибке());
		
		Тест = Неопределено; // обязательно удаляем, для исключения циклических ссылок
		
		Возврат СостояниеВыполнения;
	КонецПопытки;
	
	СостояниеВыполнения = мЗначенияСостоянияТестов.НеВыполнялся;
	
	параметрыТеста = СтрокаДереваТестов.ПараметрыТеста;
	естьПараметры = СтрокаДереваТестов.ЕстьПараметрыТеста;
	
	естьТранзакция = Ложь;
	Если естьПараметры Тогда
		лПараметрыТеста = ?(ТипЗнч(параметрыТеста) = Тип("Структура"), параметрыТеста, параметрыТеста[0].Значение);
		Если лПараметрыТеста.Свойство("Транзакция", естьТранзакция) Тогда
			естьТранзакция = ТипЗнч(естьТранзакция) = Тип("Булево") и естьТранзакция;
		Иначе
			естьТранзакция = Ложь;
		КонецЕсли;

				//естьТранзакция = ?(ТипЗнч(параметрыТеста) = Тип("Структура"), параметрыТеста, параметрыТеста[0].Значение).Свойство("Транзакция", естьТранзакция) 
				//	или ТипЗнч(естьТранзакция) = Тип("Булево") и естьТранзакция;
		Если естьТранзакция Тогда
			НачатьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
		//TODO Если первый раз запуск setup оказался неуспешным, то при повторном прогоне без перезагрузки
		// не выполнять, также не выполнять для следующих тестовых случаев.
	лСостояниеВыполнения = ВыполнитьПроцедуруТестовогоСлучая(Тест, "ПередЗапускомТеста", ИмяТестовогоСлучая, СтрокаДереваТестов);
	Если лСостояниеВыполнения <> Неопределено Тогда
		СостояниеВыполнения = лСостояниеВыполнения;
	КонецЕсли;
	Если СостояниеВыполнения = мЗначенияСостоянияТестов.Сломался Тогда
		Возврат мЗначенияСостоянияТестов.Сломался;
	КонецЕсли;
		
	переданПараметрТеста = Ложь;
	параметрТеста = "";
	
	Если естьПараметры Тогда
		лПараметрыТеста = ?(ТипЗнч(параметрыТеста) = Тип("Структура"), параметрыТеста, параметрыТеста[0].Значение);
		переданПараметрТеста = лПараметрыТеста.Свойство("Параметр", параметрТеста);
		
		Если переданПараметрТеста Тогда
			строкаПараметров = "параметрТеста";	
		КонецЕсли;
	КонецЕсли;

	Попытка
		
		Выполнить("Тест." + ИмяТестовогоСлучая + "(" + строкаПараметров + ");");
		
		СостояниеВыполнения = мЗначенияСостоянияТестов.Прошел;
		
		ОповеститьОСобытии("TestPassed", СтрокаДереваТестов);
		
	Исключение
				
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ; //Ошибка.Описание + ". " + Ошибка.Причина.Описание + ". Номер строки: " + Ошибка.НомерСтроки;
		
		Если ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, ИмяТестовогоСлучая) Тогда
				//Если Найти(текстОшибки, "Метод объекта не обнаружен ("+ИмяТестовогоСлучая+")") > 0 Тогда
			СостояниеВыполнения = мЗначенияСостоянияТестов.НеРеализован;
			
			ОповеститьОСобытии("TestNotImplemented", СтрокаДереваТестов);
					
		Иначе
			
			СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(ИмяТестовогоСлучая, текстОшибки, СтрокаДереваТестов, ОписаниеОшибки(), ИнформацияОбОшибке());

		КонецЕсли;
				
	КонецПопытки;	
	
	лСостояниеВыполнения = ВыполнитьПроцедуруТестовогоСлучая(Тест, "ПослеЗапускаТеста", ИмяТестовогоСлучая, СтрокаДереваТестов);
	Если лСостояниеВыполнения <> Неопределено Тогда
		СостояниеВыполнения = ЗапомнитьСамоеХудшееСостояние(СостояниеВыполнения, лСостояниеВыполнения); //СостояниеВыполнения = лСостояниеВыполнения;
	КонецЕсли;
	
	Если естьТранзакция Тогда
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
	Тест = Неопределено; // для исключения циклических ссылок
		
	Возврат СостояниеВыполнения;
	
КонецФункции

Функция ВыполнитьПроцедуруТестовогоСлучая(Тест, ИмяПроцедуры, ИмяТестовогоСлучая, СтрокаДереваТестов)
	СостояниеВыполнения = Неопределено;
	
	Попытка
		Выполнить("Тест." + ИмяПроцедуры + "();");
	Исключение
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ;
		
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, ИмяПроцедуры) Тогда
				//Если Найти(текстОшибки, "Метод объекта не обнаружен (" + ИмяПроцедуры + ")") = 0 Тогда
			СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(ИмяТестовогоСлучая, текстОшибки, СтрокаДереваТестов, ОписаниеОшибки(), ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;

	Возврат СостояниеВыполнения;

КонецФункции

Функция ВывестиОшибкуВыполненияТеста(ИмяТестовогоСлучая, текстОшибки, СтрокаДереваТестов, СообщениеОбОшибке, ИнфоОшибки)

	СостояниеВыполнения = мЗначенияСостоянияТестов.Сломался;
	
	СтруктураОшибки = Новый Структура();
	
    Если ТипЗнч(СтрокаДереваТестов) = Тип("СтрокаДереваЗначений") ИЛИ ТипЗнч(СтрокаДереваТестов) = Тип("ДеревоЗначений") Тогда
        СтруктураОшибки.Вставить("ИмяТестовогоНабора", СтрокаДереваТестов.Родитель.Имя);
    ИначеЕсли ТипЗнч(СтрокаДереваТестов) = Тип("ДанныеФормыЭлементДерева") ИЛИ ТипЗнч(СтрокаДереваТестов) = Тип("ДанныеФормыДерево") Тогда
        СтруктураОшибки.Вставить("ИмяТестовогоНабора", СтрокаДереваТестов.ПолучитьРодителя().Имя);
    КонецЕсли;
	
		//стИнфоОшибки = Новый Структура("ИмяМодуля,ИсходнаяСтрока,НомерСтроки,Описание,Причина");
		//ЗаполнитьЗначенияСвойств(стИнфоОшибки, ИнфоОшибки);
	
	стИнфоОшибки = Новый Структура("ИмяМодуля,ИсходнаяСтрока,НомерСтроки,Описание"); //,Причина");
	ЗаполнитьЗначенияСвойств(стИнфоОшибки, ИнфоОшибки);
	//стИнфоОшибки.Вставить("Причина",  Новый Структура("ИмяМодуля,ИсходнаяСтрока,НомерСтроки,Описание"));
	стИнфоОшибки.Вставить("Причина",  Неопределено);
	
	стИнфоОшибкиЦикл = стИнфоОшибки;
	ИнфоОшибки = ИнфоОшибки.Причина;
	Пока ИнфоОшибки <> Неопределено Цикл  // Артур TODO
		стИнфоОшибкиЦикл.Причина = Новый Структура("ИмяМодуля,ИсходнаяСтрока,НомерСтроки,Описание");//,Причина");
		стИнфоОшибкиЦикл = стИнфоОшибкиЦикл.Причина;
		ЗаполнитьЗначенияСвойств(стИнфоОшибкиЦикл, ИнфоОшибки);
		стИнфоОшибкиЦикл.Вставить("Причина",  Неопределено);
		//стИнфоОшибкиЦикл.Вставить("Причина",  Новый Структура("ИмяМодуля,ИсходнаяСтрока,НомерСтроки,Описание"));

		//стИнфоОшибкиЦикл = стИнфоОшибкиЦикл.Причина;
		ИнфоОшибки = ИнфоОшибки.Причина;
	КонецЦикла;
	
	СтруктураОшибки.Вставить("ИмяТестовогоСлучая", ИмяТестовогоСлучая);		
	СтруктураОшибки.Вставить("Описание", текстОшибки);
	СтруктураОшибки.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	СтруктураОшибки.Вставить("ИнфоОшибки", стИнфоОшибки);
	СтруктураОшибки.Вставить("ЕстьПараметрыТеста", СтрокаДереваТестов.ЕстьПараметрыТеста);
	СтруктураОшибки.Вставить("ПараметрыТеста", СтрокаДереваТестов.ПараметрыТеста);
	СтруктураОшибки.Вставить("ПолныйПуть", СтрокаДереваТестов.ПолныйПуть);
	
	ВывестиОшибку(СтруктураОшибки);
	
		    //#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
	мСписокОшибок.Добавить(СтруктураОшибки);
			//#Иначе
			//#КонецЕсли
	
	Попытка
		ОповеститьОСобытии("TestFailed", СтрокаДереваТестов);
	Исключение
	КонецПопытки;

	Возврат СостояниеВыполнения;

КонецФункции

// Выполняет рекурсивно все тесты строки дерева тестов для
// строк, являющихся группами (обработками или каталогами).
// 
Функция _ВыполнитьТесты(СтрокиДереваТестов) //Экспорт
	
	СостояниеРезультат = мЗначенияСостоянияТестов.НеВыполнялся;
	
	Для каждого СтрокаДереваТестов из СтрокиДереваТестов Цикл
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли 
		
		Если СтрокаДереваТестов.ТипСтроки = мЗначенияТиповСтроки.ТестовыйМетод Тогда
			
			мВсегоТестов = мВсегоТестов + 1;
			НовоеСостояние = ВыполнитьТест(СтрокаДереваТестов, мСписокОшибок);
			
		Иначе
			
			НовоеСостояние = _ВыполнитьТесты(СтрокаДереваТестов.Строки);
			
		КонецЕсли;
		
		СтрокаДереваТестов.Состояние = НовоеСостояние;
		
		ЗапомнитьСамоеХудшееСостояние(СостояниеРезультат, НовоеСостояние);
		
	КонецЦикла;
	
	Возврат СостояниеРезультат;
	
КонецФункции

// Выполняет рекурсивно все тесты строки дерева тестов для
// строк, являющихся группами (обработками или каталогами).
// 
Функция ВыполнитьТесты(СтрокиДереваТестов) Экспорт
	ПередВыполнениемТестов();
	
	датаНачалаТестирования = ТекущаяДата();
	
	результат = _ВыполнитьТесты(СтрокиДереваТестов);
	
	//ВывестиОтчетТестирования(мСписокОшибок, мВсегоТестов, датаНачалаТестирования);
	
	Возврат результат;
КонецФункции

Процедура ПередВыполнениемТестов() Экспорт
	мСписокОшибок = Новый СписокЗначений;
	мВсегоТестов = 0;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ЗАГРУЗКИ ТЕСТОВ

// Загружает тесты в дерево тестов из каталога.
// 
Функция ЗагрузитьВсеТесты(ПутьККаталогу) Экспорт
	
	мКоличествоТестовыхСлучаев = 0;
	
	ДеревоТестов.Строки.Очистить();
	
	ОбъектФайл = Новый Файл(ПутьККаталогу);
	Если ОбъектФайл.Существует() Тогда
		
		Возврат ЗагрузитьТесты(ДеревоТестов, ОбъектФайл);
		
	КонецЕсли;	
	
	ВывестиОшибку(НСтр("en = 'File or directory does not exist ""'; ru = 'Файл или каталог не существует ""'") +
                           ОбъектФайл.ПолноеИмя + """");
	Возврат Ложь;	
КонецФункции

// Выполняет рекурсивную загрузку тестов и тестовых случаев
// из обработки или каталога с обработками для тестирования.
// 
Функция ЗагрузитьТесты(РодительскаяСтрока, ОбъектФайл)
	
	Если ОбъектФайл.ЭтоКаталог() Тогда
			
		СтрокаКаталога = ДобавитьСтрокуДереваТестов(РодительскаяСтрока, ОбъектФайл.Имя, ОбъектФайл.ПолноеИмя, 
			мЗначенияТиповСтроки.КаталогТестов, Неопределено);
		
		НайденныеФайлы = НайтиФайлы(ОбъектФайл.ПолноеИмя, "*", Ложь);
		Для каждого Файл из НайденныеФайлы Цикл
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли 
			
			Если Файл.ЭтоКаталог() Тогда
				
				ЗагрузитьТесты(СтрокаКаталога, Файл);
				 
			ИначеЕсли НРег(Файл.Расширение) = ".epf" Тогда //И НРег(Лев(Файл.Имя, 4)) = "тест" Тогда
				
				ДобавитьТест(СтрокаКаталога, Файл);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаКаталога.Строки.Количество() = 0 Тогда
			РодительскаяСтрока.Строки.Удалить(СтрокаКаталога);
		КонецЕсли;
		
	Иначе
		
		Если РодительскаяСтрока = ДеревоТестов ИЛИ РодительскаяСтрока.ТипСтроки = мЗначенияТиповСтроки.КаталогТестов Тогда
			ДобавитьТест(РодительскаяСтрока, ОбъектФайл);		
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции

// Добавляет тестовую обработку (тест) в дерево тестов.
// 
Процедура ДобавитьТест(РодительскаяСтрока, ФайлТеста, ТестовыйСлучайОбъектМетаданныхИмя = Неопределено, ДобавлятьСтрокуТестОбъект = Истина, НуженСписокЗначений = Ложь) Экспорт
	Перем ТестОбъект; // специально локальная переменная для исключения циклических ссылок
	
	ТестОбъект = Неопределено;
	
    Попытка
        Если ТестовыйСлучайОбъектМетаданныхИмя = Неопределено Тогда
            ТестОбъект = СоздатьОбъектВнешнейОбработкиОтключаяБезопасныйРежим(ФайлТеста.ПолноеИмя); //ВнешниеОбработки.Создать(ФайлТеста.ПолноеИмя, Ложь);	// безопасный режим выключен
        Иначе
            ТестОбъект = СоздатьОбъектВнешнейОбработкиОтключаяБезопасныйРежим(ТестовыйСлучайОбъектМетаданныхИмя); //ВнешниеОбработки.Создать(ТестовыйСлучайОбъектМетаданныхИмя, Ложь);	// безопасный режим выключен
        КонецЕсли;
	Исключение
		ВывестиОшибку("Тест не загружен: " + ФайлТеста.ПолноеИмя + "
		|	Ошибка: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	МассивТестовыхСлучаев = ПолучитьТестовыеСлучаи(ТестОбъект);
	
	Если МассивТестовыхСлучаев <> Неопределено Тогда
        
        Если ДобавлятьСтрокуТестОбъект Тогда
            СтрокаТеста = ДобавитьСтрокуДереваТестов(РодительскаяСтрока, ФайлТеста.ИмяБезРасширения, ФайлТеста.ПолноеИмя, 
			мЗначенияТиповСтроки.ТестовыйСлучай, Неопределено,,, НуженСписокЗначений);		
        Иначе
            СтрокаТеста = РодительскаяСтрока;
        КонецЕсли;
		
		
		Для каждого ТестовыйСлучай из МассивТестовыхСлучаев Цикл
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли 
			
			Если ТипЗнч(ТестовыйСлучай) = Тип("Строка") Тогда
				имяТестовогоСлучая = ТестовыйСлучай;
				параметрыТеста = Неопределено;
            Иначе
                имяТестовогоСлучая = ТестовыйСлучай.ИмяТеста;
                параметрыТеста = ТестовыйСлучай;
			КонецЕсли;
			
			ДобавитьСтрокуДереваТестов(СтрокаТеста, имяТестовогоСлучая, ФайлТеста.ПолноеИмя, 
				мЗначенияТиповСтроки.ТестовыйМетод, параметрыТеста,, мЗначениеМодульИлиФорма.Модуль, НуженСписокЗначений);
			
			мКоличествоТестовыхСлучаев = мКоличествоТестовыхСлучаев + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТестОбъект = Неопределено;
КонецПроцедуры

// Добавляет в дерево тестов новую строку.
// 
Функция ДобавитьСтрокуДереваТестов(РодительскаяСтрока, Имя, ПутьКФайлу, ТипСтроки = 0, ПараметрыТеста = Неопределено, Состояние=0, МодульИлиФорма = 0, НуженСписокЗначений = Ложь)

    Если ТипЗнч(РодительскаяСтрока) = Тип("СтрокаДереваЗначений") ИЛИ ТипЗнч(РодительскаяСтрока) = Тип("ДеревоЗначений") Тогда
        НоваяСтрока = РодительскаяСтрока.Строки.Добавить();
    ИначеЕсли ТипЗнч(РодительскаяСтрока) = Тип("ДанныеФормыЭлементДерева") ИЛИ ТипЗнч(РодительскаяСтрока) = Тип("ДанныеФормыДерево") Тогда
        НоваяСтрока = РодительскаяСтрока.ПолучитьЭлементы().Добавить();
    КонецЕсли;
	
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.ПолныйПуть = ПутьКФайлу;
	//НоваяСтрока.ПредставлениеПути = СтрЗаменить(ПутьКФайлу, НоваяСтрока.ПолучитьРодителя().ПолныйПуть, "...");
	НоваяСтрока.ТипСтроки = ТипСтроки;
	НоваяСтрока.Состояние = Состояние;
	НоваяСтрока._guid = Строка(Новый УникальныйИдентификатор());
    НоваяСтрока.МодульИлиФорма = МодульИлиФорма;
	
	НоваяСтрока.ЕстьПараметрыТеста = Ложь;
	НоваяСтрока.ИмяТестовогоСлучая = Имя;
	
    Если НуженСписокЗначений И ПараметрыТеста <> Неопределено Тогда
        СЗ = Новый СписокЗначений();
        СЗ.Добавить(ПараметрыТеста);
        НоваяСтрока.ПараметрыТеста = СЗ;
		
		описаниеПараметра = "<пусто>";
		Если ПараметрыТеста.Свойство("Параметр") Тогда
			описаниеПараметра = "" + ПараметрыТеста.Параметр;
		КонецЕсли;
		
		НоваяСтрока.Имя = НоваяСтрока.Имя + " ( " + описаниеПараметра + " )";
		
		НоваяСтрока.ЕстьПараметрыТеста = Истина;
    Иначе
        НоваяСтрока.ПараметрыТеста = ПараметрыТеста;
		Если ПараметрыТеста <> Неопределено Тогда
			описаниеПараметра = "<пусто>";
			Если ПараметрыТеста.Свойство("Параметр") Тогда
				описаниеПараметра = "" + ПараметрыТеста.Параметр;
			КонецЕсли;
			
			НоваяСтрока.Имя = НоваяСтрока.Имя + " ( " + описаниеПараметра + " )";
			НоваяСтрока.ЕстьПараметрыТеста = Истина;
		КонецЕсли;
		
    КонецЕсли;
	
	ОповеститьОСобытии("TestLoaded", НоваяСтрока);
	
	Возврат НоваяСтрока;
	
КонецФункции

	
// получает мИнформатор. Возвращает Неопределено, если мИнформатор не удалось загрузить
Функция ПолучитьИнформатор() Экспорт
	
#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
	ВызватьИсключение "Информатор пока можно использовать только в толстом клиенте обычного приложения!";
#КонецЕсли
	
	Если мИнформатор = Неопределено И мПытаемсяСоздатьИнформатор Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		используемПлатформу8_3 = Лев(СистемнаяИнформация.ВерсияПриложения, 3) = "8.3";
		Если используемПлатформу8_3 Тогда
			мПытаемсяСоздатьИнформатор = Ложь;
			Возврат Неопределено;
		КонецЕсли;
		
		файл = Новый Файл(ЭтотОбъект.ИспользуемоеИмяФайла);
		путьИнформатора = файл.Путь + "Informator.epf";
		файл = Новый Файл(путьИнформатора);
		
		Если НЕ файл.Существует() Тогда
			ВывестиОшибку("Класс Информатор не найден <"+путьИнформатора+">");
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			мИнформатор = СоздатьОбъектВнешнейОбработкиОтключаяБезопасныйРежим(путьИнформатора); //ВнешниеОбработки.Создать(путьИнформатора, Ложь);	// безопасный режим выключен
		Исключение
			ВывестиОшибку("Класс Информатор не удалось создать <"+путьИнформатора+">");
			
			мИнформатор = Неопределено;
			мПытаемсяСоздатьИнформатор = Ложь;
			Возврат Неопределено;
		КонецПопытки;			
	КонецЕсли;
	
	Возврат мИнформатор;
КонецФункции

// Получает с помощью Информатора массив тестовых экспортных методов, начинающихся с Тест
// может вызываться из теста из его метода ПолучитьСписокТестов(ЮнитТестирование)
Функция ДобавитьПростыеТестыИзОбъекта(массивТестов, ТестовыйОбъект) Экспорт
	Если мИнформатор = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ТаблицаМетодов = мИнформатор.ПолучитьТаблицуМетодов(ТестовыйОбъект);

		Для каждого СтрокаТаблицыМетодов из ТаблицаМетодов Цикл
			наименованиеТеста = СтрокаТаблицыМетодов.Наименование;
			Если НРег(Лев(наименованиеТеста, 4)) = "тест" 
				И СтрокаТаблицыМетодов.КоличествоПараметров = 0 Тогда
				
				Если массивТестов.Найти(наименованиеТеста) = Неопределено Тогда
					массивТестов.Добавить(наименованиеТеста);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ВывестиОшибку("Ошибка получения списка тестовых случаев: " + ОписаниеОшибки());		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Возвращает массив тестовых случаев обработки для тестирования.
Функция ПолучитьТестовыеСлучаи(ТестОбъект)
    Попытка
        
		#Если ТолстыйКлиентОбычноеПриложение Тогда
					//#Если Клиент Тогда
			получаемСписокТестовИзТестОбъекта = мИнформатор = Неопределено 
				или мИнформатор.МетодСуществует(ТестОбъект, "ПолучитьСписокТестов"); // после вызова Информатора появляются циклические ссылки
				Если НЕ получаемСписокТестовИзТестОбъекта Тогда
					//Если выводитьОшибку Тогда
					//	ВывестиОшибку("Набор тестов не загружен: " + ТестОбъект.ИспользуемоеИмяФайла + "
					//	|	Ошибка получения списка тестовых случаев: " + ОписаниеОшибки());
					//КонецЕсли;
				
				Возврат Неопределено;
			КонецЕсли;
		
        #Иначе
			получаемСписокТестовИзТестОбъекта = Истина;
        #КонецЕсли    
		
		Если получаемСписокТестовИзТестОбъекта Тогда
			МассивТестовыхСлучаев = ТестОбъект.ПолучитьСписокТестов(ЭтотОбъект);
		КонецЕсли;
		
	Исключение
			//Если выводитьОшибку Тогда
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ; //Ошибка.Описание + ". " + Ошибка.Причина.Описание + ". Номер строки: " + Ошибка.НомерСтроки;
		
		// TODO если не использовать переменную ниже, а поставить вызов метода в условие, то будет глюк - внутрь условия не попадаем !
		ЕстьОшибка_МетодОбъектаНеОбнаружен = ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, "ПолучитьСписокТестов");
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен Тогда
		
			ВывестиОшибку("Набор тестов не загружен: " + ТестОбъект.ИспользуемоеИмяФайла + "
			|	Ошибка получения списка тестовых случаев: " + ОписаниеОшибки());
			
			ТестОбъект = Неопределено;
		КонецЕсли;
		
		Возврат Неопределено;			
				
	КонецПопытки;

		Если ТипЗнч(МассивТестовыхСлучаев) <> Тип("Массив") Тогда
			
				//Если выводитьОшибку Тогда
			ВывестиОшибку("Набор тестов не загружен: " + ТестОбъект.ИспользуемоеИмяФайла + "
			|	Ошибка получения списка тестовых случаев: вместо массива имен тестовых случаев получен объект <" + Строка(ТипЗнч(МассивТестовыхСлучаев)) + ">");
				//КонецЕсли;
			ТестОбъект = Неопределено;
			Возврат Неопределено;			
			
		КонецЕсли;
		
		Если НЕ ПроверитьМассивТестовыхСлучаев(МассивТестовыхСлучаев, ТестОбъект) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат МассивТестовыхСлучаев;
		
	//Исключение
	//	Если выводитьОшибку Тогда
	//		ВывестиОшибку("Набор тестов не загружен: " + ТестОбъект.ИспользуемоеИмяФайла + "
	//		|	Ошибка получения списка тестовых случаев: " + ОписаниеОшибки());
	//	КонецЕсли;
	//			
	//КонецПопытки;
	
	Возврат Неопределено;
		
КонецФункции

Функция ПроверитьМассивТестовыхСлучаев(МассивТестовыхСлучаев, ТестОбъект)
	Для каждого данныеТеста из МассивТестовыхСлучаев Цикл
		Если ТипЗнч(данныеТеста) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(данныеТеста) <> Тип("Структура") Тогда
			ВывестиОшибку("Набор тестов не загружен: " + ТестОбъект.ИспользуемоеИмяФайла + "
			|	Ошибка получения структуры описания тестового случая: " + ОписаниеОшибки());
			Возврат Ложь;
		КонецЕсли;
		Если НЕ данныеТеста.Свойство("ИмяТеста") Тогда
			ВывестиОшибку("Набор тестов не загружен: " + ТестОбъект.ИспользуемоеИмяФайла + "
			|	Не задано имя теста в структуре описания тестового случая: " + ОписаниеОшибки());
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

// Возвращает количество подчиненных тестовых случаев для заданной строки дерева тестов.
// 
Функция ПолучитьКоличествоТестовыхСлучаев(СтрокаДереваТестов) Экспорт
	
	Если СтрокаДереваТестов.ТипСтроки = мЗначенияТиповСтроки.ТестовыйМетод Тогда
		Возврат 1;		
	КонецЕсли;	
	
	КоличествоТестовыхСлучаев = 0;
	Для каждого ПодчиненнаяСтрока из СтрокаДереваТестов.Строки Цикл
		КоличествоТестовыхСлучаев = КоличествоТестовыхСлучаев + ПолучитьКоличествоТестовыхСлучаев(ПодчиненнаяСтрока);
	КонецЦикла;
	
	Возврат КоличествоТестовыхСлучаев;
	
КонецФункции

//&НаСервере
Функция ВывестиОтчетТестирования(датаНачалаТестирования) Экспорт
//Процедура ВывестиОтчетТестирования(СписокОшибок, ВсегоТестов, датаНачалаТестирования) Экспорт
	СписокОшибок = мСписокОшибок;
	ВсегоТестов = мВсегоТестов;
	
	КоличествоОшибок = СписокОшибок.Количество();
	Если КоличествоОшибок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
    #Если Клиент Тогда
	ОчиститьСообщения();
    #КонецЕсли
	
	ПрошлоВремени = ТекущаяДата() - датаНачалаТестирования;
	
	ТабДок = Новый ТабличныйДокумент;
	макет = ПолучитьМакет("ОтчетТестирования");

	Секция = макет.ПолучитьОбласть("Заголовок"); //"R1C1:R6C1");
	Секция.Параметры.ВсегоТестов = ВсегоТестов;
	Секция.Параметры.КоличествоОшибок = КоличествоОшибок;
	Секция.Параметры.ПрошлоВремени = ПрошлоВремени;
	Секция.Параметры.ПрошлоВремениСтрока = формат(Дата(1,1,1) + ПрошлоВремени, "ДЛФ=T");
	Секция.Параметры.ВремяВыполненияОдногоТеста = ?(ВсегоТестов = 0, "", Формат(ПрошлоВремени / ВсегоТестов * 1000, "ЧЦ=15; ЧДЦ=2"));
	ТабДок.Вывести(Секция);

	ТабДок.НачатьАвтогруппировкуСтрок();
	
	Для Каждого Ошибка Из СписокОшибок Цикл
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли 

		ВывестиОшибкуВМакет(ТабДок, макет, Ошибка.Значение);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.Показать("Отчет об автоматическом тестировании, 1CUnit v." + Версия());
	
	Возврат ТабДок;
КонецФункции

Процедура ВывестиОшибкуВМакет(ТабДок, макет, _Ошибка)
	Секция = макет.ПолучитьОбласть("НаименованиеНабора");
	ЗаполнитьЗначенияСвойств(Секция.Параметры, _Ошибка);
	ТабДок.Вывести(Секция, 1);
	
	Секция = макет.ПолучитьОбласть("НаименованиеТеста");
	ЗаполнитьЗначенияСвойств(Секция.Параметры, _Ошибка);
	ТабДок.Вывести(Секция, 2);
	
	Если _Ошибка.ЕстьПараметрыТеста Тогда
		Секция = макет.ПолучитьОбласть("ПараметрыТеста");
		ЗаполнитьЗначенияСвойств(Секция.Параметры, _Ошибка);
			//Секция.Область("R4C1").Текст = "Параметр метода: "+_Ошибка.ПараметрыТеста;
		ТабДок.Вывести(Секция, 2);
	КонецЕсли;
	
	ИнфоОшибки = _Ошибка.ИнфоОшибки;
	Пока ИнфоОшибки <> Неопределено Цикл  // Артур TODO
		Секция = макет.ПолучитьОбласть("R1C1:R4C3");
		Секция.Область("R1C3").Текст = ИнфоОшибки.ИмяМодуля + ", строка № "+ИнфоОшибки.НомерСтроки;
		Секция.Область("R2C3").Текст = ИнфоОшибки.ИсходнаяСтрока;
		//Секция.Область("R3C3").Текст = ИнфоОшибки.НомерСтроки;
		//Секция.Область("R4C3").Текст = ИнфоОшибки.Описание;
		Секция.Область("R3C3").Текст = ИнфоОшибки.Описание;
		
			//Секция.Область("R5C3").Текст = ПодробноеПредставлениеОшибки(ИнфоОшибки); // Артур - лишнее описание ошибки
		
		ТабДок.Вывести(Секция, 3);
		
		ИнфоОшибки = ИнфоОшибки.Причина;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ ОБЩЕГО
// НАЗНАЧЕНИЯ

Функция ВывестиОшибку(Ошибка) Экспорт
	
	ТипОбъектаОшибка = ТипЗнч(Ошибка);
		
	Если ТипОбъектаОшибка = Тип("Структура") Тогда
		
		ВывестиСообщение("[" + Ошибка.ИмяТестовогоНабора + ": " + Ошибка.ИмяТестовогоСлучая + "] " + Ошибка.Описание, СтатусСообщения.Важное);
		//ВывестиСообщение("[" + Ошибка.ИмяТеста + ": " + Ошибка.ИмяТестовогоСлучая + "] " + Ошибка.Описание, СтатусСообщения.Важное);
		
	ИначеЕсли ТипОбъектаОшибка = Тип("ИнформацияОбОшибке") Тогда
		
		ВывестиСообщение(Ошибка.Описание, СтатусСообщения.Важное);
		
	Иначе
		
		ВывестиСообщение(Ошибка, СтатусСообщения.Важное);
		
	КонецЕсли;

КонецФункции

Функция ПредставлениеЗначения(Значение)
	
	Перем ЗначениеСтрокой;
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Булево") Тогда
		ЗначениеСтрокой = Формат(Значение, "БЛ=Ложь; БИ=Истина");
	Иначе
		ЗначениеСтрокой = Строка(Значение);
	КонецЕсли;
	
	Представление = "<" + ЗначениеСтрокой + "> (" + Строка(ТипЗначения) + ")";
	
	Возврат Представление;
	
КонецФункции

Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Символы.ПС + ДопСообщениеОшибки;
КонецФункции

Функция СоздатьОбъектВнешнейОбработкиОтключаяБезопасныйРежим(путьФайла)

	Возврат ВнешниеОбработки.Создать(путьФайла, Ложь);

КонецФункции // СоздатьОбъектВнешнейОбработкиОтключаяБезопасныйРежим()

// Устанавливает новое текущее состояние выполнения тестов
// в соответствии с приоритетами состояний:
// 		Красное - заменяет все другие состояния
// 		Желтое - заменяет только зеленое состояние
// 		Зеленое - заменяет только серое состояние (тест не выполнялся ни разу).
Функция ЗапомнитьСамоеХудшееСостояние(ТекущееСостояние, НовоеСостояние)
	
	ТекущееСостояние = Макс(ТекущееСостояние, НовоеСостояние);
	Возврат ТекущееСостояние;
	
КонецФункции

// Рекурсивно вверх от текущей строки меняет состояние у родительских строк.
// 
Процедура ИзменитьСостояниеВыполненияРодителей(СтрокаДереваТестов) Экспорт
	
	Если СтрокаДереваТестов.Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРодителя = СтрокаДереваТестов.Родитель;
	ЗапомнитьСамоеХудшееСостояние(СтрокаРодителя.Состояние, СтрокаДереваТестов.Состояние);
	ИзменитьСостояниеВыполненияРодителей(СтрокаРодителя);
	
КонецПроцедуры

// Оповещает внешний мир о каком-либо событии. Используется
// для взаимодействия со скриптом Снегопата, а также с формой браузера 
// когда он запущен в режиме обычного приложения.
// 
Функция ОповеститьОСобытии(ИмяСобытия, Аргумент1=Неопределено)
	Если mMiddleMan <> Неопределено Тогда
		Попытка
			Выполнить("mMiddleMan." + ИмяСобытия + "(Аргумент1);");			
		Исключение
		КонецПопытки;
	КонецЕсли;
	#Если Клиент Тогда 
		Оповестить("1CUnit." + ИмяСобытия, Аргумент1);
	#КонецЕсли
КонецФункции

Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, имяМетода)
	Возврат Найти(текстОшибки, "Метод объекта не обнаружен ("+имяМетода+")") > 0;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ  СОБЫТИЙ ОБЪЕКТА

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
// Общий модуль СтроковыеФункцииКлиентСервер.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


//{ Состояния тестов - ВАЖЕН порядок заполнения в мЗначенияСостоянияТестов, используется в ЗапомнитьСамоеХудшееСостояние
мЗначенияСостоянияТестов = Новый Структура;
мЗначенияСостоянияТестов.Вставить("НеВыполнялся", 0);
мЗначенияСостоянияТестов.Вставить("Прошел"		, 1);
мЗначенияСостоянияТестов.Вставить("НеРеализован", 2);
мЗначенияСостоянияТестов.Вставить("Сломался"	, 3);
//} Состояния тестов

//{ Типы строк дерева тестов
мЗначенияТиповСтроки = Новый Структура;
мЗначенияТиповСтроки.Вставить("КаталогТестов", 0);
мЗначенияТиповСтроки.Вставить("ТестовыйСлучай", 1);
мЗначенияТиповСтроки.Вставить("ТестовыйМетод", 2);
//} Типы строк дерева тестов

мЗначениеМодульИлиФорма = Новый Структура();
мЗначениеМодульИлиФорма.Вставить("Модуль", 1);
мЗначениеМодульИлиФорма.Вставить("Форма", 2);

//{ Инициализация дерева тестов
ДеревоТестов.Колонки.Добавить("Имя");
ДеревоТестов.Колонки.Добавить("ВремяВыполнения");
ДеревоТестов.Колонки.Добавить("ПолныйПуть");
//ДеревоТестов.Колонки.Добавить("ПредставлениеПути");
ДеревоТестов.Колонки.Добавить("ТипСтроки");
ДеревоТестов.Колонки.Добавить("Состояние");
ДеревоТестов.Колонки.Добавить("МодульИлиФорма");
//ДеревоТестов.Колонки.Добавить("_Объект");
ДеревоТестов.Колонки.Добавить("_guid");
ДеревоТестов.Колонки.Добавить("ПараметрыТеста");
ДеревоТестов.Колонки.Добавить("ЕстьПараметрыТеста");
ДеревоТестов.Колонки.Добавить("ИмяТестовогоСлучая");
ДеревоТестов.Колонки.Добавить("КоличествоТестов");
//} Инициализация дерева тестов

мИнформатор = Неопределено;

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
	мПытаемсяСоздатьИнформатор = Истина;

	Если мПытаемсяСоздатьИнформатор Тогда
		ПолучитьИнформатор();
	КонецЕсли; 
#Иначе
	мПытаемсяСоздатьИнформатор = Ложь;
#КонецЕсли

мКоличествоТестовыхСлучаев  = 0;