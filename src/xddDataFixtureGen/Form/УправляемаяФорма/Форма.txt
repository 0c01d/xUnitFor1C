
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТаблицаДанных

&НаКлиенте
Процедура ТаблицаДанныхСсылкаПриИзменении(Элемент)
	ТаблицаДанныхСсылкаПриИзмененииСервер(Элементы.ТаблицаДанных.ТекущаяСтрока);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СоздатьМакетДанных(Команда)
	Если ПроверитьЗаполнение() Тогда
		НовыйМакет = СоздатьМакетДанныхСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПротестироватьЗагрузкуМакета(Команда)
	ЕстьВстроеннаяОбработка_юТест = Объект.ЕстьВстроеннаяОбработка_юТест;
	ЭтоВстроеннаяОбработка = Объект.ЭтоВстроеннаяОбработка;
	
	Если ЭтоВстроеннаяОбработка И Не ЕстьВстроеннаяОбработка_юТест Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = НСтр("ru = 'В конфигурации отсутствует обработка "+ИмяЗапускателяТестов()+". Функция тестирования загрузки макета недоступна.'");
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ЕстьВстроеннаяОбработка_юТест Тогда
		ПроверитьЗагрузкуМакетаСервер(Неопределено, Макет, Истина);
	Иначе
		путьФайл_юТест = ПолучитьПутьОбработкиЗапускателяТестов();
		ИдОбработки_юТест = ИмяЗапускателяТестов();
		ИДПодключеннойОбработки = ПодключитьНаСервереВнешнююОбработкуОтКлиента(путьФайл_юТест, ИдОбработки_юТест);
		ПроверитьЗагрузкуМакетаСервер(ИДПодключеннойОбработки, Макет, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьМакетДанныхВФайл(Команда)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.ПолноеИмяФайла = "";
	ДиалогВыбораФайла.Фильтр = "Табличный документ (*.mxl)|*.mxl|Все файлы (*.*)|*.*";
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	Если Не ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Макет.Записать(ДиалогВыбораФайла.ПолноеИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуДанных(Команда)
	Объект.ТаблицаДанных.Очистить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция Объект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере
Процедура ТаблицаДанныхСсылкаПриИзмененииСервер(ИдентификаторСтрокиДанных)
	ЭлементДанных = Объект.ТаблицаДанных.НайтиПоИдентификатору(ИдентификаторСтрокиДанных);
	Объект().ПриИзмененииСсылки(ЭлементДанных);
КонецПроцедуры

&НаСервере
Функция СоздатьМакетДанныхСервер()
	Возврат Объект().СоздатьМакетДанныхПоТаблицеДанных(Макет);
КонецФункции

&НаСервере
Функция ПолучитьКаталогОбработкиСервер()
	Возврат Объект().ПолучитьКаталогОбработки();
КонецФункции

&НаСервере
Функция ПодключитьВнешнююОбработкуСервер(АдресХранилища, ИдентификаторОбработки, ПолныйПутьФайлаОбработки)
	Возврат Объект().ПодключитьВнешнююОбработку(АдресХранилища, ИдентификаторОбработки, ПолныйПутьФайлаОбработки);
КонецФункции

&НаКлиенте
Функция ИмяЗапускателяТестов()
	Возврат ИмяЗапускателяТестов();
КонецФункции

&НаСервере
Функция ИмяЗапускателяТестовСервер()
	ОсновнойОбъект = Объект();
	Возврат ОсновнойОбъект.ИмяЗапускателяТестов();
КонецФункции

&НаКлиенте
Функция ПолучитьПутьОбработкиЗапускателяТестов()
	каталогТекущегоФайла = ПолучитьКаталогОбработкиСервер();
	
	имяФайла_Раннера = ИмяЗапускателяТестов() + ".epf";
	Файл = Новый Файл(каталогТекущегоФайла + имяФайла_Раннера);
	Если НЕ Файл.Существует() Тогда
		Файл = Новый Файл(каталогТекущегоФайла + "..\" + имяФайла_Раннера);
		Если НЕ Файл.Существует() Тогда
			ВызватьИсключение "Не удалось найти файл "+имяФайла_Раннера;
		КонецЕсли;
	КонецЕсли;
	путьФайл_Раннер = Файл.ПолноеИмя;
	Возврат путьФайл_Раннер;
КонецФункции

&НаКлиенте
Функция ПодключитьНаСервереВнешнююОбработкуОтКлиента(ПолныйПутьФайлаОбработки, ИдентификаторОбработки)
	АдресХранилища = "";
	#Если ТонкийКлиент Тогда
	ПоместитьФайл(АдресХранилища, ПолныйПутьФайлаОбработки,, Ложь);
	#КонецЕсли
	Возврат ПодключитьВнешнююОбработкуСервер(АдресХранилища, ИдентификаторОбработки, ПолныйПутьФайлаОбработки);
КонецФункции

&НаСервере
Процедура ПроверитьЗагрузкуМакетаСервер(ИдОбработки_юТест, ТабличныйДокумент, ЕстьВстроеннаяОбработка_юТест)
	Объект().ПроверитьЗагрузкуМакета(ИдОбработки_юТест, ТабличныйДокумент, ЕстьВстроеннаяОбработка_юТест);
КонецПроцедуры




&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектНаСервере = Объект();
	ЭтаФорма.Заголовок = ОбъектНаСервере.ЗаголовокФормы();
	ИмяЗапускателяТестов = ИмяЗапускателяТестовСервер();	
	
	ОбъектНаСервере.Инициализация();
	ЗначениеВРеквизитФормы(ОбъектНаСервере.ДеревоМетаданных, "Объект.ДеревоМетаданных");

	ОбъектНаСервере.СписокВыбора_РежимПоиска(Элементы.ТаблицаДанныхРежимПоиска.СписокВыбора);
	ОбъектНаСервере.СписокВыбора_РежимСоздания(Элементы.ТаблицаДанныхРежимСоздания.СписокВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВыгружаемыеПоСсылке(Команда)
	
	Состояние(Нстр("ru = 'Выполняется поиск объектов метаданных, которые могут быть выгружены по ссылкам...'"));
	СохранитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
	ПересчитатьВыгружаемыеПоСсылкеНаСервере();
	ВосстановитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтображениеДерева(СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Строка.Развернут = Элементы.ДеревоМетаданных.Развернут(ИдентификаторСтроки);
		
		СохранитьОтображениеДерева(Строка.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВыгружаемыеПоСсылкеНаСервере()
	
	ОбъектНаСервере = Объект();
	ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере);
	ОбъектНаСервере.СоставВыгрузки(Истина);
	ЗначениеВРеквизитФормы(ОбъектНаСервере.ДеревоМетаданных, "Объект.ДеревоМетаданных");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере)
	
	ДеревоМетаданных = РеквизитФормыВЗначение("Объект.ДеревоМетаданных");
	
	ОбъектНаСервере.Инициализация();
	
	ПроставитьПометкиВыгружаемыхДанных(ОбъектНаСервере.ДеревоМетаданных.Строки, ДеревоМетаданных.Строки);
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьПометкиВыгружаемыхДанных(СтрокиИсходногоДерева, СтрокиЗаменяемогоДерева)
	
	КолонкаВыгружать = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Выгружать");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВыгружать, "Выгружать");
	
	КолонкаВыгружатьПриНеобходимости = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("ВыгружатьПриНеобходимости");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВыгружатьПриНеобходимости, "ВыгружатьПриНеобходимости");
	
	КолонкаРазвернут = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Развернут");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаРазвернут, "Развернут");
	
	Для Каждого СтрокаИсходногоДерева Из СтрокиИсходногоДерева Цикл
		
		ИндексСтроки = СтрокиИсходногоДерева.Индекс(СтрокаИсходногоДерева);
		СтрокаИзменяемогоДерева = СтрокиЗаменяемогоДерева.Получить(ИндексСтроки);
		
		ПроставитьПометкиВыгружаемыхДанных(СтрокаИсходногоДерева.Строки, СтрокаИзменяемогоДерева.Строки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьОтображениеДерева(СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Если Строка.Развернут Тогда
			Элементы.ДеревоМетаданных.Развернуть(ИдентификаторСтроки);
		КонецЕсли;
		
		ВосстановитьОтображениеДерева(Строка.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоМетаданных

&НаКлиенте
Процедура ДеревоМетаданныхВыгружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные.Выгружать = 2 Тогда
		ТекущиеДанные.Выгружать = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Выгружать");
	УстановитьПометкиРодителей(ТекущиеДанные, "Выгружать");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхВыгружатьПриНеобходимостиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные.ВыгружатьПриНеобходимости = 2 Тогда
		ТекущиеДанные.ВыгружатьПриНеобходимости = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные, "ВыгружатьПриНеобходимости");
	УстановитьПометкиРодителей(ТекущиеДанные, "ВыгружатьПриНеобходимости");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекСтрока, ИмяФлажка)
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка из Подчиненные Цикл
		
		Строка[ИмяФлажка] = ТекСтрока[ИмяФлажка];
		
		УстановитьПометкиПодчиненных(Строка, ИмяФлажка);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекСтрока, ИмяФлажка)
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСостояние = Родитель[ИмяФлажка];
	
	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;
	
	Для Каждого Строка из Родитель.ПолучитьЭлементы() Цикл
		Если Строка[ИмяФлажка] = 0 Тогда
			НайденыВыключенные = Истина;
		ИначеЕсли Строка[ИмяФлажка] = 1
			ИЛИ Строка[ИмяФлажка] = 2 Тогда
			НайденыВключенные  = Истина;
		КонецЕсли; 
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[ИмяФлажка] = Включить;
		УстановитьПометкиРодителей(Родитель, ИмяФлажка);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхПриАктивизацииСтроки(Элемент)
	
	НастроитьКомпоновщик();
	
КонецПроцедуры

// Служит для настройки построителя при отборе данных
//
// Параметры:
//
&НаКлиенте
Процедура НастроитьКомпоновщик()
	
	ТекущаяСтрока = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОпределитьПоСтрокеДереваДоступенПостроитель(ТекущаяСтрока) Тогда
		
		ДоступностьКомпоновщика = ЛОЖЬ;
		УдалитьОтборыКомпоновщика(КомпоновщикНастроекКомпоновкиДанных);
		
	Иначе
		
		Попытка
			
			//НастроитьКомпоновщикНаСервере(Элементы.ДеревоМетаданных.ТекущаяСтрока);
			
			ДоступностьКомпоновщика = Истина;
			
		Исключение
			ДоступностьКомпоновщика = ЛОЖЬ;
			УдалитьОтборыКомпоновщика(КомпоновщикНастроекКомпоновкиДанных);
		КонецПопытки;
		
	КонецЕсли;
	
	Элементы.КомпоновщикОтбор.Доступность = ДоступностьКомпоновщика;
	//Элементы.КоманднаяПанельКомпоновщикОтбор.Доступность = ДоступностьКомпоновщика;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьПоСтрокеДереваДоступенПостроитель(СтрокаДерева)
	
	Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УдалитьОтборыКомпоновщика(Компоновщик)
	
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКомпоновщикНаСервере(ТекущаяСтрока)
	
	СтрокаДерева = Объект.ДеревоМетаданных.НайтиПоИдентификатору(ТекущаяСтрока);
	СхемаКомпоновкиДанных = Объект().ПодготовитьКомпоновщикДляВыгрузки(СтрокаДерева);
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры // НастроитьКомпоновщикНаСервере()

&НаКлиенте
Процедура ПолучитьНастрокиОтбора(Команда)
	
	Если Элементы.ДеревоМетаданных.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьКомпоновщикНаСервере(Элементы.ДеревоМетаданных.ТекущаяСтрока);
	
КонецПроцедуры
