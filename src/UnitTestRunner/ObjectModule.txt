////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Прокси-объект для взаимодействия с внешним миром, 
// когда браузер тестов открывается извне, например,
// скриптом для Снегопата.
// 
Перем mMiddleMan;

Перем мИнформатор; // работа с таблицей методов в runtime
Перем мПытаемсяСоздатьИнформатор;

Перем мЗначенияСостоянияТестов Экспорт;
Перем мЗначенияТиповСтроки Экспорт;
Перем мЗначениеМодульИлиФорма Экспорт;

// Хранит количество загруженных тестовых случаев.
Перем мКоличествоТестовыхСлучаев Экспорт;


Функция Версия() Экспорт
	Возврат "1.0.6.5";
КонецФункции

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ДЛЯ ПРОВЕРКИ ЗНАЧЕНИЙ (assertions). 
// 
// На основе общего модуля тестирования Я_Тест для 1С:Предприятия 8 (SnowTest) Федора Езеева.
// 

Процедура Проверить(_Истина, ДопСообщениеОшибки = "") Экспорт
	Если Не _Истина Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Истина, "БЛ=ложь; БИ=истина")+") не является Истиной, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьИстину(_Истина, ДопСообщениеОшибки = "") Экспорт
	Проверить(_Истина, ДопСообщениеОшибки);
КонецПроцедуры

Процедура ПроверитьЛожь(_Ложь, ДопСообщениеОшибки = "") Экспорт
	Если _Ложь Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Ложь, "БЛ=ложь; БИ=истина")+") не является Ложью, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 <> _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") не равны, а хотели, чтобы были равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьНеРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 = _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") равны, а хотели, чтобы были не равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьБольше(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше <= _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше или равен второму ("+_Меньше+") а хотели, чтобы был больше." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьБольшеИлиРавно(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше < _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше второго ("+_Меньше+") а хотели, чтобы был больше или равен." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьМеньше(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 >= проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> больше или равно, чем <"+проверяемоеЗначение2+">, а ожидалось меньше"+
				ФорматДСО(СообщениеОбОшибке);
	КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьМеньшеИлиРавно(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 > проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> больше, чем <"+проверяемоеЗначение2+">, а ожидалось меньше или равно"+
				ФорматДСО(СообщениеОбОшибке);
	КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьВыполнилось(СтрокаВыполнения, ДопСообщениеОшибки = "") Экспорт
	Попытка
		Выполнить(СтрокаВыполнения);
		Упало = Ложь;
	Исключение
		Упало = Истина;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Упало Тогда
		СообщениеОшибки = "Хотели, чтобы код """+СтрокаВыполнения+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьМетодВыполнился(Объект, ИмяМетода, ДопСообщениеОшибки = "") Экспорт
	СтрокаВыполнения = "Объект."+ИмяМетода+"()";
	
	Попытка
		Выполнить(СтрокаВыполнения);
		Упало = Ложь;
	Исключение
		Упало = Истина;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Упало Тогда
		СообщениеОшибки = "Хотели, чтобы код """+СтрокаВыполнения+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьНеВыполнилось(СтрокаВыполнения, ОжидаемоеОписаниеОшибки, ДопСообщениеОшибки = "") Экспорт
	Попытка
		Выполнить(СтрокаВыполнения);
		Успех = Истина;
	Исключение
		Успех = Ложь;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Успех Тогда
		ВызватьИсключение("Хотели, чтобы код """+СтрокаВыполнения+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если ОжидаемоеОписаниеОшибки <> ПолученноеОписаниеОшибки Тогда
		ВызватьИсключение("Хотели, чтобы код """+СтрокаВыполнения+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьМетодНеВыполнился(Объект, ИмяМетода, ОжидаемоеОписаниеОшибки, ДопСообщениеОшибки = "") Экспорт
	СтрокаВыполнения = "Объект."+ИмяМетода+"()";
	
	Попытка
		Выполнить(СтрокаВыполнения);
		Успех = Истина;
	Исключение
		Успех = Ложь;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Успех Тогда
		ВызватьИсключение("Хотели, чтобы код """+СтрокаВыполнения+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если ОжидаемоеОписаниеОшибки <> ПолученноеОписаниеОшибки Тогда
		ВызватьИсключение("Хотели, чтобы код """+СтрокаВыполнения+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

// проверка идет через ЗначениеЗаполнено, но мутабельные значение всегда считаем заполненными
Процедура ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
    Попытка
        фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
    Исключение
        Возврат;
    КонецПопытки; 
    Если НЕ фЗаполнено Тогда
        ВызватьИсключение "Значение ("+ПроверяемоеЗначение+") не заполнено, а ожидалась заполненность" + ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	СообщениеОшибки = "Значение ("+ПроверяемоеЗначение+") заполнено, а ожидалась незаполненность" + ФорматДСО(ДопСообщениеОшибки);
	Попытка
        фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
    Исключение
        ВызватьИсключение СообщениеОшибки;
    КонецПопытки; 
    Если фЗаполнено Тогда
        ВызватьИсключение СообщениеОшибки;
    КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьТип(значение, ТипИлиИмяТипа, ДопСообщениеОшибки = "") Экспорт
    Если ТипЗнч(ТипИлиИмяТипа) = Тип("Строка") Тогда
        искомыйТип = Тип(ТипИлиИмяТипа);
    ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип("Тип") Тогда
        искомыйТип = ТипИлиИмяТипа;
    Иначе
        ВызватьИсключение "ПроверитьТип: Тип значения параметра ТипИлиИмяТипа должен быть <Тип> или <Строка>, а получили <"+ ТипЗнч(ТипИлиИмяТипа) + ">" + ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
    Если ТипЗнч(значение) <> искомыйТип Тогда
        ВызватьИсключение "Типом значения <"+значение+"> является <"+ТипЗнч(значение)+">, а ожидался тип <"+ТипИлиИмяТипа+">."+ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьВхождение(строка, подстрокаПоиска, ДопСообщениеОшибки = "") Экспорт
	Если Найти(строка, подстрокаПоиска) = 0 Тогда
		СообщениеОшибки = "Искали в <"+строка+"> подстроку <"+подстрокаПоиска+">, но не нашли." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьНаличиеОбъектаИБ(ссылка, ДопСообщениеОшибки = "") Экспорт
	Если Не ЗначениеЗаполнено(ссылка) Тогда
		СообщениеОшибки = "Ожидали заполненность ссылки, а получили пустую ссылку." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
	лОбъект = ссылка.ПолучитьОбъект();
	Если лОбъект = Неопределено Тогда
		СообщениеОшибки = "Ожидали существование объекта в ИБ, а получили объект не найден <" + ссылка + "> ." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ДЛЯ ИСПОЛЬЗОВАНИЯ ИЗ ОБРАБОТОК ТЕСТИРОВАНИЯ

// Создает новый набор тестов.
// 
Функция Новый_НаборТестов() Экспорт
	Возврат Новый Массив;
КонецФункции

// Добавляет новый тестовый случай в набор.
// 
Функция НаборТестов_Добавить(НаборТестов, ИмяТестовогоСлучая, П1=Неопределено, П2=Неопределено, П3=Неопределено, П4=Неопределено, П5=Неопределено, П6=Неопределено, П7=Неопределено) Экспорт
	
	НаборТестов.Добавить(ИмяТестовогоСлучая);
	Возврат НаборТестов;
	
КонецФункции

// Выводит сообщение. В тестах ВСЕГДА должна использоваться ВМЕСТО метода Сообщить().
// 
Функция ВывестиСообщение(ТекстСообщения, Статус=Неопределено) Экспорт	
	
	Если mMiddleMan <> Неопределено Тогда
		Попытка
			mMiddleMan.Message(ТекстСообщения);
		Исключение
			ОповеститьОСобытии("ВывестиСообщение", ТекстСообщения);
		КонецПопытки;
	Иначе
		Сообщить(ТекстСообщения, Статус);	
	КонецЕсли;
	
КонецФункции

// Вызывает исключение с заданным текстом ошибки для прерывания выполнения тестового случая.
// 
Функция ПрерватьТест(ТекстОшибки) Экспорт
	
	ВызватьИсключение ТекстОшибки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВНЕШНЕЕ API (для использования из скрипта Снегопата или из COM-подключения).

Процедура OpenBrowserForm() Экспорт
	ЭтотОбъект.ПолучитьФорму("Форма").Открыть();
КонецПроцедуры

// Устанавливает объект-прокси, который будет получать сообщения 
// о ходе загрузки и выполнения тестов, сообщения, выводимые при 
// выполнении тестов. Для использования в скрипте для Снегопата.
// 
Функция SetHandlerObject(obj) Экспорт
	mMiddleMan = obj;
КонецФункции

// Загружает все тесты из каталога в дерево тестов.
// 
Функция LoadAllTests(ПутьККаталогу) Экспорт
	
	ДеревоТестов.Строки.Очистить();
			
	ЗагрузитьТесты(ДеревоТестов, Новый Файл(ПутьККаталогу));
		
КонецФункции

// Загружает отдельную обработку тестирования в дерево тестов.
// 
Функция LoadTest(ПутьКФайлуТеста) Экспорт
	
	ДеревоТестов.Строки.Очистить();
			
	ЗагрузитьТесты(ДеревоТестов, Новый Файл(ПутьКФайлуТеста));
		
КонецФункции

// Выполняет все тесты, загруженные в дерево тестов.
// 
Функция RunAllTests() Экспорт
    
    #Если Клиент Тогда
	ОчиститьСообщения();
    #КонецЕсли
	ВыполнитьТесты(ДеревоТестов.Строки);

КонецФункции

// Запускает отдельный тест из дерева тестов.
// 
Функция RunTest(TestRow) Экспорт
	
    #Если Клиент Тогда
	ОчиститьСообщения();
    #КонецЕсли
	
	ПередВыполнениемТестов();
	ВыполнитьТест(TestRow, мСписокОшибок);
	
КонецФункции

// { Методы генерации тестовых данных

// количествоСозданныхОбъектов учитывает только созданные элементы справочников, документы и пользователей ИБ. Записи регистров сведений не считаются!
Функция СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, количествоСозданныхОбъектов = 0) Экспорт
	КолонкиМакета = КолонкиМакетаДанных();
			Если Ложь Тогда
				ТабличныйДокумент = Новый ТабличныйДокумент;
			КонецЕсли;
	Данные = Новый Структура();
	количествоСозданныхОбъектов = 0;
	
	ТекущаяСтрока = 2;
	Пока ТекущаяСтрока <= ТабличныйДокумент.ВысотаТаблицы Цикл
		ТекущаяСтрока_Строкой = Формат(ТекущаяСтрока, "ЧГ=");
		ИмяПеременной = ТабличныйДокумент.Область("R" + ТекущаяСтрока_Строкой + "C" + КолонкиМакета.ИмяПеременной).Текст;
		Режим = ВРег(ТабличныйДокумент.Область("R" + ТекущаяСтрока_Строкой + "C" + КолонкиМакета.Режим).Текст);
		Объект = СоздатьОбъект(ТекущаяСтрока, ТабличныйДокумент, Данные);
		Если Объект <> Неопределено Тогда
			ОписательОбъекта = Объект;
			Если Найти(Строка(ТипЗнч(Объект)), "Регистр") <> 0 Тогда
			ИначеЕсли ТипЗнч(Объект) = Тип("ПользовательИнформационнойБазы") Тогда
				количествоСозданныхОбъектов = количествоСозданныхОбъектов + 1;
			Иначе
				Если Режим = "ОБЪЕКТ" Тогда
					ОписательОбъекта = Объект;
				Иначе
					ОписательОбъекта = Объект.Ссылка;
				КонецЕсли;
				количествоСозданныхОбъектов = количествоСозданныхОбъектов + 1;
			КонецЕсли;
			Если Данные.Свойство(ИмяПеременной) Тогда
				ВызватьИсключение "Пытаемся повторно вставить объект с именем переменной <"+ИмяПеременной+">";
			КонецЕсли;
			Данные.Вставить(ИмяПеременной, ОписательОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Данные;
КонецФункции

// удаляет созданные элементы (Справочники, Документы, Пользователи ИБ), регистры сведений не чистит - есть тесты
Функция УдалитьСозданныеДанные(Данные) Экспорт
	// обратный порядок нужен для получения правильного количества удаленных элементов, т.к Владелец.Удалить удаляет и подчиненные элементы из подчиненных справочников
	массивВОбратномПорядке = Новый Массив;
	Для каждого ключЗначение Из Данные Цикл
		массивВОбратномПорядке.Вставить(0, КлючЗначение.Значение);
	КонецЦикла;
	
	количествоУдаленных = 0;
	Для каждого элем Из массивВОбратномПорядке Цикл
		типЭлемента = ТипЗнч(элем);
		Если Справочники.ТипВсеСсылки().СодержитТип(типЭлемента) Тогда
			объект = элем.ПолучитьОбъект();
			Если объект <> Неопределено Тогда
				Попытка
					объект.Удалить();
					количествоУдаленных = количествоУдаленных + 1;
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли; 
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(типЭлемента) Тогда
			объект = элем.ПолучитьОбъект();
			Если объект <> Неопределено Тогда
				Попытка
					объект.Удалить();
					количествоУдаленных = количествоУдаленных + 1;
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли; 
		ИначеЕсли типЭлемента = Тип("ПользовательИнформационнойБазы") Тогда
			Попытка
				элем.Удалить();
				количествоУдаленных = количествоУдаленных + 1;
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли; 
	КонецЦикла;
	Возврат количествоУдаленных;
КонецФункции

Функция СоздатьПользователяИБ(параметры) Экспорт
	НовыйПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();

	ЗаполнитьЗначенияСвойств(НовыйПользователь, параметры,, "ОсновнойИнтерфейс");
	Если ЗначениеЗаполнено(параметры.ОсновнойИнтерфейс) Тогда
		НовыйПользователь.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(параметры.ОсновнойИнтерфейс);
	КонецЕсли;
	Для каждого роль Из параметры.Роли Цикл
		НовыйПользователь.Роли.Добавить(роль);
	КонецЦикла;

	НовыйПользователь.Записать();  
	Возврат НовыйПользователь;
КонецФункции

Функция КолонкиМакетаДанных()
	КолонкиМакета = Новый Структура();
	КолонкиМакета.Вставить("Тип", "1");
	КолонкиМакета.Вставить("Вид", "2");
	КолонкиМакета.Вставить("ИмяПеременной", "3");
	КолонкиМакета.Вставить("ТЧ", "4");
	КолонкиМакета.Вставить("Реквизит", "5");
	КолонкиМакета.Вставить("Значение", "6");
	КолонкиМакета.Вставить("Режим", "7");
	КолонкиМакета.Вставить("ДополнительныйТипЗначения", "8");	// LIK
	
	Возврат КолонкиМакета;
КонецФункции

Функция СоздатьОбъект(ТекущаяСтрока, ТабличныйДокумент, Данные)
	КолонкиМакета = КолонкиМакетаДанных();
	Объект = Неопределено;
	
	ТекущаяСтрока_Строкой = Формат(ТекущаяСтрока, "ЧГ=");
	КорневойТип = ТабличныйДокумент.Область("R" + ТекущаяСтрока_Строкой + "C" + КолонкиМакета.Тип).Текст;
	Если ЗначениеЗаполнено(КорневойТип) Тогда
		Вид = ТабличныйДокумент.Область("R" + ТекущаяСтрока_Строкой + "C" + КолонкиМакета.Вид).Текст;
		Режим = ВРег(ТабличныйДокумент.Область("R" + ТекущаяСтрока_Строкой + "C" + КолонкиМакета.Режим).Текст);
		ИмяПеременной = ТабличныйДокумент.Область("R" + ТекущаяСтрока_Строкой + "C" + КолонкиМакета.ИмяПеременной).Текст;
		Если КорневойТип = "Справочник" Тогда
			Если Режим = "ГРУППА" Тогда
				Объект = Справочники[Вид].СоздатьГруппу();
			Иначе
				Объект = Справочники[Вид].СоздатьЭлемент();					
			КонецЕсли;
			НаборМдРеквизитов = НаборРеквизитовМетаданных(КорневойТип, Объект.Метаданные());
			ЗаполнитьРеквизиты(КорневойТип, Объект, ТекущаяСтрока, ТабличныйДокумент, Данные, НаборМдРеквизитов);
			Если Не ЗначениеЗаполнено(Объект.Код) тогда
				Объект.УстановитьНовыйКод();
			КонецЕсли;
			Если Режим <> "ОБЪЕКТ" Тогда
				Попытка
					Объект.Записать();
				Исключение
					Ошибка = ОписаниеОшибки();
					Ошибка = "Ошибка записи элемента справочник."+Вид+", переменная "+ИмяПеременной + Символы.ПС + Ошибка;
					ВызватьИсключение Ошибка;
				КонецПопытки;
			КонецЕсли;			
		ИначеЕсли КорневойТип = "Документ" Тогда
			Объект = Документы[Вид].СоздатьДокумент();
			НаборМдРеквизитов = НаборРеквизитовМетаданных(КорневойТип, Объект.Метаданные());
			ЗаполнитьРеквизиты(КорневойТип, Объект, ТекущаяСтрока, ТабличныйДокумент, Данные, НаборМдРеквизитов);
			Если Не ЗначениеЗаполнено(Объект.Номер) тогда
				Объект.УстановитьНовыйНомер();
			КонецЕсли;
			Если Режим <> "ОБЪЕКТ" Тогда
				РежимЗаписи = РежимЗаписиДокумента.Запись;
				Если Режим = "ПРОВЕДЕНИЕ" Тогда
					РежимЗаписи = РежимЗаписиДокумента.Проведение;
				КонецЕсли;
				Попытка
					Объект.Записать(РежимЗаписи);
				Исключение
					Ошибка = ОписаниеОшибки();
					Ошибка = "Ошибка записи документа "+Вид+", переменная "+ИмяПеременной + Символы.ПС + Ошибка;
					ВызватьИсключение Ошибка;
				КонецПопытки;
			КонецЕсли;
			
		ИначеЕсли КорневойТип = "РегистрСведений" Тогда
			НаборМдРеквизитов = НаборРеквизитовМетаданных(КорневойТип, РегистрыСведений[Вид].СоздатьНаборЗаписей().Метаданные());
			Объект = РегистрыСведений[Вид].СоздатьМенеджерЗаписи();
			ЗаполнитьРеквизиты(КорневойТип, Объект, ТекущаяСтрока, ТабличныйДокумент, Данные, НаборМдРеквизитов);
			Если Режим <> "ОБЪЕКТ" Тогда
				Объект.Записать();
			КонецЕсли;

		ИначеЕсли КорневойТип = "ПользовательИБ" Тогда
			Объект = ПользователиИнформационнойБазы.СоздатьПользователя();
			
			параметрыПользователя = Новый Структура;
			параметрыПользователя.Вставить("Имя", "");
			параметрыПользователя.Вставить("ПолноеИмя", "");
			параметрыПользователя.Вставить("АутентификацияСтандартная", Истина);
			параметрыПользователя.Вставить("АутентификацияОС", Ложь);
			параметрыПользователя.Вставить("ПользовательОС", "");
			параметрыПользователя.Вставить("ОсновнойИнтерфейс", ""); //Метаданные.Интерфейсы.Администратор);
			параметрыПользователя.Вставить("Пароль", "пароль");
			параметрыПользователя.Вставить("ПоказыватьВСпискеВыбора", Истина);
			параметрыПользователя.Вставить("РежимЗапуска", РежимЗапускаКлиентскогоПриложения.Авто);
			параметрыПользователя.Вставить("Язык", Метаданные.Языки.Русский);
			массивРолей = Новый Массив;
			//массивРолей.Добавить(Метаданные.Роли.ПолныеПрава);
			параметрыПользователя.Вставить("Роли", массивРолей);
			
			ЗаполнитьРеквизиты(КорневойТип, параметрыПользователя, ТекущаяСтрока, ТабличныйДокумент, Данные);

			ЗаполнитьЗначенияСвойств(Объект, параметрыПользователя,, "ОсновнойИнтерфейс,РежимЗапуска");
			
			НашлиРежимЗапуска = Ложь;
			Для каждого ЗначениеРежимаЗапуска Из РежимЗапускаКлиентскогоПриложения Цикл
				Если НРег(""+ЗначениеРежимаЗапуска) = НРег(параметрыПользователя.РежимЗапуска) Тогда
					НашлиРежимЗапуска = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НашлиРежимЗапуска Тогда
				Объект.РежимЗапуска = ЗначениеРежимаЗапуска;
			Иначе
				ВызватьИсключение "Не нашли режим запуска <"+параметрыПользователя.РежимЗапуска+">. Возможно, нужно указать с пробелом, например, ""Управляемое приложение""";
			КонецЕсли;

			Если ЗначениеЗаполнено(параметрыПользователя.ОсновнойИнтерфейс) Тогда
				Объект.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(параметрыПользователя.ОсновнойИнтерфейс);
			КонецЕсли;
			Для каждого роль Из параметрыПользователя.Роли Цикл
				объект.Роли.Добавить(роль);
			КонецЦикла;
			Если Режим <> "ОБЪЕКТ" Тогда
				Объект.Записать();
			КонецЕсли;
		Иначе
			ТекущаяСтрока = ТекущаяСтрока + 1;
		КонецЕсли;
	Иначе
		ТекущаяСтрока = ТекущаяСтрока + 1;
	КонецЕсли;
	
	Возврат Объект;
КонецФункции

Процедура ЗаполнитьРеквизиты(ТипОбъекта, Объект, ТекущаяСтрока, ТабличныйДокумент, Данные, НаборМдРеквизитов = Неопределено, ЭтоЗаполнениеРеквизитовТЧ =  Ложь)
	КолонкиМакета = КолонкиМакетаДанных();
	
	ЧитатьРеквизиты = Истина;
	Пока ЧитатьРеквизиты Цикл
		ТекущаяСтрока = ТекущаяСтрока + 1;
		ТекущаяСтрока_Строкой = Формат(ТекущаяСтрока, "ЧГ=");
		ТЧ = ТабличныйДокумент.Область("R" + ТекущаяСтрока_Строкой + "C" + КолонкиМакета.ТЧ).Текст;
		ИмяПеременной = ТабличныйДокумент.Область("R" + ТекущаяСтрока_Строкой + "C" + КолонкиМакета.ИмяПеременной).Текст;
		Если ЗначениеЗаполнено(ТЧ) Или (ЗначениеЗаполнено(ИмяПеременной) И ЭтоЗаполнениеРеквизитовТЧ) Тогда
			Если ЭтоЗаполнениеРеквизитовТЧ Тогда
				// Тут уже начинается новая строка
				ТекущаяСтрока = ТекущаяСтрока - 1;
				ЧитатьРеквизиты = Ложь;
			Иначе
				Если ТипОбъекта = "ПользовательИБ" Тогда
					СтрокаТЧ = Новый Массив;
					объектМетаданныеТабличнаяЧасть = Неопределено;
				Иначе
					СтрокаТЧ = Объект[ТЧ].Добавить();
					объектМетаданныеТабличнаяЧасть = Объект.Метаданные().ТабличныеЧасти[ТЧ];
				КонецЕсли;
				МдРеквизиты = ?(объектМетаданныеТабличнаяЧасть = Неопределено, Неопределено, объектМетаданныеТабличнаяЧасть.Реквизиты);
				ЗаполнитьРеквизиты(ТипОбъекта, СтрокаТЧ, ТекущаяСтрока, ТабличныйДокумент, Данные, МдРеквизиты, Истина);
				
				Если ТипОбъекта = "ПользовательИБ" Тогда
					Если ЗначениеЗаполнено(СтрокаТЧ) Тогда
						Для каждого стрРоль Из СтрокаТЧ Цикл
							лРоль = Метаданные.Роли.Найти(стрРоль);
							Если лРоль <> Неопределено Тогда
								Объект[ТЧ].Добавить(лРоль);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Реквизит = ТабличныйДокумент.Область("R" + ТекущаяСтрока_Строкой + "C" + КолонкиМакета.Реквизит).Текст;
			Если ЗначениеЗаполнено(Реквизит) Тогда
				Значение_Строкой = ТабличныйДокумент.Область("R" + ТекущаяСтрока_Строкой + "C" + КолонкиМакета.Значение).Текст;
				Режим = ВРег(ТабличныйДокумент.Область("R" + ТекущаяСтрока_Строкой + "C" + КолонкиМакета.Режим).Текст);
				//лЗначение = ПолучитьЗначениеРеквизита(Объект, Данные, Реквизит, Значение_Строкой, Режим, НаборМдРеквизитов);
				ДополнительныйТипЗначения = ТабличныйДокумент.Область("R" + ТекущаяСтрока_Строкой + "C" + КолонкиМакета.ДополнительныйТипЗначения).Текст;	// LIK
				лЗначение = ПолучитьЗначениеРеквизита(Объект, Данные, Реквизит, Значение_Строкой, Режим, НаборМдРеквизитов, ДополнительныйТипЗначения);	// LIK

				Если ТипОбъекта = "ПользовательИБ" и ЭтоЗаполнениеРеквизитовТЧ Тогда
					Объект.Добавить(лЗначение);
				ИначеЕсли Режим = "СОЗДАТЬПОГУИД" Тогда
					лМд = Объект.Метаданные();
					Если ТипОбъекта = "Справочник" Тогда
						менеджер = Справочники[лМд.Имя];
					ИначеЕсли ТипОбъекта = "Документ" Тогда
						менеджер = Документы[лМд.Имя];
					иначе
						ВызватьИсключение "СОЗДАТЬПОГУИД - не обрабатываем тип <"+ТипОбъекта+">";
					КонецЕсли;
					лСсылка = менеджер.ПолучитьСсылку(лЗначение);
					существующийОбъект = лСсылка.ПолучитьОбъект();
					Если существующийОбъект = Неопределено Тогда
						Объект.УстановитьСсылкуНового(лСсылка);
					Иначе
						ИсключаемыеСвойства = "Ссылка";
						Если ТипОбъекта = "Справочник" Тогда
							Если Не ЗначениеЗаполнено(лМд.Владельцы) Тогда
								ИсключаемыеСвойства = ИсключаемыеСвойства + ",Владелец" ;
							КонецЕсли;
							Если Не лМд.Иерархический Тогда
								ИсключаемыеСвойства = ИсключаемыеСвойства + ",Родитель" ;
							КонецЕсли;
							Если лМд.ДлинаКода = 0 или Не ЗначениеЗаполнено(Объект.Код) Тогда
								ИсключаемыеСвойства = ИсключаемыеСвойства + ",Код" ;
							КонецЕсли;
						КонецЕсли;
						ЗаполнитьЗначенияСвойств(существующийОбъект, Объект,, ИсключаемыеСвойства);
						для каждого мдТч из лМд.ТабличныеЧасти Цикл
							ЗаполнитьЗначенияСвойств(существующийОбъект[мдТч.Имя], Объект[мдТч.Имя]);
						КонецЦикла;
						Объект = существующийОбъект;
					КонецЕсли;
				Иначе
					Объект[Реквизит] = лЗначение;
				КонецЕсли;
			Иначе
				ЧитатьРеквизиты = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьЗначениеРеквизита(Объект, Данные, Реквизит, Значение_Строкой, Знач Режим, НаборМдРеквизитов, Знач НужныйТипЗначения)
	Режим = ВРег(Режим);
	выдаватьИсключениеДляПустыхЗначений = Ложь;
	Значение = Неопределено;
	Если ПустаяСтрока(Режим) Тогда
		Значение = Значение_Строкой;
	ИначеЕсли Режим = "ПЕРЕМ" Тогда
		Значение = Данные[Значение_Строкой];
		выдаватьИсключениеДляПустыхЗначений = Истина;
	ИначеЕсли Режим = "СОЗДАТЬПОГУИД" Тогда
		Значение = Новый УникальныйИдентификатор(Значение_Строкой);
	Иначе
		Если Режим = "ТЕКУЩАЯДАТА" Тогда
			Значение = ТекущаяДата();
		Иначе
			Попытка
				МетаданныеРеквизита = НаборМдРеквизитов[Реквизит];
				Если ЗначениеЗаполнено(НужныйТипЗначения) Тогда	// LIK
					ТипЗначения = Новый ОписаниеТипов(НужныйТипЗначения);
					МетаданныеТипаРеквизита = ТипЗначения.ПривестиЗначение().Метаданные();
				Иначе
					МетаданныеТипаРеквизита = МетаданныеРеквизита.Тип.ПривестиЗначение().Метаданные();
				КонецЕсли;

				ПолноеИмяТипаРеквизита = МетаданныеТипаРеквизита.ПолноеИмя();
				выдаватьИсключениеДляПустыхЗначений = Истина;
				
				Если Найти(ПолноеИмяТипаРеквизита, "Справочник") > 0 Тогда
					менеджерОбъекта = Справочники[МетаданныеТипаРеквизита.Имя];
				ИначеЕсли Найти(ПолноеИмяТипаРеквизита, "Перечисление") > 0 Тогда
					менеджерОбъекта = Перечисления[МетаданныеТипаРеквизита.Имя];
				ИначеЕсли Найти(ПолноеИмяТипаРеквизита, "ПланСчетов") > 0 Тогда
					менеджерОбъекта = ПланыСчетов[МетаданныеТипаРеквизита.Имя];
				КонецЕсли;
					ПроверитьНеРавенство(менеджерОбъекта, Неопределено, "не найден менеджерОбъекта");
				
				Если Режим = "ПРЕДОПРЕДЕЛЕННЫЙ" Тогда
					Значение = менеджерОбъекта[Значение_Строкой];
				ИначеЕсли Режим = "КОД" Тогда
					Значение = менеджерОбъекта.НайтиПоКоду(Значение_Строкой);
				ИначеЕсли Режим = "НАИМЕНОВАНИЕ" Тогда
					Значение = менеджерОбъекта.НайтиПоНаименованию(Значение_Строкой, Истина);
				ИначеЕсли Режим = "ГУИД" Тогда
					Значение = менеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение_Строкой));
				Иначе
					ВызватьИсключение "НеверныйРежимПоиска: Не поддерживаемый режим поиска. Реквизит <"+Реквизит+">: Искали значение <"+Значение_Строкой+">";
				КонецЕсли;
			Исключение
				ошибка = ОписаниеОшибки();
				Если Найти(ошибка, "НеверныйРежимПоиска") = 0 Тогда
					ошибка = "ОшибкаПоиска: Реквизит <"+Реквизит+">: Искали значение <"+Значение_Строкой+"> " + ошибка;
				КонецЕсли;
				ВызватьИсключение ошибка;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если выдаватьИсключениеДляПустыхЗначений И Не ЗначениеЗаполнено(Значение) Тогда
		ВызватьИсключение "ЗначениеНеНайдено: Реквизит <"+Реквизит+">: Искали значение <"+Значение_Строкой+">, но не нашли!";
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

Функция НаборРеквизитовМетаданных(КорневойТип, МетаданныеОбъекта)
	НаборМдРеквизитов = Новый Структура;
	Если КорневойТип = "Справочник" или КорневойТип = "Документ" Тогда
		ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МетаданныеОбъекта.СтандартныеРеквизиты, НаборМдРеквизитов);
		ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МетаданныеОбъекта.Реквизиты, НаборМдРеквизитов);
		
	ИначеЕсли КорневойТип = "РегистрСведений" Тогда
		ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МетаданныеОбъекта.СтандартныеРеквизиты, НаборМдРеквизитов);
		ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МетаданныеОбъекта.Измерения, НаборМдРеквизитов);
		ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МетаданныеОбъекта.Ресурсы, НаборМдРеквизитов);
		ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МетаданныеОбъекта.Реквизиты, НаборМдРеквизитов);

	Иначе
		ВызватьИсключение "Необрабатываемый корневой тип <"+КорневойТип+">";
	КонецЕсли;
	Возврат НаборМдРеквизитов;
КонецФункции

Процедура ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МдРеквизиты, НаборМдРеквизитов)
	Для каждого МдРеквизит Из МдРеквизиты Цикл
		НаборМдРеквизитов.Вставить(МдРеквизит.Имя, МдРеквизит);
	КонецЦикла;
КонецПроцедуры

// }

//{ Методы проверки таблиц метаданных
Функция ПолучитьКоличествоДокументовПоОтбору(видДокумента, Дата1, дата2, структураОтбора = Неопределено) Экспорт
		ПроверитьЗаполненность(видДокумента, "видДокумента");
		ПроверитьЗаполненность(Дата1, "Дата1");
		ПроверитьЗаполненность(Дата2, "Дата2");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доки.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	Документ."+видДокумента+" КАК Доки
	|ГДЕ
	|	Доки.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	//|	И НЕ Доки.ПометкаУдаления
	//|	И ВЫБОР КОГДА &ТолькоПроведенные ТОГДА Доки.Проведен ИНАЧЕ ИСТИНА КОНЕЦ 
	|";
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", КонецДня(Дата2));
	//Запрос.УстановитьПараметр("ТолькоПроведенные", ТолькоПроведенные);
	
	Если ЗначениеЗаполнено(структураОтбора) Тогда
		Для каждого ключЗначение Из структураОтбора Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Доки."+имяРеквизита+" = &"+имяРеквизита+" ";
			//Запрос.Текст = Запрос.Текст + " И ВЫБОР КОГДА НЕ &"+имяРеквизита+" ЕСТЬ NULL ТОГДА Доки."+имяРеквизита+" = &"+имяРеквизита+" ИНАЧЕ ИСТИНА КОНЕЦ ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.КоличествоДокументов;
КонецФункции

Функция ПолучитьКоличествоЭлементовСправочникаПоОтбору(видСправочника, структураОтбора = Неопределено) Экспорт
		ПроверитьЗаполненность(видСправочника, "видСправочника");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Спр.Ссылка) КАК КоличествоЭлементов
	|ИЗ
	|	Справочник."+видСправочника+" КАК Спр
	|ГДЕ
	|	Истина
	//|	НЕ Спр.ПометкаУдаления
	//|	И ВЫБОР КОГДА &ТолькоПроведенные ТОГДА Доки.Проведен ИНАЧЕ ИСТИНА КОНЕЦ 
	|";
	//Запрос.УстановитьПараметр("ТолькоПроведенные", ТолькоПроведенные);
	
	Если ЗначениеЗаполнено(структураОтбора) Тогда
		Для каждого ключЗначение Из структураОтбора Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Спр."+имяРеквизита+" = &"+имяРеквизита+" ";
			//Запрос.Текст = Запрос.Текст + " И ВЫБОР КОГДА НЕ &"+имяРеквизита+" ЕСТЬ NULL ТОГДА Доки."+имяРеквизита+" = &"+имяРеквизита+" ИНАЧЕ ИСТИНА КОНЕЦ ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.КоличествоЭлементов;
КонецФункции

Функция ПолучитьКоличествоСтрокВДокументахПоОтбору(видДокумента, имяТабличнойЧасти, Дата1, дата2, структураОтбораШапки = Неопределено, структураОтбораТабличнойЧасти = Неопределено) Экспорт
		ПроверитьЗаполненность(видДокумента, "видДокумента");
		ПроверитьЗаполненность(Дата1, "Дата1");
		ПроверитьЗаполненность(Дата2, "Дата2");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Доки.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	Документ."+видДокумента+"."+имяТабличнойЧасти+" КАК Доки
	|ГДЕ
	|	Доки.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	//|	И НЕ Доки.Ссылка.ПометкаУдаления
	|";
	//|	ВЫБОР КОГДА &ТолькоПроведенные ТОГДА Доки.Ссылка.Проведен ИНАЧЕ ИСТИНА КОНЕЦ ";
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", КонецДня(Дата2));
	//Запрос.УстановитьПараметр("ТолькоПроведенные", ТолькоПроведенные);
	
	Если ЗначениеЗаполнено(структураОтбораШапки) Тогда
		Для каждого ключЗначение Из структураОтбораШапки Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Доки.Ссылка."+имяРеквизита+" = &"+имяРеквизита+" ";
			//Запрос.Текст = Запрос.Текст + " И ВЫБОР КОГДА НЕ &"+имяРеквизита+" ЕСТЬ NULL ТОГДА Доки."+имяРеквизита+" = &"+имяРеквизита+" ИНАЧЕ ИСТИНА КОНЕЦ ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	Если ЗначениеЗаполнено(структураОтбораТабличнойЧасти) Тогда
		Для каждого ключЗначение Из структураОтбораТабличнойЧасти Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Доки."+имяРеквизита+" = &"+имяРеквизита+" ";
			//Запрос.Текст = Запрос.Текст + " И ВЫБОР КОГДА НЕ &"+имяРеквизита+" ЕСТЬ NULL ТОГДА Доки."+имяРеквизита+" = &"+имяРеквизита+" ИНАЧЕ ИСТИНА КОНЕЦ ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.КоличествоДокументов;
КонецФункции

Функция ПолучитьИтоговуюСуммуТабличнойЧастиДокументовПоОтбору(видДокумента, имяТабличнойЧасти, имяРеквизита, Дата1, дата2, структураОтбораШапки = Неопределено, структураОтбораТабличнойЧасти = Неопределено) Экспорт
		ПроверитьЗаполненность(видДокумента, "видДокумента");
		ПроверитьЗаполненность(Дата1, "Дата1");
		ПроверитьЗаполненность(Дата2, "Дата2");
	Запрос = Новый Запрос;
	текстТабличнаяЧасть = ?(НЕ ЗначениеЗаполнено(имяТабличнойЧасти), "", "."+имяТабличнойЧасти);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Доки."+имяРеквизита+"), 0) КАК Сумма
	|ИЗ
	//|	Документ."+видДокумента+"."+имяТабличнойЧасти+" КАК Доки
	|	Документ."+видДокумента+текстТабличнаяЧасть+" КАК Доки
	|ГДЕ
	|	Доки.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	//|	И НЕ Доки.Ссылка.ПометкаУдаления
	|";
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", КонецДня(Дата2));
	
	Если ЗначениеЗаполнено(структураОтбораШапки) Тогда
		Для каждого ключЗначение Из структураОтбораШапки Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Доки.Ссылка."+имяРеквизита+" = &"+имяРеквизита+" ";
			//Запрос.Текст = Запрос.Текст + " И ВЫБОР КОГДА НЕ &"+имяРеквизита+" ЕСТЬ NULL ТОГДА Доки."+имяРеквизита+" = &"+имяРеквизита+" ИНАЧЕ ИСТИНА КОНЕЦ ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
		ПроверитьИстину(НЕ (имяТабличнойЧасти = "" И ЗначениеЗаполнено(структураОтбораТабличнойЧасти)), "табличная часть не должна быть указана");
	Если ЗначениеЗаполнено(структураОтбораТабличнойЧасти) Тогда
		Для каждого ключЗначение Из структураОтбораТабличнойЧасти Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Доки."+имяРеквизита+" = &"+имяРеквизита+" ";
			//Запрос.Текст = Запрос.Текст + " И ВЫБОР КОГДА НЕ &"+имяРеквизита+" ЕСТЬ NULL ТОГДА Доки."+имяРеквизита+" = &"+имяРеквизита+" ИНАЧЕ ИСТИНА КОНЕЦ ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.Сумма;
КонецФункции

Функция ПолучитьИтоговуюСуммуДокументовПоОтбору(видДокумента, имяРеквизита, Дата1, дата2, структураОтбораШапки = Неопределено, структураОтбораТабличнойЧасти = Неопределено) Экспорт
	Возврат ПолучитьИтоговуюСуммуТабличнойЧастиДокументовПоОтбору(видДокумента, "", имяРеквизита, Дата1, дата2, структураОтбораШапки, структураОтбораТабличнойЧасти);
КонецФункции

Функция ПолучитьКоличествоЭлементовМетаданногоПоОтбору(типМетаданного, видМетаданного, структураОтбора = Неопределено) Экспорт
		ПроверитьЗаполненность(типМетаданного, "типМетаданного");
		ПроверитьЗаполненность(видМетаданного, "видМетаданного");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Таб.Ссылка) КАК КоличествоЭлементов
	|ИЗ
	|	"+типМетаданного+"."+видМетаданного+" КАК Таб
	|ГДЕ
	|	Истина
	//|	НЕ Таб.ПометкаУдаления
	//|	И ВЫБОР КОГДА &ТолькоПроведенные ТОГДА Доки.Проведен ИНАЧЕ ИСТИНА КОНЕЦ 
	|";
	//Запрос.УстановитьПараметр("ТолькоПроведенные", ТолькоПроведенные);
	
	Если ЗначениеЗаполнено(структураОтбора) Тогда
		Для каждого ключЗначение Из структураОтбора Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Таб."+имяРеквизита+" = &"+имяРеквизита+" ";
			//Запрос.Текст = Запрос.Текст + " И ВЫБОР КОГДА НЕ &"+имяРеквизита+" ЕСТЬ NULL ТОГДА Доки."+имяРеквизита+" = &"+имяРеквизита+" ИНАЧЕ ИСТИНА КОНЕЦ ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.КоличествоЭлементов;
КонецФункции

Функция ПолучитьКоличествоБизнесПроцессовПоОтбору(видМетаданного, структураОтбора = Неопределено) Экспорт
	Возврат ПолучитьКоличествоЭлементовМетаданногоПоОтбору("БизнесПроцесс", видМетаданного, структураОтбора);
КонецФункции

Функция ПолучитьКоличествоЗадачПоОтбору(видМетаданного, структураОтбора = Неопределено) Экспорт
	Возврат ПолучитьКоличествоЭлементовМетаданногоПоОтбору("Задача", видМетаданного, структураОтбора);
КонецФункции

Функция ПолучитьКоличествоЭлементовРегистраПоОтбору(типМетаданного, видМетаданного, структураОтбора = Неопределено) Экспорт
		ПроверитьЗаполненность(типМетаданного, "типМетаданного");
		ПроверитьЗаполненность(видМетаданного, "видМетаданного");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоЭлементов
	|ИЗ
	|	"+типМетаданного+"."+видМетаданного+" КАК Таб
	|ГДЕ
	|	Истина
	//|	НЕ Таб.ПометкаУдаления
	//|	И ВЫБОР КОГДА &ТолькоПроведенные ТОГДА Доки.Проведен ИНАЧЕ ИСТИНА КОНЕЦ 
	|";
	//Запрос.УстановитьПараметр("ТолькоПроведенные", ТолькоПроведенные);
	
	Если ЗначениеЗаполнено(структураОтбора) Тогда
		Для каждого ключЗначение Из структураОтбора Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Таб."+имяРеквизита+" = &"+имяРеквизита+" ";
			//Запрос.Текст = Запрос.Текст + " И ВЫБОР КОГДА НЕ &"+имяРеквизита+" ЕСТЬ NULL ТОГДА Доки."+имяРеквизита+" = &"+имяРеквизита+" ИНАЧЕ ИСТИНА КОНЕЦ ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.КоличествоЭлементов;
КонецФункции

//}

////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ДЛЯ ВЫПОЛНЕНИЯ ТЕСТОВ

// Выполняет отдельный тест.
// 
Функция ВыполнитьТест(СтрокаДереваТестов, СписокОшибокРез) Экспорт
	Перем Тест; // специально локальная переменная для исключения циклических ссылок
	
	Тест = Неопределено;
	
	мСписокОшибок = СписокОшибокРез;
	
	ИмяТестовогоСлучая	= СтрокаДереваТестов.ИмяТестовогоСлучая; //Имя;
	
	ТекущаяДата = ТекущаяДата();
	ПолныйПуть = СтрокаДереваТестов.ПолныйПуть;
	Попытка
		Если СтрокаДереваТестов.ЭтоВнутренняяОбработка Тогда
			Тест = СоздатьОбъектОбработкиКонфигурации(ПолныйПуть);
		Иначе
			Тест = СоздатьОбъектВнешнейОбработкиОтключаяБезопасныйРежим(ПолныйПуть); //ВнешниеОбработки.Создать(СтрокаДереваТестов.ПолныйПуть, Ложь);	// безопасный режим выключен
		КонецЕсли;
		массивТестов = ПолучитьТестовыеСлучаи(Тест, ПолныйПуть); // возможно, что тест сохранит у себя ссылку на браузер
		ПроверитьЗаполненность(массивТестов, "Не удалось получить тестовые случаи");
	Исключение
		
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ;
		СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(ИмяТестовогоСлучая, текстОшибки, СтрокаДереваТестов, ОписаниеОшибки(), ИнформацияОбОшибке());
		
		Тест = Неопределено; // обязательно удаляем, для исключения циклических ссылок
		
		Возврат СостояниеВыполнения;
	КонецПопытки;
	
	СостояниеВыполнения = мЗначенияСостоянияТестов.НеВыполнялся;
	
	параметрыТеста = СтрокаДереваТестов.ПараметрыТеста;
	естьПараметры = СтрокаДереваТестов.ЕстьПараметрыТеста;
	
	естьТранзакция = Ложь;
	Если естьПараметры Тогда
		лПараметрыТеста = ?(ТипЗнч(параметрыТеста) = Тип("Структура"), параметрыТеста, параметрыТеста[0].Значение);
		Если лПараметрыТеста.Свойство("Транзакция", естьТранзакция) Тогда
			естьТранзакция = ТипЗнч(естьТранзакция) = Тип("Булево") и естьТранзакция;
		Иначе
			естьТранзакция = Ложь;
		КонецЕсли;

				//естьТранзакция = ?(ТипЗнч(параметрыТеста) = Тип("Структура"), параметрыТеста, параметрыТеста[0].Значение).Свойство("Транзакция", естьТранзакция) 
				//	или ТипЗнч(естьТранзакция) = Тип("Булево") и естьТранзакция;
		Если естьТранзакция Тогда
			НачатьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
		//TODO Если первый раз запуск setup оказался неуспешным, то при повторном прогоне без перезагрузки
		// не выполнять, также не выполнять для следующих тестовых случаев.
	лСостояниеВыполнения = ВыполнитьПроцедуруТестовогоСлучая(Тест, "ПередЗапускомТеста", ИмяТестовогоСлучая, СтрокаДереваТестов);
	Если лСостояниеВыполнения <> Неопределено Тогда
		СостояниеВыполнения = лСостояниеВыполнения;
	КонецЕсли;
	Если СостояниеВыполнения = мЗначенияСостоянияТестов.Сломался Тогда
		Возврат мЗначенияСостоянияТестов.Сломался;
	КонецЕсли;
		
	переданПараметрТеста = Ложь;
	параметрТеста = "";
	
	Если естьПараметры Тогда
		лПараметрыТеста = ?(ТипЗнч(параметрыТеста) = Тип("Структура"), параметрыТеста, параметрыТеста[0].Значение);
		переданПараметрТеста = лПараметрыТеста.Свойство("Параметр", параметрТеста);
		
		Если переданПараметрТеста Тогда
			строкаПараметров = "параметрТеста";	
		КонецЕсли;
	КонецЕсли;
	
	ОповеститьОСобытии("TestStart", СтрокаДереваТестов);

	Попытка
		
		Выполнить("Тест." + ИмяТестовогоСлучая + "(" + строкаПараметров + ");");
		
		СостояниеВыполнения = мЗначенияСостоянияТестов.Прошел;
		
		ОповеститьОСобытии("TestPassed", СтрокаДереваТестов);
		
	Исключение
				
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ; //Ошибка.Описание + ". " + Ошибка.Причина.Описание + ". Номер строки: " + Ошибка.НомерСтроки;
		
		Если ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, ИмяТестовогоСлучая) Тогда
				//Если Найти(текстОшибки, "Метод объекта не обнаружен ("+ИмяТестовогоСлучая+")") > 0 Тогда
			СостояниеВыполнения = мЗначенияСостоянияТестов.НеРеализован;
			
			ОповеститьОСобытии("TestNotImplemented", СтрокаДереваТестов);
					
		Иначе
			
			СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(ИмяТестовогоСлучая, текстОшибки, СтрокаДереваТестов, ОписаниеОшибки(), ИнформацияОбОшибке());

		КонецЕсли;
				
	КонецПопытки;	
	
	лСостояниеВыполнения = ВыполнитьПроцедуруТестовогоСлучая(Тест, "ПослеЗапускаТеста", ИмяТестовогоСлучая, СтрокаДереваТестов);
	Если лСостояниеВыполнения <> Неопределено Тогда
		СостояниеВыполнения = ЗапомнитьСамоеХудшееСостояние(СостояниеВыполнения, лСостояниеВыполнения); //СостояниеВыполнения = лСостояниеВыполнения;
	КонецЕсли;
	
	Если естьТранзакция Тогда
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДереваТестов.ВремяВыполнения = Число(ТекущаяДата()-ТекущаяДата);
	Тест = Неопределено; // для исключения циклических ссылок
		
	Возврат СостояниеВыполнения;
	
КонецФункции

Функция ВыполнитьПроцедуруТестовогоСлучая(Тест, ИмяПроцедуры, ИмяТестовогоСлучая, СтрокаДереваТестов)
	СостояниеВыполнения = Неопределено;
	
	Попытка
		Выполнить("Тест." + ИмяПроцедуры + "();");
	Исключение
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ;
		
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, ИмяПроцедуры) Тогда
				//Если Найти(текстОшибки, "Метод объекта не обнаружен (" + ИмяПроцедуры + ")") = 0 Тогда
			СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(ИмяТестовогоСлучая, текстОшибки, СтрокаДереваТестов, ОписаниеОшибки(), ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;

	Возврат СостояниеВыполнения;

КонецФункции

Функция ВывестиОшибкуВыполненияТеста(ИмяТестовогоСлучая, текстОшибки, СтрокаДереваТестов, СообщениеОбОшибке, ИнфоОшибки)

	СостояниеВыполнения = мЗначенияСостоянияТестов.Сломался;
	
	СтруктураОшибки = Новый Структура();
	
    Если ТипЗнч(СтрокаДереваТестов) = Тип("СтрокаДереваЗначений") ИЛИ ТипЗнч(СтрокаДереваТестов) = Тип("ДеревоЗначений") Тогда
        СтруктураОшибки.Вставить("ИмяТестовогоНабора", СтрокаДереваТестов.Родитель.Имя);
    ИначеЕсли ТипЗнч(СтрокаДереваТестов) = Тип("ДанныеФормыЭлементДерева") ИЛИ ТипЗнч(СтрокаДереваТестов) = Тип("ДанныеФормыДерево") Тогда
        СтруктураОшибки.Вставить("ИмяТестовогоНабора", СтрокаДереваТестов.ПолучитьРодителя().Имя);
    КонецЕсли;
	
		//стИнфоОшибки = Новый Структура("ИмяМодуля,ИсходнаяСтрока,НомерСтроки,Описание,Причина");
		//ЗаполнитьЗначенияСвойств(стИнфоОшибки, ИнфоОшибки);
	
	стИнфоОшибки = Новый Структура("ИмяМодуля,ИсходнаяСтрока,НомерСтроки,Описание"); //,Причина");
	ЗаполнитьЗначенияСвойств(стИнфоОшибки, ИнфоОшибки);
	//стИнфоОшибки.Вставить("Причина",  Новый Структура("ИмяМодуля,ИсходнаяСтрока,НомерСтроки,Описание"));
	стИнфоОшибки.Вставить("Причина",  Неопределено);
	
	стИнфоОшибкиЦикл = стИнфоОшибки;
	ИнфоОшибки = ИнфоОшибки.Причина;
	Пока ИнфоОшибки <> Неопределено Цикл  // Артур TODO
		стИнфоОшибкиЦикл.Причина = Новый Структура("ИмяМодуля,ИсходнаяСтрока,НомерСтроки,Описание");//,Причина");
		стИнфоОшибкиЦикл = стИнфоОшибкиЦикл.Причина;
		ЗаполнитьЗначенияСвойств(стИнфоОшибкиЦикл, ИнфоОшибки);
		стИнфоОшибкиЦикл.Вставить("Причина",  Неопределено);
		//стИнфоОшибкиЦикл.Вставить("Причина",  Новый Структура("ИмяМодуля,ИсходнаяСтрока,НомерСтроки,Описание"));

		//стИнфоОшибкиЦикл = стИнфоОшибкиЦикл.Причина;
		ИнфоОшибки = ИнфоОшибки.Причина;
	КонецЦикла;
	
	СтруктураОшибки.Вставить("ИмяТестовогоСлучая", ?(СтрокаДереваТестов.Имя <> ИмяТестовогоСлучая, СтрокаДереваТестов.Имя, ИмяТестовогоСлучая));
	СтруктураОшибки.Вставить("Описание",              текстОшибки);
	СтруктураОшибки.Вставить("СообщениеОбОшибке",     СообщениеОбОшибке);
	СтруктураОшибки.Вставить("ИнфоОшибки",            стИнфоОшибки);
	СтруктураОшибки.Вставить("ЕстьПараметрыТеста",    СтрокаДереваТестов.ЕстьПараметрыТеста);
	СтруктураОшибки.Вставить("ПараметрыТеста",        СтрокаДереваТестов.ПараметрыТеста);
	СтруктураОшибки.Вставить("ПолныйПуть",            СтрокаДереваТестов.ПолныйПуть);
	СтруктураОшибки.Вставить("УИДСтрокиДерева",       СтрокаДереваТестов._guid);
	
	ВывестиОшибку(СтруктураОшибки);
	
		    //#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
	мСписокОшибок.Добавить(СтруктураОшибки);
			//#Иначе
			//#КонецЕсли
	
	Попытка
		ОповеститьОСобытии("TestFailed", СтрокаДереваТестов);
	Исключение
	КонецПопытки;

	Возврат СостояниеВыполнения;

КонецФункции

// Выполняет рекурсивно все тесты строки дерева тестов для
// строк, являющихся группами (обработками или каталогами).
// 
Функция _ВыполнитьТесты(СтрокиДереваТестов) //Экспорт
	
	СостояниеРезультат = мЗначенияСостоянияТестов.НеВыполнялся;
	
	Для каждого СтрокаДереваТестов из СтрокиДереваТестов Цикл
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли 
		
		Если СтрокаДереваТестов.ТипСтроки = мЗначенияТиповСтроки.ТестовыйМетод Тогда
			
			мВсегоТестов = мВсегоТестов + 1;
			НовоеСостояние = ВыполнитьТест(СтрокаДереваТестов, мСписокОшибок);
			
		Иначе
			
			НовоеСостояние = _ВыполнитьТесты(СтрокаДереваТестов.Строки);
			
		КонецЕсли;
		
		СтрокаДереваТестов.Состояние = НовоеСостояние;
		
		ЗапомнитьСамоеХудшееСостояние(СостояниеРезультат, НовоеСостояние);
		
	КонецЦикла;
	
	Возврат СостояниеРезультат;
	
КонецФункции

// Выполняет рекурсивно все тесты строки дерева тестов для
// строк, являющихся группами (обработками или каталогами).
// 
Функция ВыполнитьТесты(СтрокиДереваТестов) Экспорт
	ПередВыполнениемТестов();
	
	датаНачалаТестирования = ТекущаяДата();
	
	результат = _ВыполнитьТесты(СтрокиДереваТестов);
	
	ВывестиОтчетТестирования(датаНачалаТестирования, "xml");
		//ВывестиОтчетТестирования(мСписокОшибок, мВсегоТестов, датаНачалаТестирования);
	
	Возврат результат;
КонецФункции

Процедура ПередВыполнениемТестов() Экспорт
	мСписокОшибок = Новый СписокЗначений;
	мВсегоТестов = 0;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ЗАГРУЗКИ ТЕСТОВ

Функция ЗагрузитьТестыКонфигурации(Путь) Экспорт
	Если ЗначениеЗаполнено(Путь) Тогда
		мКоличествоТестовыхСлучаев = 0;
		ОбъектМетаданных = ПолучитьОбъектМетаданныхПоПути(Путь);
		Если Лев(ОбъектМетаданных.ПолноеИмя(),11) = "Подсистема." Тогда
			ЗагрузитьТестыПодсистемы(ДеревоТестов,ОбъектМетаданных);
			ОчиститьДерево(ДеревоТестов);
		Иначе
			ЗагрузитьТестовыйСлучай(ДеревоТестов,ОбъектМетаданных);
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Загружает тесты в дерево тестов из подсистемы конфигурации.
//
Функция ЗагрузитьТестыПодсистемы(СтрокаДерева,Подсистема) Экспорт
	
	СтрокаТеста = ДобавитьСтрокуДереваТестов(СтрокаДерева, Подсистема.Имя, Подсистема.Имя, Подсистема.ПолноеИмя(), 
			Истина, мЗначенияТиповСтроки.Подсистема, Неопределено);
	
	Для каждого ПодчиненнаяПодсистема из Подсистема.Подсистемы цикл
		ЗагрузитьТестыПодсистемы(СтрокаТеста,ПодчиненнаяПодсистема);
	КонецЦикла;	
	
	Для каждого Обработка из Подсистема.Состав цикл
		ЗагрузитьТестовыйСлучай(СтрокаТеста,Обработка);
	КонецЦикла;
	
КонецФункции

// Загружает тестовый случай (обработку) 
//
Функция ЗагрузитьТестовыйСлучай(СтрокаДерева,Обработка);
	ДанныеОбработки = новый Структура("ПолноеИмя,ИмяБезРасширения");
	//Если Лев(Обработка.Имя,5) = "Тест_" Тогда
		ДанныеОбработки.ПолноеИмя = Обработка.Имя;
		ДанныеОбработки.ИмяБезРасширения = Обработка.Имя;
		ДобавитьТест(СтрокаДерева,ДанныеОбработки,,,,Истина);
	//КонецЕсли;
КонецФункции

// Устанавливает всем родителям по иерархии признак наличия тестов в иерархии
//
Процедура ПометитьРодителя(ТекСтрока) Экспорт
	Если ТипЗнч(ТекСтрока) = Тип("ДанныеФормыЭлементДерева") Тогда
		СтрокаРодитель = ТекСтрока.ПолучитьРодителя();
	Иначе
		СтрокаРодитель = ТекСтрока.Родитель;		
	КонецЕсли;

	Если СтрокаРодитель <> неопределено Тогда
		СтрокаРодитель.ИмеетТесты = Истина;
		ПометитьРодителя(СтрокаРодитель);
	КонецЕсли;
КонецПроцедуры

// Убирает из дерева все строки, в иерархии которых нет тестов
//
Процедура ОчиститьДерево(СтрокаДерева) Экспорт
	сч = СтрокаДерева.Строки.Количество()-1;
	Пока сч>=0 цикл
		Строка = СтрокаДерева.Строки[сч];
		Если Не Строка.ИмеетТесты Тогда
			СтрокаДерева.Строки.удалить(сч);
		Иначе
			ОчиститьДерево(Строка);
		КонецЕсли;
		сч = сч - 1;
	КонецЦикла;
КонецПроцедуры

// Загружает тесты в дерево тестов из каталога.
// 
Функция ЗагрузитьВсеТесты(ПутьККаталогу) Экспорт
	
	мКоличествоТестовыхСлучаев = 0;
	
	ДеревоТестов.Строки.Очистить();
	
	ОбъектФайл = Новый Файл(ПутьККаталогу);
	Если ОбъектФайл.Существует() Тогда
		
		Возврат ЗагрузитьТесты(ДеревоТестов, ОбъектФайл);
		
	КонецЕсли;	
	
	ВывестиОшибку(НСтр("en = 'File or directory does not exist ""'; ru = 'Файл или каталог не существует ""'") +
                           ОбъектФайл.ПолноеИмя + """");
	Возврат Ложь;	
КонецФункции

// Выполняет рекурсивную загрузку тестов и тестовых случаев
// из обработки или каталога с обработками для тестирования.
// 
Функция ЗагрузитьТесты(РодительскаяСтрока, ОбъектФайл)
	
	Если ОбъектФайл.ЭтоКаталог() Тогда
			
		СтрокаКаталога = ДобавитьСтрокуДереваТестов(РодительскаяСтрока, ОбъектФайл.Имя, ОбъектФайл.Имя, ОбъектФайл.ПолноеИмя, 
			Ложь, мЗначенияТиповСтроки.КаталогТестов, Неопределено);
		
		НайденныеФайлы = НайтиФайлы(ОбъектФайл.ПолноеИмя, "*", Ложь);
		Для каждого Файл из НайденныеФайлы Цикл
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли 
			
			Если Файл.ЭтоКаталог() Тогда
				
				ЗагрузитьТесты(СтрокаКаталога, Файл);
				 
			ИначеЕсли НРег(Файл.Расширение) = ".epf" Тогда //И НРег(Лев(Файл.Имя, 4)) = "тест" Тогда
				
				ДобавитьТест(СтрокаКаталога, Файл);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаКаталога.Строки.Количество() = 0 Тогда
			РодительскаяСтрока.Строки.Удалить(СтрокаКаталога);
		КонецЕсли;
		
	Иначе
		
		Если РодительскаяСтрока = ДеревоТестов ИЛИ РодительскаяСтрока.ТипСтроки = мЗначенияТиповСтроки.КаталогТестов Тогда
			ДобавитьТест(РодительскаяСтрока, ОбъектФайл);		
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции

// Добавляет тестовую обработку (тест) в дерево тестов.
// 
Процедура ДобавитьТест(РодительскаяСтрока, ФайлТеста, ТестовыйСлучайОбъектМетаданныхИмя = Неопределено, ДобавлятьСтрокуТестОбъект = Истина, НуженСписокЗначений = Ложь, 
		ЭтоВнутренняяОбработка = Ложь) Экспорт
		
	Перем ТестОбъект; // специально локальная переменная для исключения циклических ссылок
	
	ТестОбъект = Неопределено;
	
	ПолноеИмяТестовогоСлучая = ФайлТеста.ПолноеИмя;
	Попытка
		Если ЭтоВнутренняяОбработка Тогда
			ТестОбъект = СоздатьОбъектОбработкиКонфигурации(ФайлТеста.ИмяБезРасширения); //Обработки[ИмяОбработки].Создать();
        ИначеЕсли ТестовыйСлучайОбъектМетаданныхИмя = Неопределено Тогда
            ТестОбъект = СоздатьОбъектВнешнейОбработкиОтключаяБезопасныйРежим(ПолноеИмяТестовогоСлучая); //ВнешниеОбработки.Создать(ПолноеИмяТестовогоСлучая, Ложь);	// безопасный режим выключен
        Иначе
            ТестОбъект = СоздатьОбъектВнешнейОбработкиОтключаяБезопасныйРежим(ТестовыйСлучайОбъектМетаданныхИмя); //ВнешниеОбработки.Создать(ТестовыйСлучайОбъектМетаданныхИмя, Ложь);	// безопасный режим выключен
        КонецЕсли;
	Исключение
		ВывестиОшибку("Тест не загружен: " + ПолноеИмяТестовогоСлучая + "
		|	Ошибка: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	МассивТестовыхСлучаев = ПолучитьТестовыеСлучаи(ТестОбъект, ПолноеИмяТестовогоСлучая);
	
	Если МассивТестовыхСлучаев <> Неопределено Тогда
		Если ДобавлятьСтрокуТестОбъект Тогда
			СтрокаТеста = ДобавитьСтрокуДереваТестов(РодительскаяСтрока, ФайлТеста.ИмяБезРасширения, ФайлТеста.ИмяБезРасширения, ПолноеИмяТестовогоСлучая, 
			ЭтоВнутренняяОбработка, мЗначенияТиповСтроки.ТестовыйСлучай, Неопределено,,, НуженСписокЗначений);
		Иначе
			СтрокаТеста = РодительскаяСтрока;
		КонецЕсли;
		
		Для каждого ТестовыйСлучай из МассивТестовыхСлучаев Цикл
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли 
			
			Если ТипЗнч(ТестовыйСлучай) = Тип("Строка") Тогда
				имяТестовогоСлучая = ТестовыйСлучай;
				параметрыТеста = Неопределено;
				ПредставлениеТеста = имяТестовогоСлучая;
            Иначе
                имяТестовогоСлучая = ТестовыйСлучай.ИмяТеста;
                параметрыТеста = ТестовыйСлучай;
				Если НЕ ТестовыйСлучай.Свойство("ПредставлениеТеста", ПредставлениеТеста) или не ЗначениеЗаполнено(ПредставлениеТеста) Тогда
					ПредставлениеТеста = имяТестовогоСлучая;
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьСтрокуДереваТестов(СтрокаТеста, ПредставлениеТеста, имяТестовогоСлучая, ПолноеИмяТестовогоСлучая, ЭтоВнутренняяОбработка,
				мЗначенияТиповСтроки.ТестовыйМетод, параметрыТеста,, мЗначениеМодульИлиФорма.Модуль, НуженСписокЗначений);
			
			мКоличествоТестовыхСлучаев = мКоличествоТестовыхСлучаев + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТестОбъект = Неопределено;
КонецПроцедуры 

// Добавляет в дерево тестов новую строку.
// 
Функция ДобавитьСтрокуДереваТестов(РодительскаяСтрока, ПредставлениеТестовогоСлучая, ИмяТестовогоСлучая, ПутьКФайлу, ЭтоВнутренняяОбработка, ТипСтроки = 0, ПараметрыТеста = Неопределено, Состояние=0, МодульИлиФорма = 0, НуженСписокЗначений = Ложь)

    Если ТипЗнч(РодительскаяСтрока) = Тип("СтрокаДереваЗначений") ИЛИ ТипЗнч(РодительскаяСтрока) = Тип("ДеревоЗначений") Тогда
        НоваяСтрока = РодительскаяСтрока.Строки.Добавить();
    ИначеЕсли ТипЗнч(РодительскаяСтрока) = Тип("ДанныеФормыЭлементДерева") ИЛИ ТипЗнч(РодительскаяСтрока) = Тип("ДанныеФормыДерево") Тогда
        НоваяСтрока = РодительскаяСтрока.ПолучитьЭлементы().Добавить();
    КонецЕсли;
	
	НоваяСтрока.Имя = ПредставлениеТестовогоСлучая;
	НоваяСтрока.ПолныйПуть = ПутьКФайлу;
	//НоваяСтрока.ПредставлениеПути = СтрЗаменить(ПутьКФайлу, НоваяСтрока.ПолучитьРодителя().ПолныйПуть, "...");
	НоваяСтрока.ТипСтроки = ТипСтроки;
	НоваяСтрока.Состояние = Состояние;
	НоваяСтрока._guid = Строка(Новый УникальныйИдентификатор());
    НоваяСтрока.МодульИлиФорма = МодульИлиФорма;
	
	НоваяСтрока.ЕстьПараметрыТеста = Ложь;
	НоваяСтрока.ИмяТестовогоСлучая = ИмяТестовогоСлучая;
	ЗаданоСпециальноеПредставлениеТеста = НоваяСтрока.Имя <> НоваяСтрока.ИмяТестовогоСлучая;
	
	НоваяСтрока.ЭтоВнутренняяОбработка = ЭтоВнутренняяОбработка;
	Если ТипСтроки = мЗначенияТиповСтроки.ТестовыйСлучай Или ТипСтроки = мЗначенияТиповСтроки.ТестовыйМетод Тогда
		НоваяСтрока.ИмеетТесты = Истина;
		ПометитьРодителя(НоваяСтрока);
	Иначе
		НоваяСтрока.ИмеетТесты = Ложь;
	КонецЕсли;
	
    Если НуженСписокЗначений И ПараметрыТеста <> Неопределено Тогда
        СЗ = Новый СписокЗначений();
        СЗ.Добавить(ПараметрыТеста);
        НоваяСтрока.ПараметрыТеста = СЗ;
		НоваяСтрока.ЕстьПараметрыТеста = Истина;
		
		Если Не ЗаданоСпециальноеПредставлениеТеста Тогда
			описаниеПараметра = "<пусто>";
			Если ПараметрыТеста.Свойство("Параметр") Тогда
				описаниеПараметра = "" + ПараметрыТеста.Параметр;
			КонецЕсли;
			
			НоваяСтрока.Имя = НоваяСтрока.Имя + " ( " + описаниеПараметра + " )";
		КонецЕсли;
		
    Иначе
        НоваяСтрока.ПараметрыТеста = ПараметрыТеста;
		Если ПараметрыТеста <> Неопределено Тогда
			НоваяСтрока.ЕстьПараметрыТеста = Истина;
			
			Если Не ЗаданоСпециальноеПредставлениеТеста Тогда
				описаниеПараметра = "<пусто>";
				Если ПараметрыТеста.Свойство("Параметр") Тогда
					описаниеПараметра = "" + ПараметрыТеста.Параметр;
				КонецЕсли;
				
				НоваяСтрока.Имя = НоваяСтрока.Имя + " ( " + описаниеПараметра + " )";
			КонецЕсли;
		КонецЕсли;
		
    КонецЕсли;
	
	ОповеститьОСобытии("TestLoaded", НоваяСтрока);
	
	Возврат НоваяСтрока;
	
КонецФункции

	
// получает мИнформатор. Возвращает Неопределено, если мИнформатор не удалось загрузить
Функция ПолучитьИнформатор() Экспорт
	
#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
	ВызватьИсключение "Информатор пока можно использовать только в толстом клиенте обычного приложения!";
#КонецЕсли
	
	Если мИнформатор = Неопределено И мПытаемсяСоздатьИнформатор Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		используемПлатформу8_3 = Лев(СистемнаяИнформация.ВерсияПриложения, 3) = "8.3";
		Если используемПлатформу8_3 Тогда
			мПытаемсяСоздатьИнформатор = Ложь;
			Возврат Неопределено;
		КонецЕсли;
		
		
		Если НЕ ЭтоВнешняяОбработка() Тогда
			Попытка
				мИнформатор = Обработки.UnitTestInformator.Создать();
			Исключение
				ВывестиОшибку("Класс Информатор не удалось создать <Обработки.UnitTestInformator>");
				
				мИнформатор = Неопределено;
				мПытаемсяСоздатьИнформатор = Ложь;
				Возврат Неопределено;
			КонецПопытки;
		Иначе
			файл = Новый Файл(ЭтотОбъект.ИспользуемоеИмяФайла);
			путьИнформатора = файл.Путь + "Informator.epf";
			файл = Новый Файл(путьИнформатора);
			
			Если НЕ файл.Существует() Тогда
				ВывестиОшибку("Класс Информатор не найден <"+путьИнформатора+">");
				Возврат Неопределено;
			КонецЕсли;
			
			Попытка
				мИнформатор = СоздатьОбъектВнешнейОбработкиОтключаяБезопасныйРежим(путьИнформатора); //ВнешниеОбработки.Создать(путьИнформатора, Ложь);	// безопасный режим выключен
			Исключение
				ВывестиОшибку("Класс Информатор не удалось создать <"+путьИнформатора+">");
				
				мИнформатор = Неопределено;
				мПытаемсяСоздатьИнформатор = Ложь;
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат мИнформатор;
КонецФункции

// Получает с помощью Информатора массив тестовых экспортных методов, начинающихся с Тест
// может вызываться из теста из его метода ПолучитьСписокТестов(ЮнитТестирование)
Функция ДобавитьПростыеТестыИзОбъекта(массивТестов, ТестовыйОбъект) Экспорт
	Если мИнформатор = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ТаблицаМетодов = мИнформатор.ПолучитьТаблицуМетодов(ТестовыйОбъект);

		Для каждого СтрокаТаблицыМетодов из ТаблицаМетодов Цикл
			наименованиеТеста = СтрокаТаблицыМетодов.Наименование;
			Если НРег(Лев(наименованиеТеста, 4)) = "тест" 
				И СтрокаТаблицыМетодов.КоличествоПараметров = 0 Тогда
				
				Если массивТестов.Найти(наименованиеТеста) = Неопределено Тогда
					массивТестов.Добавить(наименованиеТеста);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ВывестиОшибку("Ошибка получения списка тестовых случаев: " + ОписаниеОшибки());		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Возвращает массив тестовых случаев обработки для тестирования.
Функция ПолучитьТестовыеСлучаи(ТестОбъект, ПолноеИмяОбъекта)
	//ПолноеИмяОбъекта = ПолноеИмяОбъекта(ТестОбъект);
    Попытка
        
		#Если ТолстыйКлиентОбычноеПриложение Тогда
					//#Если Клиент Тогда
			получаемСписокТестовИзТестОбъекта = мИнформатор = Неопределено 
				или мИнформатор.МетодСуществует(ТестОбъект, "ПолучитьСписокТестов"); // после вызова Информатора появляются циклические ссылки
				Если НЕ получаемСписокТестовИзТестОбъекта Тогда
					//Если выводитьОшибку Тогда
					//	ВывестиОшибку("Набор тестов не загружен: " + ПолноеИмяОбъекта + "
					//	|	Ошибка получения списка тестовых случаев: " + ОписаниеОшибки());
					//КонецЕсли;
				
				Возврат Неопределено;
			КонецЕсли;
		
        #Иначе
			получаемСписокТестовИзТестОбъекта = Истина;
        #КонецЕсли    
		
		Если получаемСписокТестовИзТестОбъекта Тогда
			МассивТестовыхСлучаев = ТестОбъект.ПолучитьСписокТестов(ЭтотОбъект);
		КонецЕсли;
		
	Исключение
			//Если выводитьОшибку Тогда
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ; //Ошибка.Описание + ". " + Ошибка.Причина.Описание + ". Номер строки: " + Ошибка.НомерСтроки;
		
		// TODO если не использовать переменную ниже, а поставить вызов метода в условие, то будет глюк - внутрь условия не попадаем !
		ЕстьОшибка_МетодОбъектаНеОбнаружен = ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, "ПолучитьСписокТестов");
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен Тогда
		
			ВывестиОшибку("Набор тестов не загружен: " + ПолноеИмяОбъекта + "
			|	Ошибка получения списка тестовых случаев: " + ОписаниеОшибки());
			
			ТестОбъект = Неопределено;
		КонецЕсли;
		
		Возврат Неопределено;			
				
	КонецПопытки;

		Если ТипЗнч(МассивТестовыхСлучаев) <> Тип("Массив") Тогда
			
				//Если выводитьОшибку Тогда
			ВывестиОшибку("Набор тестов не загружен: " + ПолноеИмяОбъекта + "
			|	Ошибка получения списка тестовых случаев: вместо массива имен тестовых случаев получен объект <" + Строка(ТипЗнч(МассивТестовыхСлучаев)) + ">");
				//КонецЕсли;
			ТестОбъект = Неопределено;
			Возврат Неопределено;			
			
		КонецЕсли;
		
		Если НЕ ПроверитьМассивТестовыхСлучаев(МассивТестовыхСлучаев, ТестОбъект) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат МассивТестовыхСлучаев;
		
	//Исключение
	//	Если выводитьОшибку Тогда
	//		ВывестиОшибку("Набор тестов не загружен: " + ПолноеИмяОбъекта + "
	//		|	Ошибка получения списка тестовых случаев: " + ОписаниеОшибки());
	//	КонецЕсли;
	//			
	//КонецПопытки;
	
	Возврат Неопределено;
		
КонецФункции

Функция ПроверитьМассивТестовыхСлучаев(МассивТестовыхСлучаев, ТестОбъект)
	Для каждого данныеТеста из МассивТестовыхСлучаев Цикл
		Если ТипЗнч(данныеТеста) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(данныеТеста) <> Тип("Структура") Тогда
			ВывестиОшибку("Набор тестов не загружен: " + ТестОбъект.ИспользуемоеИмяФайла + "
			|	Ошибка получения структуры описания тестового случая: " + ОписаниеОшибки());
			Возврат Ложь;
		КонецЕсли;
		Если НЕ данныеТеста.Свойство("ИмяТеста") Тогда
			ВывестиОшибку("Набор тестов не загружен: " + ТестОбъект.ИспользуемоеИмяФайла + "
			|	Не задано имя теста в структуре описания тестового случая: " + ОписаниеОшибки());
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

// Возвращает количество подчиненных тестовых случаев для заданной строки дерева тестов.
// 
Функция ПолучитьКоличествоТестовыхСлучаев(СтрокаДереваТестов) Экспорт
	
	Если СтрокаДереваТестов.ТипСтроки = мЗначенияТиповСтроки.ТестовыйМетод Тогда
		Возврат 1;		
	КонецЕсли;	
	
	КоличествоТестовыхСлучаев = 0;
	Для каждого ПодчиненнаяСтрока из СтрокаДереваТестов.Строки Цикл
		КоличествоТестовыхСлучаев = КоличествоТестовыхСлучаев + ПолучитьКоличествоТестовыхСлучаев(ПодчиненнаяСтрока);
	КонецЦикла;
	
	Возврат КоличествоТестовыхСлучаев;
	
КонецФункции

Процедура ЗаполнитьРезультатТестовогоСлучая(ЗаписьXML, СтрокаТестов, КэшОшибок)
	
	#Если _ Тогда
	ЗаписьXML = Новый ЗаписьXML;
	#КонецЕсли
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("testcase");
	ЗаписьXML.ЗаписатьАтрибут("classname", СтрокаТестов.Родитель.ИмяТестовогоСлучая);
	ЗаписьXML.ЗаписатьАтрибут("name", СтрокаТестов.Имя);
	ЗаписьXML.ЗаписатьАтрибут("time", XMLСтрока(СтрокаТестов.ВремяВыполнения));
	
	КлючСоответствия	= СтрокаТестов._guid;
	СтруктураОшибки		= КэшОшибок.Получить(КлючСоответствия);
	
	Если СтруктураОшибки <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("status", "failure");
		ЗаписьXML.ЗаписатьНачалоЭлемента("failure");
		ЗаписьXML.ЗаписатьАтрибут("message", XMLСтрока(СтруктураОшибки.Описание));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("status", "succes");
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаполнитьРезультатТестовИерархически(ЗаписьXML, СтрокаТестов, КэшОшибок) 
	
	#Если _ Тогда
	ЗаписьXML = Новый ЗаписьXML;
	#КонецЕсли

	Если СтрокаТестов.ТипСтроки = мЗначенияТиповСтроки.ТестовыйМетод Тогда
		
		ЗаполнитьРезультатТестовогоСлучая(ЗаписьXML, СтрокаТестов, КэшОшибок);
		Возврат;
		
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("testsuite");	
	ЗаписьXML.ЗаписатьАтрибут("name", СтрокаТестов.Имя);
	//ЗаписьXML.ЗаписатьАтрибут("time", ;
	ЗаписьXML.ЗаписатьНачалоЭлемента("properties");
	
	Если СтрокаТестов.ЕстьПараметрыТеста Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("property");
		ЗаписьXML.ЗаписатьАтрибут("ЕстьПараметрыТеста",XMLСтрока(СтрокаТестов.ЕстьПараметрыТеста));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Для каждого ЭлементСтроки из СтрокаТестов.Строки Цикл 
		
		Если ЭлементСтроки.ТипСтроки = мЗначенияТиповСтроки.ТестовыйМетод Тогда 
			ЗаполнитьРезультатТестовогоСлучая(ЗаписьXML, ЭлементСтроки, КэшОшибок);
			Продолжить;
		Иначе 
			ЗаполнитьРезультатТестовИерархически(ЗаписьXML, ЭлементСтроки, КэшОшибок)
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ВывестиОтчетТестированияВФорматеJunitXML(датаНачалаТестирования) Экспорт 
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	//ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ВсегоТестов = мВсегоТестов;
	СписокОшибок = мСписокОшибок;
	
	КоличествоОшибок = СписокОшибок.Количество();
	
	//#Если Клиент Тогда
	//ОчиститьСообщения();
	//#КонецЕсли
	
	КэшОшибок = Новый Соответствие();
	Для каждого ЭлементСписка из мСписокОшибок Цикл
		КлючСоответствия = ЭлементСписка.Значение["УИДСтрокиДерева"];
		КэшОшибок.Вставить(КлючСоответствия, ЭлементСписка.Значение);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("testsuites");
	ЗаписьXML.ЗаписатьАтрибут("tests", XMLСтрока(ВсегоТестов));
	ЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока("1CUNIT")); //TODO: указывать путь к набору тестов. 
	ЗаписьXML.ЗаписатьАтрибут("time", XMLСтрока(Формат(ТекущаяДата() - датаНачалаТестирования, "ДФ=HH.mm.ss")));
	ЗаписьXML.ЗаписатьАтрибут("failures", XMLСтрока(КоличествоОшибок));
	
	Для каждого ЭлементСтроки из ДеревоТестов.Строки Цикл
		ЗаполнитьРезультатТестовИерархически(ЗаписьXML, ЭлементСтроки, КэшОшибок);
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
	
КонецФункции

// Возвращаем Неопределено, если все тесты прошли
Функция ВывестиОтчетТестирования(датаНачалаТестирования, ТипОтчета =  "mxl") Экспорт
//Процедура ВывестиОтчетТестирования(СписокОшибок, ВсегоТестов, датаНачалаТестирования) Экспорт
	СписокОшибок = мСписокОшибок;
	ВсегоТестов = мВсегоТестов;
	
	Если ТипОтчета = "xml" Тогда
		Текст = ВывестиОтчетТестированияВФорматеJunitXML(датаНачалаТестирования);
		ТабДокумент = Новый ТекстовыйДокумент;
		ТабДокумент.УстановитьТекст(Текст);
		Возврат ТабДокумент;
	КонецЕсли;
	
	КоличествоОшибок = СписокОшибок.Количество();
	Если КоличествоОшибок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//#Если Клиент Тогда
	//ОчиститьСообщения();
	//#КонецЕсли
	
	ПрошлоВремени = ТекущаяДата() - датаНачалаТестирования;
	
	ТабДок = Новый ТабличныйДокумент;
	макет = ПолучитьМакет("ОтчетТестирования");

	Секция = макет.ПолучитьОбласть("Заголовок"); //"R1C1:R6C1");
	Секция.Параметры.ВсегоТестов = ВсегоТестов;
	Секция.Параметры.КоличествоОшибок = КоличествоОшибок;
	Секция.Параметры.ПрошлоВремени = ПрошлоВремени;
	Секция.Параметры.ПрошлоВремениСтрока = формат(Дата(1,1,1) + ПрошлоВремени, "ДЛФ=T");
	Секция.Параметры.ВремяВыполненияОдногоТеста = ?(ВсегоТестов = 0, "", Формат(ПрошлоВремени / ВсегоТестов * 1000, "ЧЦ=15; ЧДЦ=2"));
	ТабДок.Вывести(Секция);

	ТабДок.НачатьАвтогруппировкуСтрок();
	
	Для Каждого Ошибка Из СписокОшибок Цикл
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли 

		ВывестиОшибкуВМакет(ТабДок, макет, Ошибка.Значение);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.Показать("Отчет об автоматическом тестировании, 1CUnit v." + Версия());
	
	Возврат ТабДок;
КонецФункции

Процедура ВывестиОшибкуВМакет(ТабДок, макет, _Ошибка)
	Секция = макет.ПолучитьОбласть("НаименованиеНабора");
	ЗаполнитьЗначенияСвойств(Секция.Параметры, _Ошибка);
	ТабДок.Вывести(Секция, 1);
	
	Секция = макет.ПолучитьОбласть("НаименованиеТеста");
	ЗаполнитьЗначенияСвойств(Секция.Параметры, _Ошибка);
	ТабДок.Вывести(Секция, 2);
	
	Если _Ошибка.ЕстьПараметрыТеста Тогда
		Секция = макет.ПолучитьОбласть("ПараметрыТеста");
		ЗаполнитьЗначенияСвойств(Секция.Параметры, _Ошибка);
			//Секция.Область("R4C1").Текст = "Параметр метода: "+_Ошибка.ПараметрыТеста;
		ТабДок.Вывести(Секция, 2);
	КонецЕсли;
	
	ИнфоОшибки = _Ошибка.ИнфоОшибки;
	Пока ИнфоОшибки <> Неопределено Цикл  // Артур TODO
		Секция = макет.ПолучитьОбласть("R1C1:R4C3");
		Секция.Область("R1C3").Текст = ИнфоОшибки.ИмяМодуля + ", строка № "+ИнфоОшибки.НомерСтроки;
		Секция.Область("R2C3").Текст = ИнфоОшибки.ИсходнаяСтрока;
		//Секция.Область("R3C3").Текст = ИнфоОшибки.НомерСтроки;
		//Секция.Область("R4C3").Текст = ИнфоОшибки.Описание;
		Секция.Область("R3C3").Текст = ИнфоОшибки.Описание;
		
			//Секция.Область("R5C3").Текст = ПодробноеПредставлениеОшибки(ИнфоОшибки); // Артур - лишнее описание ошибки
		
		ТабДок.Вывести(Секция, 3);
		
		ИнфоОшибки = ИнфоОшибки.Причина;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ ОБЩЕГО
// НАЗНАЧЕНИЯ

Функция ВывестиОшибку(Ошибка) Экспорт
	
	ТипОбъектаОшибка = ТипЗнч(Ошибка);
		
	Если ТипОбъектаОшибка = Тип("Структура") Тогда
		
		ВывестиСообщение("[" + Ошибка.ИмяТестовогоНабора + ": " + Ошибка.ИмяТестовогоСлучая + "] " + Ошибка.Описание, СтатусСообщения.Важное);
		//ВывестиСообщение("[" + Ошибка.ИмяТеста + ": " + Ошибка.ИмяТестовогоСлучая + "] " + Ошибка.Описание, СтатусСообщения.Важное);
		
	ИначеЕсли ТипОбъектаОшибка = Тип("ИнформацияОбОшибке") Тогда
		
		ВывестиСообщение(Ошибка.Описание, СтатусСообщения.Важное);
		
	Иначе
		
		ВывестиСообщение(Ошибка, СтатусСообщения.Важное);
		
	КонецЕсли;

КонецФункции

Функция ПредставлениеЗначения(Значение)
	
	Перем ЗначениеСтрокой;
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Булево") Тогда
		ЗначениеСтрокой = Формат(Значение, "БЛ=Ложь; БИ=Истина");
	Иначе
		ЗначениеСтрокой = Строка(Значение);
	КонецЕсли;
	
	Представление = "<" + ЗначениеСтрокой + "> (" + Строка(ТипЗначения) + ")";
	
	Возврат Представление;
	
КонецФункции

Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Символы.ПС + ДопСообщениеОшибки;
КонецФункции

Функция СоздатьОбъектВнешнейОбработкиОтключаяБезопасныйРежим(путьФайла) Экспорт

	Возврат ВнешниеОбработки.Создать(путьФайла, Ложь);

КонецФункции // СоздатьОбъектВнешнейОбработкиОтключаяБезопасныйРежим()

Функция СоздатьОбъектОбработкиКонфигурации(ИмяОбработки)
	Возврат Обработки[ИмяОбработки].Создать();
КонецФункции

// Устанавливает новое текущее состояние выполнения тестов
// в соответствии с приоритетами состояний:
// 		Красное - заменяет все другие состояния
// 		Желтое - заменяет только зеленое состояние
// 		Зеленое - заменяет только серое состояние (тест не выполнялся ни разу).
Функция ЗапомнитьСамоеХудшееСостояние(ТекущееСостояние, НовоеСостояние)
	
	ТекущееСостояние = Макс(ТекущееСостояние, НовоеСостояние);
	Возврат ТекущееСостояние;
	
КонецФункции

// Рекурсивно вверх от текущей строки меняет состояние у родительских строк.
// 
Процедура ИзменитьСостояниеВыполненияРодителей(СтрокаДереваТестов) Экспорт
	
	Если СтрокаДереваТестов.Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРодителя = СтрокаДереваТестов.Родитель;
	ЗапомнитьСамоеХудшееСостояние(СтрокаРодителя.Состояние, СтрокаДереваТестов.Состояние);
	ИзменитьСостояниеВыполненияРодителей(СтрокаРодителя);
	
КонецПроцедуры

// Оповещает внешний мир о каком-либо событии. Используется
// для взаимодействия со скриптом Снегопата, а также с формой браузера 
// когда он запущен в режиме обычного приложения.
// 
Функция ОповеститьОСобытии(ИмяСобытия, Аргумент1=Неопределено)
	Если mMiddleMan <> Неопределено Тогда
		Попытка
			Выполнить("mMiddleMan." + ИмяСобытия + "(Аргумент1);");			
		Исключение
		КонецПопытки;
	КонецЕсли;
	#Если Клиент Тогда 
		Оповестить("1CUnit." + ИмяСобытия, Аргумент1);
	#КонецЕсли
КонецФункции

Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, имяМетода)
	Возврат Найти(текстОшибки, "Метод объекта не обнаружен ("+имяМетода+")") > 0;
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
// Общий модуль СтроковыеФункцииКлиентСервер.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
//&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Возвращает объект метаданных по переданному полному строковому пути
//
Функция ПолучитьОбъектМетаданныхПоПути(ПутьКОбъекту) Экспорт
	//ВыражениеПодсистема = "Метаданные."+СтрЗаменить(Путь, "Подсистема.", "Подсистемы.");
	ОбъектКонфигурации = Неопределено;
	Выполнить("ОбъектКонфигурации = "+ПутьКОбъекту);
	Возврат ОбъектКонфигурации;
КонецФункции

Функция ЭтоВнешняяОбработка(ПарамОбъект = Неопределено) Экспорт
	Перем НужныйОбъект;
	НужныйОбъект = ПарамОбъект;
	Если НужныйОбъект = Неопределено Тогда
		НужныйОбъект = ЭтотОбъект;
	КонецЕсли;
	Возврат Найти(Строка(ТипЗнч(НужныйОбъект)), "Внешняя обработка объект:") = 1;
КонецФункции

Функция ПолноеИмяОбъекта(ПарамОбъект)
	Если ЭтоВнешняяОбработка(ПарамОбъект) Тогда
		рез = ПарамОбъект.ИспользуемоеИмяФайла;
	Иначе
		рез = ПарамОбъект.Метаданные().ПолноеИмя();
	КонецЕсли;
КонецФункции

Процедура ПодключитьИнформатор() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		мПытаемсяСоздатьИнформатор = Истина;
		Если ЗапретИспользованияИнформатора Тогда
			мПытаемсяСоздатьИнформатор = Ложь;
		КонецЕсли;

		Если мПытаемсяСоздатьИнформатор Тогда
			ПолучитьИнформатор();
		КонецЕсли; 
	#Иначе
		мПытаемсяСоздатьИнформатор = Ложь;
	#КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ  СОБЫТИЙ ОБЪЕКТА

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

//{ Состояния тестов - ВАЖЕН порядок заполнения в мЗначенияСостоянияТестов, используется в ЗапомнитьСамоеХудшееСостояние
мЗначенияСостоянияТестов = Новый Структура;
мЗначенияСостоянияТестов.Вставить("НеВыполнялся", 0);
мЗначенияСостоянияТестов.Вставить("Прошел"		, 1);
мЗначенияСостоянияТестов.Вставить("НеРеализован", 2);
мЗначенияСостоянияТестов.Вставить("Сломался"	, 3);
//} Состояния тестов

//{ Типы строк дерева тестов
мЗначенияТиповСтроки = Новый Структура;
мЗначенияТиповСтроки.Вставить("КаталогТестов", 0);
мЗначенияТиповСтроки.Вставить("ТестовыйСлучай", 1);
мЗначенияТиповСтроки.Вставить("ТестовыйМетод", 2);
мЗначенияТиповСтроки.Вставить("Подсистема", 3);
мЗначенияТиповСтроки = Новый ФиксированнаяСтруктура(мЗначенияТиповСтроки);
//} Типы строк дерева тестов

мЗначениеМодульИлиФорма = Новый Структура();
мЗначениеМодульИлиФорма.Вставить("Модуль", 1);
мЗначениеМодульИлиФорма.Вставить("Форма", 2);
мЗначениеМодульИлиФорма = Новый ФиксированнаяСтруктура(мЗначениеМодульИлиФорма);

//{ Инициализация дерева тестов
ДеревоТестов.Колонки.Добавить("Имя");
ДеревоТестов.Колонки.Добавить("ВремяВыполнения");
ДеревоТестов.Колонки.Добавить("ПолныйПуть");
//ДеревоТестов.Колонки.Добавить("ПредставлениеПути");
ДеревоТестов.Колонки.Добавить("ТипСтроки");
ДеревоТестов.Колонки.Добавить("Состояние");
ДеревоТестов.Колонки.Добавить("МодульИлиФорма");
//ДеревоТестов.Колонки.Добавить("_Объект");
ДеревоТестов.Колонки.Добавить("_guid");
ДеревоТестов.Колонки.Добавить("ПараметрыТеста");
ДеревоТестов.Колонки.Добавить("ЕстьПараметрыТеста");
ДеревоТестов.Колонки.Добавить("ИмяТестовогоСлучая");
ДеревоТестов.Колонки.Добавить("КоличествоТестов");
ДеревоТестов.Колонки.Добавить("ЭтоВнутренняяОбработка");
ДеревоТестов.Колонки.Добавить("ИмеетТесты");
//} Инициализация дерева тестов

мИнформатор = Неопределено;

//#Если ТолстыйКлиентОбычноеПриложение Тогда
//	
//	мПытаемсяСоздатьИнформатор = Истина;
//	Если ЗапретИспользованияИнформатора Тогда
//		мПытаемсяСоздатьИнформатор = Ложь;
//	КонецЕсли;

//	Если мПытаемсяСоздатьИнформатор Тогда
//		ПолучитьИнформатор();
//	КонецЕсли; 
//#Иначе
//	мПытаемсяСоздатьИнформатор = Ложь;
//#КонецЕсли

мКоличествоТестовыхСлучаев  = 0;