
Процедура Инициализация()
	ТипыПлагинов = ТипыПлагинов();
	СостоянияТестов = СостоянияТестов();
	ВозможныеСобытия = ВозможныеСобытия();
	
	ЗагрузитьНастройки();
КонецПроцедуры

Функция Версия() Экспорт
	Возврат "4.0.0.0";
КонецФункции

Функция ЗаголовокФормы() Экспорт
	Возврат СокрЛП(Метаданные().Синоним) + ", версия " + Версия();
КонецФункции

// { Plugins
Функция ТипыПлагинов()
	Результат = Новый Структура;
	Результат.Вставить("Загрузчик", "Загрузчик");
	Результат.Вставить("Утилита", "Утилита");
	Результат.Вставить("ГенераторОтчета", "ГенераторОтчета");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

Функция Плагин(Идентификатор) Экспорт	
	Плагин = Плагины[Идентификатор];
	Если ТипЗнч(Плагин) = Тип("Строка") Тогда
		Плагин = ВнешниеОбработки.Создать(Плагин);
	КонецЕсли;
	
	Возврат Плагин;
КонецФункции

Функция ПолучитьОписанияПлагиновПоТипу(ТипПлагина) Экспорт
	Результат = Новый Массив;
	Для каждого КлючЗначение Из Плагины Цикл
		Плагин = Плагин(КлючЗначение.Ключ);
		ОписаниеПлагина = Плагин.ОписаниеПлагина(ТипыПлагинов);
		Если ОписаниеПлагина.Тип = ТипПлагина Тогда
			Результат.Добавить(ОписаниеПлагина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ЗагрузчикПоУмолчанию() Экспорт
	Возврат Плагин("ЗагрузчикКаталога");
КонецФункции
// } Plugins

// { Выполнение тестов
Функция ПолучитьКоличествоТестовыхМетодов(КонтейнерДереваТестов, Фильтр = Неопределено) Экспорт
	КоличествоТестовыхМетодов = 0;
	ФильтрДляДочернихУзлов = Неопределено;
	Если Не УзелДереваТестовУдовлетворяетФильтру(КонтейнерДереваТестов, Фильтр) Тогда
		ФильтрДляДочернихУзлов = Фильтр;
	КонецЕсли;
	Для каждого ДочернийУзел Из КонтейнерДереваТестов.Строки Цикл
		КоличествоДочернихТестовыхМетодов = 0;
		Если ДочернийУзел.Тип = ЭтотОбъект.ТипыУзловДереваТестов.Контейнер Тогда
			КоличествоДочернихТестовыхМетодов = ПолучитьКоличествоТестовыхМетодов(ДочернийУзел, ФильтрДляДочернихУзлов);
		ИначеЕсли ДочернийУзел.Тип = ЭтотОбъект.ТипыУзловДереваТестов.Элемент Тогда
			Если УзелДереваТестовУдовлетворяетФильтру(ДочернийУзел, ФильтрДляДочернихУзлов) Тогда
				КоличествоДочернихТестовыхМетодов = 1;
			КонецЕсли;
		КонецЕсли;
		КоличествоТестовыхМетодов = КоличествоТестовыхМетодов + КоличествоДочернихТестовыхМетодов;
	КонецЦикла;
	
	Возврат КоличествоТестовыхМетодов;
КонецФункции

Функция ВыполнитьТесты(Загрузчик, КонтейнерДереваТестов, Фильтр = Неопределено, Подписчик = Неопределено) Экспорт
	РезультатТестирования = СоздатьКонтейнерРезультатовТестирования(КонтейнерДереваТестов);
	ФильтрДляДочернихУзлов = Неопределено;
	Если Не УзелДереваТестовУдовлетворяетФильтру(КонтейнерДереваТестов, Фильтр) Тогда
		ФильтрДляДочернихУзлов = Фильтр;
	КонецЕсли;
	
	Если КонтейнерДереваТестов.СлучайныйПорядокВыполнения Тогда
		СтрокиКонтейнера = ПеремешатьМассив(КонтейнерДереваТестов.Строки);
	Иначе
		СтрокиКонтейнера = КонтейнерДереваТестов.Строки;
	КонецЕсли;
	
	Для каждого ДочернийУзел Из СтрокиКонтейнера Цикл
		ДочернийРезультатТестирования = Неопределено;
		Если ДочернийУзел.Тип = ЭтотОбъект.ТипыУзловДереваТестов.Контейнер Тогда
			ДочернийРезультатТестирования = ВыполнитьТесты(Загрузчик, ДочернийУзел, ФильтрДляДочернихУзлов, Подписчик);
		ИначеЕсли ДочернийУзел.Тип = ЭтотОбъект.ТипыУзловДереваТестов.Элемент Тогда
			Если УзелДереваТестовУдовлетворяетФильтру(ДочернийУзел, ФильтрДляДочернихУзлов) Тогда
				Контекст = Загрузчик.ПолучитьКонтекстПоПути(ЭтотОбъект, ДочернийУзел.Путь);
				Контекст.Инициализация(ЭтотОбъект);
				ЭтотОбъект.ТекущийКонтейнер = КонтейнерДереваТестов;
				ДочернийРезультатТестирования = ВыполнитьТестовыйМетод(Контекст, ДочернийУзел);
				
				Если Подписчик <> Неопределено Тогда
					ОповеститьОСобытии(Подписчик, ЭтотОбъект.ВозможныеСобытия.ВыполненТестовыйМетод, ДочернийРезультатТестирования);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ДочернийРезультатТестирования <> Неопределено Тогда
			РезультатТестирования.Строки.Добавить(ДочернийРезультатТестирования);
			РезультатТестирования.Состояние = ВыбратьХудшееСостояниеВыполненияТестов(РезультатТестирования.Состояние, ДочернийРезультатТестирования.Состояние);
			ЗаполнитьДанныеСтатистики(РезультатТестирования, ДочернийРезультатТестирования);
		КонецЕсли;
	КонецЦикла;
	Если РезультатТестирования.Строки.Количество() = 0 Тогда
		РезультатТестирования = Неопределено;
	КонецЕсли;
	
	Возврат РезультатТестирования;
КонецФункции

Функция УзелДереваТестовУдовлетворяетФильтру(УзелДереваТестов, Фильтр)
	Возврат (Фильтр = Неопределено) Или (Фильтр.Найти(УзелДереваТестов.Ключ) <> Неопределено);
КонецФункции

Процедура ЗаполнитьДанныеСтатистики(РезультатТестирования, ДочернийРезультатТестирования) Экспорт
	Если ДочернийРезультатТестирования.Тип = ЭтотОбъект.ТипыУзловДереваТестов.Контейнер Тогда
		РезультатТестирования.КоличествоТестов = РезультатТестирования.КоличествоТестов + ДочернийРезультатТестирования.КоличествоТестов;
		РезультатТестирования.КоличествоСломаныхТестов = РезультатТестирования.КоличествоСломаныхТестов + ДочернийРезультатТестирования.КоличествоСломаныхТестов;
		РезультатТестирования.КоличествоНеРеализованныхТестов = РезультатТестирования.КоличествоНеРеализованныхТестов + ДочернийРезультатТестирования.КоличествоНеРеализованныхТестов;
	ИначеЕсли ДочернийРезультатТестирования.Тип = ЭтотОбъект.ТипыУзловДереваТестов.Элемент Тогда
		РезультатТестирования.КоличествоТестов = РезультатТестирования.КоличествоТестов + 1;
		Если ДочернийРезультатТестирования.Состояние = СостоянияТестов.Сломан Тогда
			РезультатТестирования.КоличествоСломаныхТестов = РезультатТестирования.КоличествоСломаныхТестов + 1;
		ИначеЕсли ДочернийРезультатТестирования.Состояние = СостоянияТестов.НеРеализован Тогда
			РезультатТестирования.КоличествоНеРеализованныхТестов = РезультатТестирования.КоличествоНеРеализованныхТестов + 1;
		КонецЕсли;
	КонецЕсли;
	РезультатТестирования.ВремяВыполнения = РезультатТестирования.ВремяВыполнения + ДочернийРезультатТестирования.ВремяВыполнения;
КонецПроцедуры

Функция ВыбратьХудшееСостояниеВыполненияТестов(Состояние1, Состояние2)
	Возврат Макс(Состояние1, Состояние2);
КонецФункции

Функция ВыполнитьТестовыйМетод(Контекст, ЭлементДереваТестов) Экспорт
	РезультатТестирования = СоздатьЭлементРезультатовТестирования(ЭлементДереваТестов);
	НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Попытка
		ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(Контекст, ЭлементДереваТестов.ПередЗапускомТеста);
		ВыполнитьПроцедуруКонтекста(Контекст, ЭлементДереваТестов.ИмяМетода, ЭлементДереваТестов.Параметры);
		
		РезультатТестирования.Состояние = СостоянияТестов.Пройден;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ЭлементДереваТестов.ИмяМетода) Тогда
			РезультатТестирования.Состояние = СостоянияТестов.НеРеализован;
			Сообщение = НСтр("ru = 'Отсутствует реализация тестового метода (%1).'");
			РезультатТестирования.Сообщение = СтрЗаменить(Сообщение, "%1", ЭлементДереваТестов.ИмяМетода);
		Иначе
			РезультатТестирования.Состояние = СостоянияТестов.Сломан;
			РезультатТестирования.Сообщение = ТекстОшибки;
		КонецЕсли;
	КонецПопытки;
	Попытка
		ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(Контекст, ЭлементДереваТестов.ПослеЗапускаТеста);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатТестирования.Состояние = СостоянияТестов.Сломан;
		РезультатТестирования.Сообщение = ТекстОшибки;
	КонецПопытки;
	
	ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РезультатТестирования.ВремяВыполнения = (ОкончаниеВыполнения - НачалоВыполнения) / 1000;
	
	Возврат РезультатТестирования;
КонецФункции

Процедура ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(Контекст, ИмяПроцедуры)
	Попытка
		ВыполнитьПроцедуруКонтекста(Контекст, ИмяПроцедуры);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Не ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ИмяПроцедуры) Тогда
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
КонецПроцедуры

Процедура ВыполнитьПроцедуруКонтекста(Контекст, ПроцедураКонтекста, Параметры = Неопределено)
	СтрокаПараметров = СформироватьСтрокуПараметров(Параметры);
	ИcполняемыйКод = "Контекст." + ПроцедураКонтекста + "(" + СтрокаПараметров + ");";
	Выполнить(ИcполняемыйКод);
КонецПроцедуры

Функция СформироватьСтрокуПараметров(Параметры)
	СтрокаПараметров = "";
	Если ТипЗнч(Параметры) = Тип("Массив") Тогда
		Для Сч = 0 По Параметры.Количество() - 1 Цикл
			СтрокаПараметров = СтрокаПараметров + ",Параметры[" + Формат(Сч, "ЧН=0; ЧГ=") + "]";
		КонецЦикла;
	КонецЕсли;
	
	Возврат Сред(СтрокаПараметров, 2);
КонецФункции

Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ИмяМетода)
	Результат = Ложь;
	Если Найти(текстОшибки, "Метод объекта не обнаружен (" + ИмяМетода + ")") > 0 
		ИЛИ Найти(текстОшибки, "Object method not found (" + ИмяМетода + ")") > 0  Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
// } Выполнение тестов

// { Генерация результатов тестирования
Функция СостоянияТестов()
	СостоянияТестов = Новый Структура;
	СостоянияТестов.Вставить("НеВыполнен", 0);
	СостоянияТестов.Вставить("Пройден", 1);
	СостоянияТестов.Вставить("НеРеализован", 2);
	СостоянияТестов.Вставить("Сломан", 3);
	
	Возврат Новый ФиксированнаяСтруктура(СостоянияТестов);
КонецФункции

Функция СоздатьКонтейнерРезультатовТестирования(КонтейнерДереваТестов) Экспорт
	ГруппаРезультатовТестирования = Новый Структура;
	ГруппаРезультатовТестирования.Вставить("Ключ", КонтейнерДереваТестов.Ключ);
	ГруппаРезультатовТестирования.Вставить("Тип", КонтейнерДереваТестов.Тип);
	ГруппаРезультатовТестирования.Вставить("Имя", КонтейнерДереваТестов.Имя);
	ГруппаРезультатовТестирования.Вставить("Состояние", СостоянияТестов.НеВыполнен);
	ГруппаРезультатовТестирования.Вставить("КоличествоТестов", 0);
	ГруппаРезультатовТестирования.Вставить("КоличествоСломаныхТестов", 0);
	ГруппаРезультатовТестирования.Вставить("КоличествоНеРеализованныхТестов", 0);
	ГруппаРезультатовТестирования.Вставить("ВремяВыполнения", 0);
	ГруппаРезультатовТестирования.Вставить("Строки", Новый Массив);
	
	Возврат ГруппаРезультатовТестирования;
КонецФункции

Функция СоздатьЭлементРезультатовТестирования(ЭлементДереваТестов) Экспорт
	РезультатТестирования = Новый Структура;
	РезультатТестирования.Вставить("Ключ", ЭлементДереваТестов.Ключ);
	РезультатТестирования.Вставить("Тип", ЭлементДереваТестов.Тип);
	РезультатТестирования.Вставить("Путь", ЭлементДереваТестов.Путь);
	РезультатТестирования.Вставить("ИмяМетода", ЭлементДереваТестов.ИмяМетода);
	РезультатТестирования.Вставить("Представление", ЭлементДереваТестов.Представление);
	РезультатТестирования.Вставить("Параметры", ЭлементДереваТестов.Параметры);
	РезультатТестирования.Вставить("Состояние", СостоянияТестов.НеВыполнен);
	РезультатТестирования.Вставить("ВремяВыполнения", 0);
	РезультатТестирования.Вставить("Сообщение", "");
	
	Возврат РезультатТестирования;
КонецФункции
// } Генерация результатов тестирования

// { Настройки браузера тестирования
Процедура ЗагрузитьНастройки() Экспорт
	ЭтотОбъект.Настройки = ПолучитьПустыеНастройкиБраузераТестирования();
	СчитанныеНастройки = ХранилищеОбщихНастроек.Загрузить(Метаданные().Имя);
	Если ТипЗнч(СчитанныеНастройки) = Тип("Структура") Тогда
		Для каждого СчитанныеКлючЗначение Из СчитанныеНастройки Цикл
			Если ЭтотОбъект.Настройки.Свойство(СчитанныеКлючЗначение.Ключ) И ТипЗнч(СчитанныеКлючЗначение.Значение) = ТипЗнч(ЭтотОбъект.Настройки[СчитанныеКлючЗначение.Ключ]) Тогда
				ЭтотОбъект.Настройки[СчитанныеКлючЗначение.Ключ] = СчитанныеКлючЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьНастройки() Экспорт
	ХранилищеОбщихНастроек.Сохранить(Метаданные().Имя, , ЭтотОбъект.Настройки);
КонецПроцедуры

Функция ПолучитьПустыеНастройкиБраузераТестирования()
	Результат = Новый Структура;
	Результат.Вставить("ИсторияЗагрузкиТестов", Новый Массив);
	
	Возврат Результат;
КонецФункции

Процедура СохранитьВИсториюЗагрузкиТестов(ИдентификаторЗагрузчика, Путь) Экспорт
	ИсторияЗагрузкиТестов = ЭтотОбъект.Настройки.ИсторияЗагрузкиТестов;
	Для Сч = - ИсторияЗагрузкиТестов.Количество() + 1 По 0 Цикл
		Индекс = -Сч;
		ЭлементИстории = ИсторияЗагрузкиТестов[Индекс];
		Если ЭлементИстории.ИдентификаторЗагрузчика = ИдентификаторЗагрузчика И ЭлементИстории.Путь = Путь Тогда
			ИсторияЗагрузкиТестов.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	ИсторияЗагрузкиТестов.Вставить(0, Новый Структура("ИдентификаторЗагрузчика, Путь", ИдентификаторЗагрузчика, Путь));
	ДлинаИстории = 10;
	Пока ИсторияЗагрузкиТестов.Количество() > ДлинаИстории Цикл
		ИсторияЗагрузкиТестов.Удалить(ДлинаИстории);
	КонецЦикла;
КонецПроцедуры
// } Настройки браузера тестирования

// { Оповещения
Функция ВозможныеСобытия() Экспорт
	ИмяФреймворка = Метаданные().Имя;
	ВозможныеСобытия = Новый Структура;
	ВозможныеСобытия.Вставить("ВыполненТестовыйМетод", ИмяФреймворка + "_ВыполненТестовыйМетод");
	
	Возврат Новый ФиксированнаяСтруктура(ВозможныеСобытия);
КонецФункции

Процедура ОповеститьОСобытии(Подписчик, Событие, ПараметрыСобытия)
	Выполнить("Подписчик.ОбработатьСобытиеВыполненияТестов(Событие, ПараметрыСобытия);");
КонецПроцедуры
// } Оповещения

// { Контекст
Процедура СохранитьКонтекст(Знач Контекст) Экспорт
	Если ЭтотОбъект.ТекущийКонтейнер.СлучайныйПорядокВыполнения Тогда
		ВызватьИсключение "Сохранять контекст можно только в рамках контейнеров со строгим порядком выполнения";
	КонецЕсли;
	ЭтотОбъект.ТекущийКонтейнер.Контекст = Контекст;
КонецПроцедуры

Функция ПолучитьКонтекст() Экспорт
	Если ЭтотОбъект.ТекущийКонтейнер.СлучайныйПорядокВыполнения Тогда
		ВызватьИсключение "Получать контекст можно только в рамках контейнеров со строгим порядком выполнения";
	КонецЕсли;
	Возврат ЭтотОбъект.ТекущийКонтейнер.Контекст;
КонецФункции
// } Контекст

// { Helpers
Функция ПеремешатьМассив(Знач ИсходныйМассив) Экспорт
	Результат = Новый Массив;
	Для Каждого Элемент Из ИсходныйМассив Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	// алгоритм перемешивания взят из книги Кнута "Искусство программирования" т.2
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	ПоследнийИндекс = Результат.ВГраница();
	Для Индекс = 1 По ПоследнийИндекс Цикл
		ТекущийИндекс = ПоследнийИндекс - Индекс + 1;
		НовыйИндекс = ГСЧ.СлучайноеЧисло(0, ТекущийИндекс);
		Если НовыйИндекс <> ТекущийИндекс Тогда
			Значение = Результат[НовыйИндекс];
			Результат[НовыйИндекс] = Результат[ТекущийИндекс];
			Результат[ТекущийИндекс] = Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция НайтиРезультатТестированияПоИдентификатору(Знач КонтейнерРезультатовТестирования, Знач ИдентификаторТеста, Знач ВключатьПодчиненные = Ложь) Экспорт
	Перем Результат;
	
	Для каждого ДочернийРезультатТестирования Из КонтейнерРезультатовТестирования.Строки Цикл
		Если ДочернийРезультатТестирования.Ключ = ИдентификаторТеста Тогда
			Результат = ДочернийРезультатТестирования;
		ИначеЕсли ЗначениеЗаполнено(Результат) И ВключатьПодчиненные И ДочернийРезультатТестирования.Тип = ЭтотОбъект.ТипыУзловДереваТестов.Контейнер Тогда
			Результат = НайтиРезультатТестированияПоИдентификатору(ДочернийРезультатТестирования, ИдентификаторТеста, ВключатьПодчиненные);
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
// } Helpers

Инициализация();
