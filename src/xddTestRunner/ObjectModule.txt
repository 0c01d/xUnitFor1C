
Процедура Инициализация()
	ТипыПлагинов = ТипыПлагинов();
	СостоянияТестов = СостоянияТестов();
	ЗагрузитьНастройки();
КонецПроцедуры

Функция Версия() Экспорт
	Возврат "4.0.0.0";
КонецФункции

Функция ЗаголовокФормы() Экспорт
	Возврат СокрЛП(Метаданные().Синоним) + ", версия " + Версия();
КонецФункции

// { Plugins
Функция ТипыПлагинов()
	Результат = Новый Структура;
	Результат.Вставить("Загрузчик", "Загрузчик");
	Результат.Вставить("Утилита", "Утилита");
	Результат.Вставить("ГенераторОтчета", "ГенераторОтчета");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

Функция Плагин(Идентификатор) Экспорт	
	Плагин = Плагины[Идентификатор];
	Если ТипЗнч(Плагин) = Тип("Строка") Тогда
		Плагин = ВнешниеОбработки.Создать(Плагин);
	КонецЕсли;
	
	Возврат Плагин;
КонецФункции

Функция ПолучитьОписанияПлагиновПоТипу(ТипПлагина) Экспорт
	Результат = Новый Массив;
	Для каждого КлючЗначение Из Плагины Цикл
		Плагин = Плагин(КлючЗначение.Ключ);
		ОписаниеПлагина = Плагин.ОписаниеПлагина(ТипыПлагинов);
		Если ОписаниеПлагина.Тип = ТипПлагина Тогда
			Результат.Добавить(ОписаниеПлагина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ЗагрузчикПоУмолчанию() Экспорт
	Возврат Плагин("ЗагрузчикКаталога");
КонецФункции
// } Plugins

// { Выполнение тестов
Функция ВыполнитьТесты(Загрузчик, УзелДереваТестов, Фильтр = Неопределено) Экспорт
	ТипыУзловДереваТестов = Плагин("ПостроительДереваТестов").ТипыУзловДереваТестов;
	РезультатТестирования = Неопределено;
	Если УзелДереваТестов.Тип = ТипыУзловДереваТестов.Контейнер Тогда
		РезультатТестирования = СоздатьКонтейнерРезультатовТестирования(УзелДереваТестов);
		Для каждого ДочернийУзел Из УзелДереваТестов.Строки Цикл
			Если Фильтр = Неопределено Или Фильтр.Найти(УзелДереваТестов.Ключ) <> Неопределено Тогда
				ДочернийРезультат = ВыполнитьТесты(Загрузчик, ДочернийУзел);
			Иначе
				ДочернийРезультат = ВыполнитьТесты(Загрузчик, ДочернийУзел, Фильтр);
			КонецЕсли;
			Если ДочернийРезультат <> Неопределено Тогда
				РезультатТестирования.Строки.Добавить(ДочернийРезультат);
				РезультатТестирования.Состояние = ВыбратьХудшееСостояниеВыполненияТестов(РезультатТестирования.Состояние, ДочернийРезультат.Состояние);
				РезультатТестирования.ВремяВыполнения = РезультатТестирования.ВремяВыполнения + ДочернийРезультат.ВремяВыполнения;
			КонецЕсли;
		КонецЦикла;
		Если РезультатТестирования.Строки.Количество() = 0 Тогда
			РезультатТестирования = Неопределено;
		КонецЕсли;
	ИначеЕсли УзелДереваТестов.Тип = ТипыУзловДереваТестов.Элемент Тогда
		Если Фильтр = Неопределено Или Фильтр.Найти(УзелДереваТестов.Ключ) <> Неопределено Тогда
			Контекст = Загрузчик.ПолучитьКонтекстПоПути(ЭтотОбъект, УзелДереваТестов.Путь);
			Контекст.Инициализация(ЭтотОбъект);
			РезультатТестирования = ВыполнитьТестовыйМетод(Контекст, УзелДереваТестов);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатТестирования;
КонецФункции

Функция ВыбратьХудшееСостояниеВыполненияТестов(Состояние1, Состояние2)
	Возврат Макс(Состояние1, Состояние2);
КонецФункции

Функция ВыполнитьТестовыйМетод(Контекст, ЭлементДереваТестов) Экспорт
	РезультатТестирования = СоздатьЭлементРезультатовТестирования(ЭлементДереваТестов);
	НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Попытка
		ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(Контекст, "ПередЗапускомТеста");
		ВыполнитьПроцедуруКонтекста(Контекст, ЭлементДереваТестов.ИмяМетода);
		ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(Контекст, "ПослеЗапускаТеста");
		
		РезультатТестирования.Состояние = СостоянияТестов.Пройден;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ЭлементДереваТестов.ИмяМетода) Тогда
			РезультатТестирования.Состояние = СостоянияТестов.НеРеализован;
			Сообщение = НСтр("ru = 'Отсутствует реализация тестового метода (%1).'");
			РезультатТестирования.Сообщение = СтрЗаменить(Сообщение, "%1", ЭлементДереваТестов.ИмяМетода);
		Иначе
			РезультатТестирования.Состояние = СостоянияТестов.Сломан;
			РезультатТестирования.Сообщение = ТекстОшибки;
		КонецЕсли;
	КонецПопытки;
	ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РезультатТестирования.ВремяВыполнения = (ОкончаниеВыполнения - НачалоВыполнения) / 1000;
	
	Возврат РезультатТестирования;
КонецФункции

Процедура ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(Контекст, ИмяПроцедуры)
	Попытка
		ВыполнитьПроцедуруКонтекста(Контекст, ИмяПроцедуры);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Не ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ИмяПроцедуры) Тогда
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
КонецПроцедуры

Процедура ВыполнитьПроцедуруКонтекста(Контекст, ПроцедураКонтекста)
	ИcполняемыйКод = "Контекст." + ПроцедураКонтекста + "();";
	Выполнить(ИcполняемыйКод);
КонецПроцедуры

Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ИмяМетода)
	Результат = Ложь;
	Если Найти(текстОшибки, "Метод объекта не обнаружен (" + ИмяМетода + ")") > 0 
		ИЛИ Найти(текстОшибки, "Object method not found (" + ИмяМетода + ")") > 0  Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
// } Выполнение тестов

// { Генерация результатов тестирования
Функция СостоянияТестов()
	СостоянияТестов = Новый Структура;
	СостоянияТестов.Вставить("НеВыполнен", 0);
	СостоянияТестов.Вставить("Пройден", 1);
	СостоянияТестов.Вставить("НеРеализован", 2);
	СостоянияТестов.Вставить("Сломан", 3);
	
	Возврат Новый ФиксированнаяСтруктура(СостоянияТестов);
КонецФункции

Функция СоздатьКонтейнерРезультатовТестирования(КонтейнерДереваТестов) Экспорт
	ГруппаРезультатовТестирования = Новый Структура;
	ГруппаРезультатовТестирования.Вставить("Ключ", КонтейнерДереваТестов.Ключ);
	ГруппаРезультатовТестирования.Вставить("Тип", КонтейнерДереваТестов.Тип);
	ГруппаРезультатовТестирования.Вставить("Имя", КонтейнерДереваТестов.Имя);
	ГруппаРезультатовТестирования.Вставить("Состояние", СостоянияТестов.НеВыполнен);
	ГруппаРезультатовТестирования.Вставить("ВремяВыполнения", 0);
	ГруппаРезультатовТестирования.Вставить("Строки", Новый Массив);
	
	Возврат ГруппаРезультатовТестирования;
КонецФункции

Функция СоздатьЭлементРезультатовТестирования(ЭлементДереваТестов) Экспорт
	РезультатТестирования = Новый Структура;
	РезультатТестирования.Вставить("Ключ", ЭлементДереваТестов.Ключ);
	РезультатТестирования.Вставить("Тип", ЭлементДереваТестов.Тип);
	РезультатТестирования.Вставить("Путь", ЭлементДереваТестов.Путь);
	РезультатТестирования.Вставить("ИмяМетода", ЭлементДереваТестов.ИмяМетода);
	РезультатТестирования.Вставить("Состояние", СостоянияТестов.НеВыполнен);
	РезультатТестирования.Вставить("ВремяВыполнения", 0);
	РезультатТестирования.Вставить("Сообщение", "");
	
	Возврат РезультатТестирования;
КонецФункции
// } Генерация результатов тестирования

// { Настройки браузера тестирования
Процедура ЗагрузитьНастройки() Экспорт
	ЭтотОбъект.Настройки = ПолучитьПустыеНастройкиБраузераТестирования();
	СчитанныеНастройки = ХранилищеОбщихНастроек.Загрузить(Метаданные().Имя);
	Если ТипЗнч(СчитанныеНастройки) = Тип("Структура") Тогда
		Для каждого СчитанныеКлючЗначение Из СчитанныеНастройки Цикл
			Если ЭтотОбъект.Настройки.Свойство(СчитанныеКлючЗначение.Ключ) И ТипЗнч(СчитанныеКлючЗначение.Значение) = ТипЗнч(ЭтотОбъект.Настройки[СчитанныеКлючЗначение.Ключ]) Тогда
				ЭтотОбъект.Настройки[СчитанныеКлючЗначение.Ключ] = СчитанныеКлючЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьНастройки() Экспорт
	ХранилищеОбщихНастроек.Сохранить(Метаданные().Имя, , ЭтотОбъект.Настройки);
КонецПроцедуры

Функция ПолучитьПустыеНастройкиБраузераТестирования()
	Результат = Новый Структура;
	Результат.Вставить("ИсторияЗагрузкиТестов", Новый Массив);
	
	Возврат Результат;
КонецФункции

Процедура СохранитьВИсториюЗагрузкиТестов(ИдентификаторЗагрузчика, Путь) Экспорт
	ИсторияЗагрузкиТестов = ЭтотОбъект.Настройки.ИсторияЗагрузкиТестов;
	Для Сч = - ИсторияЗагрузкиТестов.Количество() + 1 По 0 Цикл
		Индекс = -Сч;
		ЭлементИстории = ИсторияЗагрузкиТестов[Индекс];
		Если ЭлементИстории.ИдентификаторЗагрузчика = ИдентификаторЗагрузчика И ЭлементИстории.Путь = Путь Тогда
			ИсторияЗагрузкиТестов.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	ИсторияЗагрузкиТестов.Вставить(0, Новый Структура("ИдентификаторЗагрузчика, Путь", ИдентификаторЗагрузчика, Путь));
	ДлинаИстории = 10;
	Пока ИсторияЗагрузкиТестов.Количество() > ДлинаИстории Цикл
		ИсторияЗагрузкиТестов.Удалить(ДлинаИстории);
	КонецЦикла;
КонецПроцедуры
// } Настройки браузера тестирования

Инициализация();
