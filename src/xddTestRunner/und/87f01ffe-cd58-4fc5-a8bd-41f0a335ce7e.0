{2,
{36,0,0,0,0,1,0,1,00000000-0000-0000-0000-000000000000,0,
{1,0},0,0,1,1,1,0,1,0,
{3,3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",52dbb775-1631-4fd5-8c55-1615b5881dac,"ПередЗакрытием",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере"},
{0},1,
{19,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},6,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{22,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаВыполнитьВсеТесты",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,3,
{-10}
},
{3,3,
{-11}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{3,3,
{0},"",-1,-1,0,
{
{#base64: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
7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJ
gUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5p
DoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85
ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7
F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/R
NtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9
MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo
1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5
sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWF
fevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTP
ZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJ
zs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ
+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3v
dy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtb
Ylu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ7
52PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7
nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9
zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9D
BY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfy
l5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT
0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADq
YAAAOpgAABdvkl/FRgAAAhJJREFUeNrUk01rE1EYhc+duZOZSYNtPqgVqmkVpNJF
UQlqNtlpRdBuhIKgC/fiX/AnKCrVjQs34kLQahe1wYUJNUpqWkpUMLa2dtKkmXx0
ksxkPu51IdiKdZWV5wc8vOe85xDOObqRgC7VNYACQDwx1j94rDW+tUFW9FX//Ei8
PVndJGulQk9KIJRRiQPkb6vZbPYXwB9qnbp0NXw70ntQmXm1ODs8IiWiBw6r8+n1
Zx+SjQeVVTUlwOfuBaIAwDj3O64rRwf6levXzl5c3yyh3jBwJj48GTttX84taLOZ
ZP1uuaDOEc9nixQgAt8F8ATesT1umFtwbA8DoX2IBMMo61U0am1x7Hj0/MkYObfw
ce3t+2T9XqUQeMkZNX+H6DHAtjlcl8N2PRimDtPSEOmjGD0yBAgWimVNmBiPJW7e
Ovr0xIQ+RXus/TsXMALDtKC3dHRsFxwAFUTIbgcNQ8OPUg0BVcJ3/QvynyvljU9q
2rOkxi4LBJbN0HYseIxDkRQYTYZ8sQgwhmCfH1rJLD1/Un2o5QJTxOnVRMp2MvAY
iONyIssUhsGwXNDhOC5CQQWVilNNz+mPtCX1PjPC30QJIBL78wuckbbVgb20vO29
mam9GBrFhUODvdLr6e3HWk6+w5qhvEgBKvO9i8RNJZOZbt2wavZXrx5516k1ryzW
3BW3GkyJIgH1sX82kfz/Y/o5APw/CNRIkXZ3AAAAAElFTkSuQmCC}
},0},1,
{"Pattern"},"",2,0,1,
{8,
{65,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаВыполнитьВсеТестыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"}
},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{22,
{60,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаПерезагрузитьТесты",
{1,0},1,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{3,3,
{0},"",-1,-1,0,
{
{#base64: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
7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJ
gUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5p
DoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85
ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7
F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/R
NtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9
MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo
1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5
sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWF
fevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTP
ZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJ
zs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ
+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3v
dy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtb
Ylu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ7
52PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7
nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9
zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9D
BY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfy
l5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT
0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADq
YAAAOpgAABdvkl/FRgAAAlFJREFUeNqkk11Ik2EUx3/Pu3duc35NRefSTMlNM52l
IZIZgaUWtaAPDPGiiygiKoIKUsEu7CLEQJCIPq68ihK6KrsxSoz8QAJFA800rEQt
bbqW27unC7NGjrzw3J0D/8M5/3N+QkrJuiK4gTUPso9CWROU3QKHCwBjxXUemOJJ
DKVVggsBDbxe8CwR5XYTHZNNtNHOJrst+eS+anN9qAHU4EQfIewlu3OuObdZD/j8
Y3qhkxwqliIrIYfS4skzP/yDPG/xnCeAb0UjpJQIRWBJ12XVNJe3FzgDKe6fw/jk
NEKRIMA9r2E0KXT3mWcbq6cz0Pi2soIKYEog8fAF283cgqmU/vFeXr9k9F03Pd7v
LGoS8/GLVOpg7n6N5zQac6oBAv4gI2LSOVjXHicfLxhk1W3GUNgStFmy6wbvEzKp
VFRI3Qu7rkL85mWtkFISHityU/I5FRZO1PxnXn3s4d7Gnegn3+DT/BiAZGC05AoV
tqy4Qs+019N5Z/Hh7Ij8wD9/IACStlJ0oln/Vo3EYC0ASxpEOjCfbdk+PDRRK+ta
M2RkGq4/HgSfNtbOjtqmwjYlkGodqXrWsMGB2/1JmLKd1lKXs8gxNH2XvoGpF0vz
DP69ghDLch1Rl1utw3sKLEn+pQjCw8PQ/BKhghLQ+Ood4Wnn7OyjBo65J+hYPYHE
1/9qpisz78uRmRmYGMer6kAI8AfQBrro7H1C48IkHSFf+XfEll+i7VwbEiP70ZGP
jkJU8oGYVRiEhElgSyumXlGxrMnRf2g0Abq1Goj14vxrAEGh9iL0BPs8AAAAAElF
TkSuQmCC}
},0},1,
{"Pattern"},"",2,0,1,
{8,
{66,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаПерезагрузитьТестыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"}
},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{22,
{62,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаЗагрузитьНаборыТестов",
{1,0},1,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{3,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACKElEQVR42qWTa0hU
QRTH/7P3Xm99s4jFDCpXk1Jje0dBEEmZsjd31zYzrUXLMqUPFURF3/vWtz5khUr0
dDFEqIQe9iCkoBKpoNieS0a7bkHQg92ZaWa6DBFRkhdmzjDnnN/858y5BOP8iJzq
tu45LEz0N1/X2ZNHDowV8G6uf/7UXx3DQw9HBCD/n4CmtkPHhN3+nzdoJ42tB/mW
aP0fvZzLwcEZg5jBmFwLy5mysVgPSHTnfh4M1+ikjvajMAxDaCNglCIY2QTbtkUy
+zkoA3XXd24NgGzesU8B5Ely83TncTS3tKGr4wSoCP7+7SsCoQhyLFsnUgGW9t7g
XZD6bXu5EwwpeXLzwplOWFaOSqwOr0cqmcK1q/2odMJqXwME/NGD+yAbG3fzKsfR
0mLnTolAC5VVARjiVCKuknjzEjcHrqO8IgDTlBCq1D0ZHgLZEN3FV61eq8kEFBe7
z2PR0mWYPCVPBU+cYOPtqzgGheTyNY6qjTws/vwpSE1DK1++YqVbIArT4xH1yKK3
pxsl/oXwevOQyWZx+0Y/fL5CePNn6IImXr8ACdW18AWLlwgi19JMwwMPYbjU14ui
4lLEnz1GQWERZs0uRWr0owvgSI4kQNbVNvOSMr9WQNUbS4gJ2zJw5XIfCnwiuXgO
kum0en/pFwbp1HsQJ9LEp02f6TaJSOZMS5T9MCk3F9lMBh9G08qnAG7PfPn8CaSi
uoGPoWX/+jPNGw/gB8qCPo8jDjToAAAAAElFTkSuQmCC}
},0},1,
{"Pattern"},"",2,0,1,
{8,
{67,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаЗагрузитьНаборыТестовExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"}
},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{22,
{38,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаЗагрузитьНаборТестов",
{1,0},1,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,3,
{-10}
},
{3,3,
{-11}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{3,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACK0lEQVR42qWT30sU
URTHv3d+bUGUBIaVWK3EalH5kGxGoYvI7EY4urHr4gZLghv9ICuf+gt6raeoHmoh
RKQWSlipXNyHxJakfRFMETPJbKl1oxfJdeZ25844RERG3uHOmZlzzud+z71nCDY4
iHnTrvbcZCb2my/x9NbtG/8K+FR7tH7nr47J8TeLDLBrXUCwt/cus/H/rOAeab9+
jUZjXX/0UvMy2KRr04DBLAzLJgf6QbSeK9Qf7rQTgOT9OxBFCUQQYOg6mkMdUBSF
5Rh8Um51/pwdfgHSevkSVSNRawX2cTDxANH4eQwkHvL3H8vLaGwPQuYQK9HQLUgu
MwJy+uIF2hKKMEkWfajvESQWvMIS1bYgioWveDX8EidbNUiybCuxQBOjoyCn4t3U
dybsSHve3wdZVuALBACXCyIh+PxhDmOZDI75/Qwu2woMTGWzIGrXOXpCa3OkuRgk
9eQxDnm92Fa+g0O3uDZhYW4WubHX8Ab8zn7Mvs2BtMRitF5VHWmyIELUVzGUTGJ/
3RFsr6iAXiphPJ3G3upqlFXuZnGUl/xxYhKk+WyUHm5qsuqypUmiAIUdSXrwGapq
ajE/9Q5VLNld48GXb0UOMEvOT8+A+CId1NPQ4GwM5XSmRBSxWZIwkkphj9uNfR4P
8sUi97NG4H1QmHkP0hgO0cqDB5jDPiITYAYxiaIkoHxrGVZWS8gvFfiqZh+tje8L
iyDHNY2u37F//5nqNgL4CYwnOoii8US9AAAAAElFTkSuQmCC}
},0},1,
{"Pattern"},"",2,0,1,
{8,
{68,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаЗагрузитьНаборТестовExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"}
},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{22,
{10,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаЗавершитьРаботу",
{1,0},1,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{3,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAADO0lEQVR42mWTW0hU
URSG/73PPjONc1NTsxQ0KCMsOz5UUL301IVguihdLC2aJGlQoryQ0IV66SE9gkQE
FflS+BA9NBpF0YAxauVDJt3Tye6lNqYzczzOTOtMYw+1YbHWhvN/+197r8NA69r+
/ekLli3b48zPT5NkGVySwIVIZGbUycwYQzwWw9dnz94GhoauuU6fnmZVxcWObaWl
T+YUFCzg8TgkQ8D5n5ys/0KMmkLYbOju6Gh/4PPtYNtzcsoP19dfFYYoKZzJ1sJC
RMfGEB8d/QtiyayFQnFPbe18tp7z6sbGxhazxQKRFM/kRTU1mHjzBiP37iWAhnjG
ycjAADytrQpbD9QccbtVR2YmDBciPR3OoiJEHj/GooYGTD5/jvFAANLs2dB7eiBT
mwbkS2cnPF6vwjYSoLqkRE3NyoKJxIuPHoWZegw0NyOf6lB/P6LBIOxr1mBicBCR
69fBP37E54sX4dF1hW0igGfdOtWZkYH5VVXIWrUKH1pbESGLCy9cQKivD8G2Njhd
LqSsXYvgpUuYOn4MY9FpHPzxU2EuAlStXq06yOLy9nZEXr/G8KlTkMnmXI8HUwTS
u7sh6I7SyJXW24OJA3sQlAUqX71XWCkB3EVFampuLlZ4vRih+NbSkgCYKIwsNA0Y
fIu0jk7QIGC8bAvGhQR330uFlRGgPC9PtVLfK/1+RIaHMVxRkRCLyUmI798hjY2C
5ecis/8Fpnv9CB0/gl+CY1/XU4XtJcBOu12dRRNYcPYsst1uvK+rQ7ipCeZoFCaa
VJ7mgO3yFdg2b8XkiTroj7oQljgq7j9RWCUBSgDVTB9anE4U+nyw0DMG6Zm027ch
rFZYy3Zh1pKl0Lw3ET53BsxmgUYt7L3TqzCPLFe7dL3FABinWex25NAlplIbEj2r
saKBIYTbLmPq1g1wEjN7CqbpEnd3+hW2QZY3nsjMuKV/+sxMSUgCRkNlyc6GQBws
qoGl2sAdVnC7NeHgU0yMb7v7sIDNk6SULTnZamVe3m475xaJgUQMgibOCIlgzCSD
0YlMlhAzmzAUjowc8vlPBiLaeWZYtHGeEo7FFtLfasW/K/7fNk6iUdK8+xmL6b8B
EfMhJOUSjvkAAAAASUVORK5CYII=}
},0},1,
{"Pattern"},"",2,0,1,
{8,
{69,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаЗавершитьРаботуExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"}
},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{22,
{64,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаКомандаОПроекте",
{1,0},1,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{3,0,
{0},"",-1,-1,1,0},1,
{"Pattern"},"",2,0,1,
{8,
{70,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаКомандаОПроектеExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"}
},1,0,0},1,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{19,
{46,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ГруппаСтраницы",
{1,1,
{"ru","Группа страницы"}
},
{1,1,
{"ru","Группа страницы"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1,
{0}
},1,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{19,
{48,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"ГруппаСтраницаТестирования",
{1,1,
{"ru","Тестирование"}
},
{1,1,
{"ru","Страница тестирования"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,
{3,0,
{0},"",-1,-1,1,0},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
}
},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{19,
{12,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаДеревоТестов",
{1,1,
{"ru","Группа дерево тестов"}
},
{1,1,
{"ru","Группа дерево тестов"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0}
},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{44,
{14,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,1,
{0,
{0,
{"B",1},0}
},"ДеревоТестов",0,0,1,
{1,0},
{1,0},
{1,
{2}
},0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,1,2,2,0,1,1,
{1,
{6}
},
{3,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAADAAAAAQCAYAAABQrvyxAAAACXBIWXMAAAsTAAAL
EwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj33
3vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEs
DIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXXPues852zzwfACAyWSDNRNYAMqUIe
EeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH
/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAn
f+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJ
V2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4
mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHg
g/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl
7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl/A
V/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd0yLESWK5
WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQ
WHTA4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAA
RKCBKrBBG/TBGCzABhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv
1EAdNMBRaIaTcA4uwlW4Dj1wD/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4
IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGy
UT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPE
bDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhM
WE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPE
NyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD
5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2h
tlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0
dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHK
CpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2ep
O6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN
2Xx2KruY/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIp
G6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3n
U9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36
p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYP
jGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLn
m+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cR
p7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0H
DYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dn
F2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofc
n8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh
7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJ
gUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5p
DoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85
ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7
F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/R
NtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9
MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo
1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5
sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWF
fevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTP
ZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJ
zs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ
+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3v
dy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtb
Ylu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ7
52PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7
nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9
zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9D
BY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfy
l5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT
0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADq
YAAAOpgAABdvkl/FRgAABGlJREFUeNrUlX9MlVUYxz/Ped/L5WeCoq35azRClCTB
cm2VSCJzzZumLVwYq4mLmXPLVfM6WVuotEhXVu6mrdqMmK4/sGtzOAOxXFsNFRzV
yKE4HEaE/PDy4977vqc/7gUT0KRhW9/t7H33nHOefb/nfJ/noLXmbo+tK+al1FS8
U711xbyUic79n5CvLn+7Wvd9r4/sLZxwEdLgWVppB/0rtW0BIMpADPO8iEoH4SZI
OCLC0NyDG6q4FdyutJSctXmepasXZtmD1xT+K/ap4y21VYdqi0q9jU1MAEw76F/5
UNFnEAiGIobBmQ+fny+GqUVGCEAQpVBmxK+ijLm3S+x2paXk5OV5nlz1SJbl+1n0
9QZbR90vi5dPzkKe8LhdaaNE+KoqdcC9CYD4M61yRwK0bUNgEH9TGVoLjulryCz6
AlR4v0j4xMOHbprU7ytINUQtRKRuZEIR0UDx4kczSjjXWH76XKXatjndtgKXxTT9
GjNJPbY8LjvgSx0lor/0NRLvkPiwAAC0D8woBINg+zHgGwQQJWjLpr+3L2wdTcT0
PNCa3j7/orgYZ90YOYu11jvcrrTD2cniyX0mg8HeZqAX7HasgTqqvrqv5vSJjp3/
ZCNfVaXmlUJiLnQMi+rKnKGd23cRtbogROns3sf1gpd2EGw7AmIg3Dh527ZoOlVP
f1cvoBE0iEYZJsp0oMyIjvkvn5g68ga01jJko+ycWE/uKp0dsPo1Tr8cq5CaH2qN
naXexm9HEu5YkqzNnoFhC3UsSdaJJy/IWOuG4maoMgdBFP3d/YgMVyotZ5qYOmsy
09btA9sCdGgI4Iig3rM+cawbGPop9TY2uV1pRWIYnmVr7OyjX96a/BDix2shUQLB
Hn47VY/vWs+NGS3MXvgACdOnEGh+D61t0CEBRvQM/CqVjm7/8ewNxXnaCuY7Yie7
gBeAkmWbyy4BBwPXO72OpBfLqfq8SDnEc/rk7cn/qy6EKPraLqJMePjVCrCscLUa
WJf3YWsFEhGyD4C2MaJn0/VLA5faB8q1FczPX/ucK2tRBsDBOR+8UfzRW68fBKj9
8azr8NETlHobD7ldac+Wehs7mWAoEUVvWwv3zJgLvmbs1gNYrZ9gte4Hw4kynShH
JMoRhXJEYjjvgchY/myup/D9c5WAKzU9g5KyPcxJEICSOQlCSdkeUtMzCFzvdIXt
NOHkQwKU0H21lUkzkyDYhjjjUM44lDMW5YxGOSNvHjHT6Lt6kd+vdlQ1fJzTAzBg
QcHGLazbthuAddt2U7BxCwPWOO0QLuBxWkjo7+wiOmkmDHQhRjyjXuC/wxlPZ91Z
Wv4YqLh3alyoKwyGpp5av2X4OxQbD0YWcJT7XXzJiXpkG43ZvutG16v3LOsR7Dg7
aKFtO+z0WwsQAS2qO3NTzazz+3N73mzK/Xpu5iLXpIQpo9a2t13hp++qvSc/LX2a
uwQBFgDGOPcFgXqAJYXb87QVzAdcY6zzimGW1xwoOXTXBGit+T/jrwEAjRDXhl0K
s5QAAAAASUVORK5CYII=}
},0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,1,0,
{1,1282f000-23b6-4887-87f4-9e8e79db3d32,"ДеревоТестовВыбор"},
{0},1,
{19,
{15,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,0},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{22,
{33,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоТестовКонтекстноеМенюКомандаВыполнитьТест",
{1,0},1,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{3,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACc0lEQVR42o2SzU8T
QRjGn91ut912WyzFQvnQtaSKy0c0RAyGkxEBEyQSEgr0sF61B4lZKZJA1IR/wBiR
ePOAJ2MKEREPHo0JrR4AEdAo8iEIZYGC/XaWi8Gi9ElmkpnM83vemXkpEGkBWjyU
ceJCnr3q8cfpASUe30KaotTJwbK2plLxanvVmU7v0Ejnk9lvfQkgmTag3mwqbTt7
+lZzZbEbqz8w4P80LI9NeeYj0c9pAep4g9ha5pTdZUek0HoITJLFzNpOsPvDhPfZ
8kr/gYBLBr3YfFKQW4oE6edmFOEIeRRowNAMfPPfh+9NTHoWovtXswuo5fRio1OQ
mwqPScHtCGIJsk3R0LIMrBkcVmM7wa63Ae/A18X+fQEX9XqxwXFUvuJwSJuROChG
A1anAWdkYOC1MGaaQZky8dQ/9eLm0CvPws6vL3sA1QRQLwhyo9MphakEdEYWBhMZ
PAuG5wGjBZTZCjonH8sr6xs13T0N75eW3uwBXC50yK5TxVKCNIUhGQIb2wZNMYA+
g5izQGfaQdlyEYrHcb631/Vubu45sYZ3ATUcJzaKx2WpKFeKL86AScQAPguUarLm
QWO1g9wHL8fGxj2Dvhuzm1uvUx6xucAiSzZKinIkMasAlMVOUnMIJBtBRYne9vke
9AUCd8nxYOo3cjqxRTgsu4sFKWbOBq2arTl/Un2+9tmNjdF/N5KRE1tLSCOdq5CS
aukWG9YVJdZJUh8FAneSf6WmtrLJVNJaWdHhqq1zg9JgxO8fv66mKsooDtAuQNDp
ctvKy695q6u7OgYH7z/0+3v+l5oCUMXStJHXavPXwuFpskykY1b1G2sx1hEMlQWh
AAAAAElFTkSuQmCC}
},0},1,
{"Pattern"},"",2,0,1,
{8,
{74,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоТестовКонтекстноеМенюКомандаВыполнитьТестExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"}
},1,0,0},1,
{19,
{16,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ДеревоТестовКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},0,1,0,0},6,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{18,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"ДеревоТестовСостояниеТеста",0,0,
{1,0},
{1,1,
{"ru","Состояние теста"}
},
{2,
{2},
{1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{3,0,
{0},"",-1,-1,1,0},
{3,0,
{0},"",-1,-1,1,0},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,1,0,0,1,
{3,3,
{0},"",-1,-1,0,
{
{#base64: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
7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJ
gUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5p
DoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85
ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7
F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/R
NtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9
MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo
1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5
sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWF
fevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTP
ZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJ
zs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ
+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3v
dy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtb
Ylu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ7
52PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7
nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9
zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9D
BY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfy
l5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT
0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADq
YAAAOpgAABdvkl/FRgAAAqNJREFUeNrsl7tPFFEUxn9nln0oo2BAMRT4KIiFj8JQ
kZgQLTC7DQH5CyyurbGztiO0S8FfgE6HsdEgJsYEpdAlYMaoPLKboMa4sovs7M4c
i2GNCRCuhRV8zc35km/OvWfu+c6MqCoHGQ4HHIcFOOgFaNmNFBF838+jahSQmJzo
7e29Y+MZIkJ2jHwYYSIFRyDhMPH4HtZ6nb2YR0MD2zuQxATXCndsDiUizOf68hqG
RlURESSRmLg6/XpH/l0L4Pt+XsAccV0QAVWq1arxfR9g301kx8if7mg3I/23SbWk
CBoBj15OmuzYDyu9zl7Kk+w0nLoFkgINYP2h4cVluPZuX/18ri9//ES7OXczSyKV
JAzqfH4ybeZzfTvy79ECao66LtXNTSqVCtXNTVzXBdTYvIEowgz1j7L0bYrXxUmW
vk0x1D9KFGGlR0ND1wiU38D35/F6eiTmbeRRZM4PZokKcwSvnhMV5jg/mEOjyFi1
AEC93gAFQUC3Y0uoQrE6QzlYRSP4FcbxP03cYBmkAgmAII5t8wPO2keiykbcEsEW
ztpH1NYDmkhnMvFpttvA2lkFfmx9oDUDGoE4ceyI7RMEZAOOdvDHA9houpGF3IHK
T1raOohUcUSg8jPmbaZAsVjywkadVDJJOp0mlUwSNuoUiyXPJn+tjFdYgFQKWlvj
tbAQ8zb6lS+hR3kRMsfiImSOQXkx5i2wXgs8/9MauG04JzrBbcP/tMZ6Ldihl91c
WUR6ZmZmxru7u4ebXKlU8gYGBu6q6qqFC/dcv894uo3h5gWqlfGePcBavzx1YfzM
qcRw8waufAm9s6PvrfXTN66Md6WTw80psF6re7mnb3fo9yoAQA9w8i/6K7BqO8b+
h97m8P+aXw7/BQ4/hQ8LcKDxewBb9EqnwRVYlgAAAABJRU5ErkJggg==}
},0},0,0,0,
{1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,0,
{0},1,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{0}
},
{0},1,
{19,
{19,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовСостояниеТестаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{76,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоТестовСостояниеТестаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{35,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовНаименованиеОбъекта",1,0,
{1,0},
{1,0},
{2,
{2},
{9}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{3,0,
{0},"",-1,-1,1,0},
{3,0,
{0},"",-1,-1,1,0},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{1,0},15,0,0,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{3,0,
{0},"",-1,-1,1,0},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{36,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовНаименованиеОбъектаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{77,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоТестовНаименованиеОбъектаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{24,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовКоличествоТестов",1,0,
{1,0},
{1,0},
{2,
{2},
{3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{3,0,
{0},"",-1,-1,1,0},
{3,0,
{0},"",-1,-1,1,0},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{1,0},5,0,0,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{3,0,
{0},"",-1,-1,1,0},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{25,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовКоличествоТестовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{78,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоТестовКоличествоТестовExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{27,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовИмя",1,0,
{1,0},
{1,0},
{2,
{2},
{4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{3,0,
{0},"",-1,-1,1,0},
{3,0,
{0},"",-1,-1,1,0},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{1,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{3,0,
{0},"",-1,-1,1,0},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{28,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовИмяКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{79,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоТестовИмяExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{30,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовПолныйПуть",1,0,
{1,0},
{1,0},
{2,
{2},
{5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{3,0,
{0},"",-1,-1,1,0},
{3,0,
{0},"",-1,-1,1,0},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{1,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{3,0,
{0},"",-1,-1,1,0},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{31,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовПолныйПутьКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{80,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоТестовПолныйПутьExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{40,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовВремяВыполнения",1,0,
{1,0},
{1,0},
{2,
{2},
{11}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{3,0,
{0},"",-1,-1,1,0},
{3,0,
{0},"",-1,-1,1,0},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{1,0},8,0,0,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{3,0,
{0},"",-1,-1,1,0},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{41,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовВремяВыполненияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{81,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоТестовВремяВыполненияExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{8,
{75,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоТестовExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},1,0,1,
{8,
{73,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаДеревоТестовExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{19,
{5,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаПутьКФайлуПарсинга",
{1,1,
{"ru","Группа путь к файлу парсинга"}
},
{1,1,
{"ru","Группа путь к файлу парсинга"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0}
},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{7,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ПутьКФайлуПарсинга",1,0,
{1,0},
{1,0},
{1,
{5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{3,0,
{0},"",-1,-1,1,0},
{3,0,
{0},"",-1,-1,1,0},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,0,2,2,2,
{1,0},0,
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},2,
{0},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},
{0},1,
{19,
{8,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПутьКФайлуПарсингаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{83,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ПутьКФайлуПарсингаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},1,0,1,
{8,
{82,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаПутьКФайлуПарсингаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},1,0,1,
{8,
{72,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаСтраницаТестированияExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},1,0,1,
{8,
{71,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаСтраницыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},"","",1,
{19,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{8,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},1,"",2,0},"
&НаКлиенте
Перем ОбъектНаКлиенте;

&НаКлиенте
Перем MiddleMan;

#Область ИнтерфейсАвтоматическихТестов
	
&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	
	ПараметрыТеста = Новый Структура(""ИмяТеста, Транзакция, Параметр"", ""Тест_ПроверитьСтруктуруПараметровЗапуска"", Ложь, """");
	СписокТестов.Добавить(ПараметрыТеста);
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Процедура Тест_ПроверитьСтруктуруПараметровЗапуска(Параметр) Экспорт
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровЗапуска(Параметр);
	ЮнитТест.ПроверитьТип(СтруктураПараметров, Тип(""Структура""));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектНаСервере = РеквизитФормыВЗначение(""Объект"");
	ЭтаФорма.Заголовок = ОбъектНаСервере.ЗаголовокФормы();
	
	Если ЗначениеЗаполнено(Параметры.Пути) Тогда
        ПутиПараметр = Параметры.Пути;
    КонецЕсли;
	
	//{ Состояния тестов - ВАЖЕН порядок заполнения в мЗначенияСостоянияТестов, используется в ЗапомнитьСамоеХудшееСостояние
    ЗначенияСостоянияТестов = Новый Структура;
    ЗначенияСостоянияТестов.Вставить(""НеВыполнялся"", 	0);
    ЗначенияСостоянияТестов.Вставить(""Прошел"", 			1);
    ЗначенияСостоянияТестов.Вставить(""НеРеализован"", 	2);
    ЗначенияСостоянияТестов.Вставить(""Сломался"", 		3);
	ЗначенияСостоянияТестов = Новый ФиксированнаяСтруктура(ЗначенияСостоянияТестов);
    //} 

    //{ Типы строк дерева тестов
    ЗначенияТиповСтроки = Новый Структура;
    ЗначенияТиповСтроки.Вставить(""КаталогТестов"", 	0);
    ЗначенияТиповСтроки.Вставить(""ТестовыйСлучай"", 	1);
    ЗначенияТиповСтроки.Вставить(""ТестовыйМетод"", 	2);
	ЗначенияТиповСтроки = Новый ФиксированнаяСтруктура(ЗначенияТиповСтроки);
    //} 
    
    ЗначениеМодульИлиФорма = Новый Структура;
    ЗначениеМодульИлиФорма.Вставить(""Модуль"", 	1);
    ЗначениеМодульИлиФорма.Вставить(""Форма"", 	2);
	ЗначениеМодульИлиФорма = Новый ФиксированнаяСтруктура(ЗначениеМодульИлиФорма);
		
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбъектНаКлиенте = ПолучитьФорму(""ВнешняяОбработка.xddTestRunner.Форма.УправляемаяФормаПеренаправления"");	
	
	//Если ОбъектНаКлиенте.ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
	//	Возврат;
	//КонецЕсли;

	//Если ЗначениеЗаполнено(ПутиПараметр) Тогда
	//	ПользовательскиеПутиСохр = Пути;
	//	Пути = ПутиПараметр;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Пути) Тогда
	//	ОбновитьНадписьПути();
	//	
	//	Попытка
	//		LoadAllTests();
	//	Исключение
	//		текстОшибки = ОписаниеОшибки();
	//		ВывестиСообщение(""ОШИБКА загрузки тестов: ""+текстОшибки);
	//	КонецПопытки;
	//КонецЕсли;
	
	//Если Не ПустаяСтрока(ПараметрЗапуска) Тогда
	//
	//	СтруктураПараметров = ПолучитьСтруктуруПараметровЗапуска(ПараметрЗапуска, "";"");
	//	
	//	Если СтруктураПараметров.Свойство(""pathToCF"", ПутьКФайлуПарсинга) Тогда
	//		
	//		ЗагрузитьТесты(ДеревоТестов, ПутьКФайлуПарсинга);
	//		
	//	Иначе
	//		
	//		Если СтруктураПараметров.Свойство(""ЗавершитьРаботуПосле"") Тогда
	//			Отказ = Истина;	
	//			ЗавершитьРаботуСистемы(Ложь);
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//			
	//КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
//	
//	Если СтруктураПараметров.Свойство(""ЗавершитьРаботуПосле"") Тогда
//		ЗавершитьРаботуСистемы(Ложь);
//	КонецЕсли;
//	
//КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицыФормы_ДеревоТестов

&НаКлиенте
Процедура ДеревоТестовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные.ТипСтроки = 2 И Не ПустаяСтрока(ТекущиеДанные.ПолныйПуть) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить(""Заголовок"", НСтр(""ru='Сообщение об ошибке'""));
		ПараметрыФормы.Вставить(""ТекстСообщения"", ТекущиеДанные.ПолныйПуть);
		ОткрытьФорму(""ВнешняяОбработка.V8Commit.Форма.ФормаСообщенияОбОшибке"", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;                                     
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнитьТест(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьВсеТесты(Команда)
	
	ОчиститьСостояниеТестов(ДеревоТестов);
	ВыполнитьВсеТесты(ДеревоТестов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьНаборТестов(Команда)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = """";
	Фильтр = НСтр(""ru = 'Текст'; en = 'Text'"")
	    + ""(*.epf, *.erf)|*.epf; *.erf"";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = ""Выберите файл"";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКФайлуПарсинга = ДиалогОткрытияФайла.ПолноеИмяФайла;
		ДеревоТестов.ПолучитьЭлементы().Очистить();
		ЗагрузитьТесты(ДеревоТестов, ПутьКФайлуПарсинга);
	Иначе
	    Предупреждение(НСтр(""ru = 'Файл не выбран!'; en = 'File not selected!'""));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьНаборыТестов(Команда)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = """";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = ""Выберите каталог"";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКФайлуПарсинга = ДиалогОткрытияФайла.Каталог;
		ДеревоТестов.ПолучитьЭлементы().Очистить();
		ЗагрузитьТесты(ДеревоТестов, ПутьКФайлуПарсинга);	
	Иначе
	    Предупреждение(НСтр(""ru = 'Каталог не выбран!'; en = 'Catalog not selected!'""));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерезагрузитьТесты(Команда)
	
	ДеревоТестов.ПолучитьЭлементы().Очистить();
	ЗагрузитьТесты(ДеревоТестов, ПутьКФайлуПарсинга);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершитьРаботу(Команда)
	Закрыть(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОПроекте(Команда)
	
	ЗапуститьПриложение(""https://github.com/xUnitFor1C/xUnitFor1C"");
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииАвтоматическогоПарсинга
	
&НаКлиенте
Функция ПолучитьСтруктуруПараметровЗапуска(Знач Строка, Разделитель = ""."") 
   
	СтруктураПараметров = Новый Структура;
	
    СтрокаЗамены 	= СтрЗаменить(Строка, Разделитель, Символы.ПС);
	КоличествоСтрок = СтрЧислоСтрок(СтрокаЗамены);
	Для i=1 По КоличествоСтрок Цикл
		
		Строка = СтрПолучитьСтроку(СтрокаЗамены, i);
		Если ПустаяСтрока(Строка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(Строка) = ВРег(""decompile"") Тогда
			СтруктураПараметров.Вставить(""decompile"");
			Продолжить;
		КонецЕсли;
		
		Если ВРег(Строка) = ВРег(""ЗавершитьРаботуПосле"") Тогда
			СтруктураПараметров.Вставить(""ЗавершитьРаботуПосле"");
			Продолжить;
		КонецЕсли;
		
		Если ВРег(Строка) = ВРег(""pathToCF"") И i + 1 <= КоличествоСтрок Тогда
			СтруктураПараметров.Вставить(""pathToCF"", СтрПолучитьСтроку(СтрокаЗамены, i + 1));
		КонецЕсли;
		
		Если ВРег(Строка) = ВРег(""pathOut"") И i + 1 <= КоличествоСтрок Тогда
			СтруктураПараметров.Вставить(""pathOut"", СтрПолучитьСтроку(СтрокаЗамены, i + 1));	
		КонецЕсли;
		 
	КонецЦикла;
	
 	Возврат СтруктураПараметров;
   
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииПроведенияТестирования

&НаКлиенте
Процедура Проверить(_Истина, ДопСообщениеОшибки = """") Экспорт
	Если Не _Истина Тогда
		СообщениеОшибки = ""Переданный параметр (""+Формат(_Истина, ""БЛ=ложь; БИ=истина"")+"") не является Истиной, а хотели, чтобы являлся."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИстину(_Истина, ДопСообщениеОшибки = """") Экспорт
	Проверить(_Истина, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЛожь(_Ложь, ДопСообщениеОшибки = """") Экспорт
	Если _Ложь Тогда
		СообщениеОшибки = ""Переданный параметр (""+Формат(_Ложь, ""БЛ=ложь; БИ=истина"")+"") не является Ложью, а хотели, чтобы являлся."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенство(_1, _2, ДопСообщениеОшибки = """") Экспорт
	Если _1 <> _2 Тогда
		СообщениеОшибки = ""Сравниваемые значения (""+_1+""; ""+_2+"") не равны, а хотели, чтобы были равны."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеРавенство(_1, _2, ДопСообщениеОшибки = """") Экспорт
	Если _1 = _2 Тогда
		СообщениеОшибки = ""Сравниваемые значения (""+_1+""; ""+_2+"") равны, а хотели, чтобы были не равны."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольше(_Больше, _Меньше, ДопСообщениеОшибки = """") Экспорт
	Если _Больше <= _Меньше Тогда
		СообщениеОшибки = ""Первый параметр (""+_Больше+"") меньше или равен второму (""+_Меньше+"") а хотели, чтобы был больше."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольшеИлиРавно(_Больше, _Меньше, ДопСообщениеОшибки = """") Экспорт
	Если _Больше < _Меньше Тогда
		СообщениеОшибки = ""Первый параметр (""+_Больше+"") меньше второго (""+_Меньше+"") а хотели, чтобы был больше или равен."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньше(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = """") Экспорт
	Если проверяемоеЗначение1 >= проверяемоеЗначение2 Тогда
		ВызватьИсключение ""Значение <""+проверяемоеЗначение1+""> больше или равно, чем <""+проверяемоеЗначение2+"">, а ожидалось меньше""+
				ФорматДСО(СообщениеОбОшибке);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньшеИлиРавно(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = """") Экспорт
	Если проверяемоеЗначение1 > проверяемоеЗначение2 Тогда
		ВызватьИсключение ""Значение <""+проверяемоеЗначение1+""> больше, чем <""+проверяемоеЗначение2+"">, а ожидалось меньше или равно""+
				ФорматДСО(СообщениеОбОшибке);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнилось(СтрокаВыполнения, ДопСообщениеОшибки = """") Экспорт
	Попытка
		Выполнить(СтрокаВыполнения);
		Упало = Ложь;
	Исключение
		Упало = Истина;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Упало Тогда
		СообщениеОшибки = ""Хотели, чтобы код """"""+СтрокаВыполнения+"""""" выполнился, а он упал с ошибкой """"""+ПолученноеОписаниеОшибки+""""""."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодВыполнился(Объект, ИмяМетода, ДопСообщениеОшибки = """") Экспорт
	СтрокаВыполнения = ""Объект.""+ИмяМетода+""()"";
	
	Попытка
		Выполнить(СтрокаВыполнения);
		Упало = Ложь;
	Исключение
		Упало = Истина;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Упало Тогда
		СообщениеОшибки = ""Хотели, чтобы код """"""+СтрокаВыполнения+"""""" выполнился, а он упал с ошибкой """"""+ПолученноеОписаниеОшибки+""""""."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеВыполнилось(СтрокаВыполнения, ОжидаемоеОписаниеОшибки, ДопСообщениеОшибки = """") Экспорт
	Попытка
		Выполнить(СтрокаВыполнения);
		Успех = Истина;
	Исключение
		Успех = Ложь;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Успех Тогда
		ВызватьИсключение(""Хотели, чтобы код """"""+СтрокаВыполнения+"""""" упал, а он выполнился"" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если ОжидаемоеОписаниеОшибки <> ПолученноеОписаниеОшибки Тогда
		ВызватьИсключение(""Хотели, чтобы код """"""+СтрокаВыполнения+"""""" упал с сообщением об ошибке """"""+ОжидаемоеОписаниеОшибки+"""""", а он упал с сообщением """"""+ПолученноеОписаниеОшибки+""""""."" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодНеВыполнился(Объект, ИмяМетода, ОжидаемоеОписаниеОшибки, ДопСообщениеОшибки = """") Экспорт
	СтрокаВыполнения = ""Объект.""+ИмяМетода+""()"";
	
	Попытка
		Выполнить(СтрокаВыполнения);
		Успех = Истина;
	Исключение
		Успех = Ложь;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Успех Тогда
		ВызватьИсключение(""Хотели, чтобы код """"""+СтрокаВыполнения+"""""" упал, а он выполнился"" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если ОжидаемоеОписаниеОшибки <> ПолученноеОписаниеОшибки Тогда
		ВызватьИсключение(""Хотели, чтобы код """"""+СтрокаВыполнения+"""""" упал с сообщением об ошибке """"""+ОжидаемоеОписаниеОшибки+"""""", а он упал с сообщением """"""+ПолученноеОписаниеОшибки+""""""."" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = """") Экспорт
    Попытка
        фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
    Исключение
        Возврат;
    КонецПопытки; 
    Если НЕ фЗаполнено Тогда
        ВызватьИсключение ""Значение (""+ПроверяемоеЗначение+"") не заполнено, а ожидалась заполненность"" + ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = """") Экспорт
	СообщениеОшибки = ""Значение (""+ПроверяемоеЗначение+"") заполнено, а ожидалась незаполненность"" + ФорматДСО(ДопСообщениеОшибки);
	Попытка
        фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
    Исключение
        ВызватьИсключение СообщениеОшибки;
    КонецПопытки; 
    Если фЗаполнено Тогда
        ВызватьИсключение СообщениеОшибки;
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТип(значение, ТипИлиИмяТипа, ДопСообщениеОшибки = """") Экспорт
    Если ТипЗнч(ТипИлиИмяТипа) = Тип(""Строка"") Тогда
        искомыйТип = Тип(ТипИлиИмяТипа);
    ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип(""Тип"") Тогда
        искомыйТип = ТипИлиИмяТипа;
    Иначе
        ВызватьИсключение ""ПроверитьТип: Тип значения параметра ТипИлиИмяТипа должен быть <Тип> или <Строка>, а получили <""+ ТипЗнч(ТипИлиИмяТипа) + "">"" + ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
    Если ТипЗнч(значение) <> искомыйТип Тогда
        ВызватьИсключение ""Типом значения <""+значение+""> является <""+ТипЗнч(значение)+"">, а ожидался тип <""+ТипИлиИмяТипа+"">.""+ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВхождение(строка, подстрокаПоиска, ДопСообщениеОшибки = """") Экспорт
	Если Найти(строка, подстрокаПоиска) = 0 Тогда
		СообщениеОшибки = ""Искали в <""+строка+""> подстроку <""+подстрокаПоиска+"">, но не нашли."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВалидностьЗапроса(ТекстЗапроса, ДопСообщениеОшибки = """") Экспорт
	ПроверитьВалидностьЗапросаНаСервере(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

&НаСервере
Процедура ПроверитьВалидностьЗапросаНаСервере(ТекстЗапроса, ДопСообщениеОшибки)
	РеквизитФормыВЗначение(""Объект"").ПроверитьВалидностьЗапроса(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры // ПроверитьВалидностьЗапросаНаСервере()

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииЗагрузкиВыполненияТестов

&НаКлиенте
Процедура ЗагрузитьТесты(РодительскаяСтрока, ПутьКФайлу)
	
	ОбъектФайл = Новый Файл(ПутьКФайлу);
	Если ОбъектФайл.Существует() Тогда
		
		GUID = Строка(Новый УникальныйИдентификатор);	
		Если ОбъектФайл.ЭтоКаталог() Тогда
			
			ПараметрыСтроки = ПолучитьНовуюСтруктуруПараметровСтроки();
			ПараметрыСтроки.Вставить(""GUID"", GUID);
			ПараметрыСтроки.Вставить(""НаименованиеОбъекта"", ОбъектФайл.Имя);
			ПараметрыСтроки.Вставить(""ТипОбъекта"", 			0);
			ПараметрыСтроки.Вставить(""СостояниеТеста"", 		0);
			ПараметрыСтроки.Вставить(""КоличествоТестов"", 	0);
			ПараметрыСтроки.Вставить(""ТипСтроки"", 			0);
			ПараметрыСтроки.Вставить(""ПолныйПуть"", 			ОбъектФайл.ПолноеИмя);
			
			НоваяСтрока = ДобавитьСтрокуДереваТестов(РодительскаяСтрока, ПараметрыСтроки);
			
			НайденныеФайлы = НайтиФайлы(ОбъектФайл.ПолноеИмя, ""*"", Ложь);
			Для каждого Файл из НайденныеФайлы Цикл
				ЗагрузитьТесты(НоваяСтрока, Файл.ПолноеИмя);		
			КонецЦикла;
			
		ИначеЕсли ОбъектФайл.Расширение = "".epf"" ИЛИ ОбъектФайл.Расширение = "".erf"" Тогда
			
			Если ТипЗнч(РодительскаяСтрока) = Тип(""ДанныеФормыДерево"") Тогда
				ДополнительныеПараметры = Новый Структура(""GUID, Расширение"", GUID, ОбъектФайл.Расширение);	
			Иначе
				ДополнительныеПараметры = Новый Структура(""GUID, Расширение, Идентификатор"", GUID, ОбъектФайл.Расширение, РодительскаяСтрока.ПолучитьИдентификатор());
			КонецЕсли;
			Оповещение = Новый ОписаниеОповещения(""ВыполнитьПодключениеОбъектаНаКлиенте"", ЭтаФорма, ДополнительныеПараметры);
			
			//Функция на веб-клиенте может выполнятся асинхронно
			НачатьПомещениеФайла(Оповещение, , ОбъектФайл.ПолноеИмя, Ложь, УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключениеОбъектаНаКлиенте(Результат, АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Перем GUID;
	Если ТипЗнч(ДополнительныеПараметры) = Тип(""Структура"") Тогда
		ДополнительныеПараметры.Свойство(""GUID"", GUID);
	КонецЕсли;

	Идентификатор = ВыполнитьПодключениеОбъектаНаСервере(АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры);
	СтрокаРодитель = ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
	
	РезультатПоиска = ТаблицаИменаФорм.НайтиСтроки(Новый Структура(""GUID"", GUID));
	Для Каждого ЭлементПоиска Из РезультатПоиска Цикл
		ЗагрузитьТестыИзФормыОбъекта(ЭтаФорма, СтрокаРодитель, ЭлементПоиска, Новый Структура(""АвтоТест""), ДополнительныеПараметры);
	КонецЦикла;	
	
	СтрокаРодитель.КоличествоТестов = ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаРодитель);
	
	// Для совместимости с Веб-клиентом, так как выполнение функции ""НачатьПомещениеФайла"" может выполнятся асинхронно
	СтрокаВерхнегоУровня = СтрокаРодитель.ПолучитьРодителя();	
	Пока СтрокаВерхнегоУровня <> Неопределено Цикл
		СтрокаВерхнегоУровня.КоличествоТестов = СтрокаВерхнегоУровня.КоличествоТестов + СтрокаРодитель.КоличествоТестов;
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.ПолучитьРодителя();
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ВыполнитьПодключениеОбъектаНаСервере(АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры)

	Перем GUID, Расширение, Идентификатор;
	Если ТипЗнч(ДополнительныеПараметры) = Тип(""Структура"") Тогда
		ДополнительныеПараметры.Свойство(""GUID"", GUID);
		ДополнительныеПараметры.Свойство(""Расширение"", Расширение);
		ДополнительныеПараметры.Свойство(""Идентификатор"", Идентификатор);
	КонецЕсли;
		
	Если Расширение = "".epf"" Тогда
		ТипОбъекта = 1;
		ИмяОбъекта = ВнешниеОбработки.Подключить(АдресХранилища, GUID, Ложь);
		ВнешнийОбъект = ВнешниеОбработки.Создать(GUID);
	ИначеЕсли Расширение = "".erf"" Тогда
		ТипОбъекта = 2;
		ИмяОбъекта = ВнешниеОтчеты.Подключить(АдресХранилища, GUID, Ложь);
		ВнешнийОбъект = ВнешниеОтчеты.Создать(GUID);  		
	КонецЕсли;
	
	МетаданныеОбъекта = ВнешнийОбъект.Метаданные();
	Для каждого Форма Из МетаданныеОбъекта.Формы Цикл
		НоваяЗапись = ТаблицаИменаФорм.Добавить();
		НоваяЗапись.ИмяОбъекта = ИмяОбъекта; 
		НоваяЗапись.ИмяФормы = Форма.Имя;
		НоваяЗапись.GUID = GUID;
	КонецЦикла;
	
	
	ПараметрыСтроки = ПолучитьНовуюСтруктуруПараметровСтроки();
	ПараметрыСтроки.Вставить(""GUID"", GUID);
	ПараметрыСтроки.Вставить(""НаименованиеОбъекта"", МетаданныеОбъекта.Синоним);
	ПараметрыСтроки.Вставить(""ТипОбъекта"", 			ТипОбъекта);
	ПараметрыСтроки.Вставить(""СостояниеТеста"", 		0);
	ПараметрыСтроки.Вставить(""КоличествоТестов"", 	0);
	ПараметрыСтроки.Вставить(""ТипСтроки"", 			1);
	ПараметрыСтроки.Вставить(""ПолныйПуть"", 			ВыбранноеИмяФайла);
	Если Идентификатор = Неопределено Тогда
		НоваяСтрока = ДобавитьСтрокуДереваТестов(ДеревоТестов, ПараметрыСтроки);	
	Иначе
		НоваяСтрока = ДобавитьСтрокуДереваТестов(ДеревоТестов.НайтиПоИдентификатору(Идентификатор), ПараметрыСтроки);
	КонецЕсли;
	
	ЗагрузитьТестыИзМодуляОбъекта(РеквизитФормыВЗначение(""Объект""), НоваяСтрока, ВнешнийОбъект);
	
	Возврат НоваяСтрока.ПолучитьИдентификатор();
				
КонецФункции 

 
&НаКлиенте
Процедура ЗагрузитьТестыИзФормыОбъекта(ЮнитОбъект, Родитель, ВнешнийОбъект, ПараметрыФормы, ДополнительныеПараметры)

	Перем Расширение;	
	Если ТипЗнч(ДополнительныеПараметры) = Тип(""Структура"") Тогда
		ДополнительныеПараметры.Свойство(""Расширение"", Расширение);
	КонецЕсли;
	
	ПараметрыСтроки = ПолучитьНовуюСтруктуруПараметровСтроки();
	ПараметрыСтроки.Вставить(""ТипСтроки"", 0);	
	ПараметрыСтроки.Вставить(""ТипОбъекта"", 4);
	ПараметрыСтроки.Вставить(""СостояниеТеста"", 0);
	ПараметрыСтроки.Вставить(""НаименованиеОбъекта"", ВнешнийОбъект.ИмяФормы);
	КореньФормыОбъекта = ДобавитьСтрокуДереваТестов(Родитель, ПараметрыСтроки);
		
	Попытка
		
		Если 		Расширение = "".epf"" Тогда
			ВнешнийОбъект = ПолучитьФорму(""ВнешняяОбработка."" 	+ ВнешнийОбъект.ИмяОбъекта + "".Форма."" + ВнешнийОбъект.ИмяФормы, ПараметрыФормы, ЭтаФорма);
		ИначеЕсли 	Расширение = "".erf"" Тогда
			ВнешнийОбъект = ПолучитьФорму(""ВнешнийОтчет."" 		+ ВнешнийОбъект.ИмяОбъекта + "".Форма."" + ВнешнийОбъект.ИмяФормы, ПараметрыФормы, ЭтаФорма);	
		Иначе
			КореньФормыОбъекта.СостояниеТеста = 3;
			Возврат; 
		КонецЕсли;
		
	Исключение
		
		КореньФормыОбъекта.СостояниеТеста = 3;
		КореньФормыОбъекта.ПолныйПуть = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат;

	КонецПопытки;
	
	
	Попытка
    	МассивТестовыхМетодов = ВнешнийОбъект.ПолучитьСписокТестов(ЮнитОбъект);
	Исключение
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЕстьОшибка_МетодОбъектаНеОбнаружен = ЮнитОбъект.ЕстьОшибка_МетодОбъектаНеОбнаружен(ПредставлениеОшибки, ""ПолучитьСписокТестов"");
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен Тогда
			ЮнитОбъект.ВывестиОшибку(""Не удалось загрузить список тестов для модуля объекта:
				|  Ошибка получения списка тестовых случаев: "" + ОписаниеОшибки());
			КореньФормыОбъекта.СостояниеТеста = 3;
		Иначе
			ЮнитОбъект.ВывестиОшибку(ПредставлениеОшибки);
			КореньФормыОбъекта.СостояниеТеста = 0;	
		КонецЕсли;
		КореньФормыОбъекта.ПолныйПуть = ПредставлениеОшибки;
		Возврат;
		
	КонецПопытки;
	
	ВыполнитьЗагрузкуСтрокДереваТестов(КореньФормыОбъекта, 4, МассивТестовыхМетодов, ПараметрыСтроки);
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьТестыИзМодуляОбъекта(ЮнитОбъект, Родитель, ВнешнийОбъект)	
	
	ПараметрыСтроки = ПолучитьНовуюСтруктуруПараметровСтроки();
	ПараметрыСтроки.Вставить(""ТипСтроки"", 0);	
	ПараметрыСтроки.Вставить(""ТипОбъекта"", 3);
	ПараметрыСтроки.Вставить(""СостояниеТеста"", 0);
	ПараметрыСтроки.Вставить(""НаименованиеОбъекта"", ""Модуль объекта"");
	КореньМодуляОбъекта = ДобавитьСтрокуДереваТестов(Родитель, ПараметрыСтроки);
		
	Попытка
		МассивТестовыхМетодов = ВнешнийОбъект.ПолучитьСписокТестов(ЮнитОбъект);
	Исключение
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЕстьОшибка_МетодОбъектаНеОбнаружен = ЮнитОбъект.ЕстьОшибка_МетодОбъектаНеОбнаружен(ПредставлениеОшибки, ""ПолучитьСписокТестов"");
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен Тогда
			ЮнитОбъект.ВывестиОшибку(""Не удалось загрузить список тестов для модуля объекта:
				|  Ошибка получения списка тестовых случаев: "" + ОписаниеОшибки());
			КореньМодуляОбъекта.СостояниеТеста = 3;
		Иначе
			ЮнитОбъект.ВывестиОшибку(ПредставлениеОшибки);
			КореньМодуляОбъекта.СостояниеТеста = 0;	
		КонецЕсли;
		КореньМодуляОбъекта.ПолныйПуть = ПредставлениеОшибки;
		Возврат;
		
	КонецПопытки;
	
	ВыполнитьЗагрузкуСтрокДереваТестов(КореньМодуляОбъекта, 3, МассивТестовыхМетодов, ПараметрыСтроки);
	
КонецПроцедуры // ЗагрузитьТестыИзМодуляОбъекта()


&НаКлиентеНаСервереБезКонтекста
Процедура ВыполнитьЗагрузкуСтрокДереваТестов(Родитель, ТипОбъекта, МассивТестовыхМетодов, ПараметрыСтроки)

	Для каждого ЭлементМассива Из МассивТестовыхМетодов Цикл
		
		ПараметрыСтроки = ПолучитьНовуюСтруктуруПараметровСтроки();
		Если ТипЗнч(ЭлементМассива) = Тип(""Строка"") Тогда
			
			ПараметрыСтроки.Вставить(""НаименованиеТеста"", ЭлементМассива);
			ПараметрыСтроки.Вставить(""НаименованиеОбъекта"", ЭлементМассива);
			
		Иначе
			
			ПараметрыСтроки.Вставить(""НаименованиеТеста"", ЭлементМассива.ИмяТеста);
			ПараметрыСтроки.Вставить(""НаименованиеОбъекта"", ЭлементМассива.ИмяТеста);
			
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(ЭлементМассива);
			ПараметрыСтроки.Вставить(""ПараметрыТеста"", СписокЗначений);
				
			ОписаниеПараметра = ""<пусто>"";
			Если ЭлементМассива.Свойство(""Параметр"") Тогда
				ОписаниеПараметра = """" + ЭлементМассива.Параметр;
			КонецЕсли;
			ПараметрыСтроки.Вставить(""НаименованиеТеста"", ЭлементМассива.ИмяТеста +  ""( "" + ОписаниеПараметра + "" )"");

		КонецЕсли;
		ПараметрыСтроки.Вставить(""ТипОбъекта"", 			ТипОбъекта);
		ПараметрыСтроки.Вставить(""СостояниеТеста"", 		0);
		ПараметрыСтроки.Вставить(""КоличествоТестов"", 	1);
		ПараметрыСтроки.Вставить(""ТипСтроки"", 			2);
			
		ДобавитьСтрокуДереваТестов(Родитель, ПараметрыСтроки);
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьЗагрузкуСтрокиДереваТестов()

// Функция добавляет новую строку в ДеревоЗначений, которая соответствует тестовому случаю
//
// Параметры:
//	Родитель - ДанныеФормыЭлементДерева - Строка дерева значений которой будет подчинен новый элемент
//  ПараметрыСтроки
//		* СостояниеТеста 		- Число(1,0Н) 		- Описывает в каком состояние выполнения тестов
//			* 0 - Тест не выполнялся
//			* 1 - Тест успешно завершен
//			* 2 - Тест не реализирован
//			* 3 - Тест провален
//		* НаименованиеОбъекта   - Строка			- Наименование объекта
//		* КоличествоТестов		- Число				- Количество тестов
//		* ТипОбъекта			- Число(1,0Н)		- Описывает тип объекта данной ноды
//			* 0 - Каталог файловой системы
//			* 1 - Внешняя обработка
//			* 2 - Внешний отчет
//			* 3 - Модуль объекта
//			* 4 - Модуль формы
//		* НаименованиеТеста 	- Строка			- Наименование тестового случая
//		* ПолныйПуть			- Строка			- Путь к объекту в файловой системе
//		* ТипСтроки				- Число(1,0Н)  		- Тип картинки строки дерева значений
//			* 0 - Отображение в виде папки
//			* 1 - Отображение в виде обработки
//			* 2 - Отображение в виде функции
//		* GUID 					- Строка(36)				- Уникальный идетификатор внешней обработки или внешнего отчета
//		* ПараметрыТеста		- СписокЗначений 			- Список с параметрами для передачи их в тестовые случаи
//		* НаименованиеТеста		- Строка					- Наименование тестового случая
//		* ТипОбъекта			- Число						- Описывает тип объекта данной ноды
//		* СостояниеТеста		- Число						- Описывает в каком состояние данного теста
//		* ТипСтроки				- Число						- Тип картинки строки дерева значений
//		* ПараметрыТеста		- Неопределено, Структура 	- Параметры тестового случая
//
// Возвращаемое значение:
//	НоваяСтрока - ДанныеФормыЭлементДерева - Новая строка в дереве тестов
//
&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьСтрокуДереваТестов(Родитель, ПараметрыСтроки)

	НоваяСтрока = Родитель.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыСтроки);
	Возврат НоваяСтрока;
	
КонецФункции // ДобавитьСтрокуДереваТестовНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНовуюСтруктуруПараметровСтроки()
	
	ПараметрыСтроки = Новый Структура;
	ПараметрыСтроки.Вставить(""GUID"");
	ПараметрыСтроки.Вставить(""НаименованиеТеста"");
	ПараметрыСтроки.Вставить(""НаименованиеОбъекта"");
	ПараметрыСтроки.Вставить(""ТипОбъекта"");
	ПараметрыСтроки.Вставить(""СостояниеТеста"");
	ПараметрыСтроки.Вставить(""КоличествоТестов"");
	ПараметрыСтроки.Вставить(""ТипСтроки"");
	ПараметрыСтроки.Вставить(""ПараметрыТеста"");
	ПараметрыСтроки.Вставить(""ПолныйПуть"");
	Возврат ПараметрыСтроки;
	
КонецФункции // ПолучитьНовуюСтруктуруПараметровСтроки()



&НаКлиенте
Процедура ВывестиОшибку(Ошибка) Экспорт
	
	ТипОбъектаОшибка = ТипЗнч(Ошибка);	
	Если ТипОбъектаОшибка = Тип(""Структура"") Тогда
		Сообщить(""["" + Ошибка.ИмяТестовогоНабора + "": "" + Ошибка.ИмяТестовогоСлучая + ""] "" + Ошибка.Описание, СтатусСообщения.Важное);
	ИначеЕсли ТипОбъектаОшибка = Тип(""ИнформацияОбОшибке"") Тогда
		Сообщить(Ошибка.Описание, СтатусСообщения.Важное);
	Иначе
		Сообщить(Ошибка, СтатусСообщения.Важное);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте 
Процедура ВыполнитьВсеТесты(ЭлементДереваТестов)
	
	ЭлементыДерева = ЭлементДереваТестов.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если ЭлементДерева.ТипОбъекта = 0 Тогда
			ВыполнитьВсеТесты(ЭлементДерева);
		Иначе
			ВыполнитьТестыОбъекта(ЭлементДерева);		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте 
Процедура ВыполнитьТестыОбъекта(ЭлементДереваТестов)
	
	ТипОбъекта = ЭлементДереваТестов.ТипОбъекта;
	ЭлементыДереваМодулей = ЭлементДереваТестов.ПолучитьЭлементы();
	Для каждого ЭлементДереваМодулей Из ЭлементыДереваМодулей Цикл
		
		Если 	  ЭлементДереваМодулей.ТипОбъекта = 3 Тогда // Модуль объекта
			ВыполнитьТестыНаСервере(ЭлементДереваМодулей.ПолучитьИдентификатор(), ЭлементДереваТестов.ТипОбъекта, ЭлементДереваТестов.GUID);
		ИначеЕсли ЭлементДереваМодулей.ТипОбъекта = 4 Тогда // Модуль формы
			ВыполнитьТестыНаКлиенте(ЭлементДереваМодулей, ЭлементДереваТестов.ТипОбъекта, ЭлементДереваТестов.GUID);
		КонецЕсли;
		ЭлементДереваТестов.СостояниеТеста = Макс(ЭлементДереваМодулей.СостояниеТеста, ЭлементДереваТестов.СостояниеТеста);
		
	КонецЦикла;
	
	СтрокаВерхнегоУровня = ЭлементДереваТестов.ПолучитьРодителя();	
	Пока СтрокаВерхнегоУровня <> Неопределено Цикл
		СтрокаВерхнегоУровня.СостояниеТеста = Макс(СтрокаВерхнегоУровня.СостояниеТеста, ЭлементДереваТестов.СостояниеТеста);
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.ПолучитьРодителя();
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТестыНаКлиенте(ЭлементДереваМодулей, ТипОбъекта, GUID)
	
	ДеревоТесты = ЭлементДереваМодулей.ПолучитьЭлементы();
	Если ДеревоТесты.Количество() Тогда
		
		ПараметрыФормы = Новый Структура(""АвтоТест"");
		Если 		ТипОбъекта = 1 Тогда
			ВнешнийОбъект = ПолучитьФорму(""ВнешняяОбработка."" + GUID + "".Форма."" + ЭлементДереваМодулей.НаименованиеОбъекта, ПараметрыФормы, ЭтаФорма);
		ИначеЕсли 	ТипОбъекта = 2 Тогда
			ВнешнийОбъект = ПолучитьФорму(""ВнешнийОтчет."" 	  + GUID + "".Форма."" + ЭлементДереваМодулей.НаименованиеОбъекта, ПараметрыФормы, ЭтаФорма);	
		КонецЕсли;
		
		ЮнитОбъект = ЭтаФорма;
		ВнешнийОбъект.ПолучитьСписокТестов(ЮнитОбъект);
		МаксимальноеСостояниеТеста = 0;
		
		Для каждого СтрокаДереваТестов Из ДеревоТесты Цикл
			ТекущаяДата = ТекущаяДата();
			ЕстьПараметры = СтрокаДереваТестов.ПараметрыТеста.Количество() <> 0;
			ЕстьТранзакция = Ложь;
			ИмяТестовогоСлучая = СтрокаДереваТестов.НаименованиеОбъекта;
			СписокПараметрыТеста = СтрокаДереваТестов.ПараметрыТеста;
			
			Если ЕстьПараметры Тогда
				ПараметрыТеста = ?(ТипЗнч(СписокПараметрыТеста) = Тип(""Структура""), СписокПараметрыТеста, СписокПараметрыТеста[0].Значение);
				Если ПараметрыТеста.Свойство(""Транзакция"", ЕстьТранзакция) Тогда
					ЕстьТранзакция = ТипЗнч(ЕстьТранзакция) = Тип(""Булево"") И ЕстьТранзакция;
				Иначе
					ЕстьТранзакция = Ложь;
				КонецЕсли;

				Если ЕстьТранзакция Тогда
					#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
						НачатьТранзакцию();
					#КонецЕсли
				КонецЕсли;
			КонецЕсли;
			
			ЮнитОбъект.ВыполнитьПроцедуруТестовогоСлучая(ВнешнийОбъект, ""ПередЗапускомТеста"", ИмяТестовогоСлучая, СтрокаДереваТестов);
			МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
			Если СтрокаДереваТестов.СостояниеТеста = 3 Тогда // Тест сломался
				
				Если ЕстьТранзакция Тогда
					#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
						Если ТранзакцияАктивна() Тогда
							ОтменитьТранзакцию();
						КонецЕсли;
					#КонецЕсли
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
				
			ПереданПараметрТеста = Ложь;
			СтрокаПараметров = """";
			ПараметрТеста = """";
			Если ЕстьПараметры Тогда
				ПараметрыТеста = ?(ТипЗнч(СписокПараметрыТеста) = Тип(""Структура""), СписокПараметрыТеста, СписокПараметрыТеста[0].Значение);
				ПереданПараметрТеста = ПараметрыТеста.Свойство(""Параметр"", ПараметрТеста);
				
				Если ПереданПараметрТеста Тогда
					СтрокаПараметров = ""ПараметрТеста"";	
				КонецЕсли;
			КонецЕсли;
			

			Попытка
				
				Выполнить(""ВнешнийОбъект."" + ИмяТестовогоСлучая + ""("" + СтрокаПараметров + "");"");
				
				СтрокаДереваТестов.СостояниеТеста = 1;
				МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
				
			Исключение		
				
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				СтрокаДереваТестов.ПолныйПуть = ПредставлениеОшибки;
				Если ЮнитОбъект.ЕстьОшибка_МетодОбъектаНеОбнаружен(ПредставлениеОшибки, ИмяТестовогоСлучая) Тогда
					СтрокаДереваТестов.СостояниеТеста = 2;			
				Иначе
					СтрокаДереваТестов.СостояниеТеста = 3;
				КонецЕсли;
				МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
				
				Если ЕстьТранзакция Тогда
					#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
						Если ТранзакцияАктивна() Тогда
							ОтменитьТранзакцию();
						КонецЕсли;
					#КонецЕсли
				КонецЕсли;
				
				Продолжить;
				
			КонецПопытки;	
			
			ЮнитОбъект.ВыполнитьПроцедуруТестовогоСлучая(ВнешнийОбъект, ""ПослеЗапускаТеста"", ИмяТестовогоСлучая, СтрокаДереваТестов);
			МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
			Если СтрокаДереваТестов.СостояниеТеста = 3 Тогда // Тест сломался
				
				Если ЕстьТранзакция Тогда
					#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
						Если ТранзакцияАктивна() Тогда
							ОтменитьТранзакцию();
						КонецЕсли;
					#КонецЕсли
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если ЕстьТранзакция Тогда
				#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
				#КонецЕсли
			КонецЕсли;
			
			СтрокаДереваТестов.ВремяВыполнения = Число(ТекущаяДата() - ТекущаяДата);
	
		КонецЦикла;
		
		ВнешнийОбъект = Неопределено;
		ЭлементДереваМодулей.СостояниеТеста = Макс(МаксимальноеСостояниеТеста, ЭлементДереваМодулей.СостояниеТеста);
	
	Иначе
		
		// Тесты не реализированы
		ЭлементДереваМодулей.СостояниеТеста = 2;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцедуруТестовогоСлучая(ВнешнийОбъект, ИмяПроцедуры, ИмяТестовогоСлучая, СтрокаДереваТестов) Экспорт

	Попытка
		Выполнить(""ВнешнийОбъект."" + ИмяПроцедуры + ""();"");
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ;
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен(ПредставлениеОшибки, ИмяПроцедуры) Тогда
			// Вывод ошибок в регистр, а так же отдельный вывод в ТЗ
			СтрокаДереваТестов.СостояниеТеста = 3;
			СтрокаДереваТестов.ПолныйПуть = ПредставлениеОшибки;
			ВывестиОшибку(ПредставлениеОшибки);
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры



&НаКлиенте
Процедура ОчиститьСостояниеТестов(РодительскаяСтрока)
	
	КоллекцияСтрок = РодительскаяСтрока.ПолучитьЭлементы(); 
	Для каждого СтрокаДерева Из КоллекцияСтрок Цикл
		СтрокаДерева.СостояниеТеста = 0;
		ОчиститьСостояниеТестов(СтрокаДерева);
	КонецЦикла; 
	
КонецПроцедуры


&НаКлиенте
Функция ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(РодительскаяСтрока)
	
	КоллекцияСтрок = РодительскаяСтрока.ПолучитьЭлементы();
	Если КоллекцияСтрок.Количество() = 0 И РодительскаяСтрока.ТипСтроки = 2 Тогда
		Возврат 1; // строка теста
	КонецЕсли;
	
	КоличествоТестов = 0;
	Для каждого СтрокаДерева из КоллекцияСтрок Цикл
		Количество = ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаДерева);
		СтрокаДерева.КоличествоТестов = Количество;
        КоличествоТестов = КоличествоТестов + Количество;
	КонецЦикла;
	Возврат КоличествоТестов;
	
КонецФункции

&НаКлиенте
Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ИмяМетода) Экспорт
	Возврат Найти(ТекстОшибки, ""Метод объекта не обнаружен ("" + ИмяМетода + "")"") > 0;
КонецФункции

&НаКлиенте
Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = """" Тогда
		Возврат """";
	КонецЕсли;
	
	Возврат Символы.ПС + ДопСообщениеОшибки;
КонецФункции



&НаСервере
Процедура ВыполнитьТестыНаСервере(ИдентификаторСтроки, ТипОбъекта, GUID)
	
	ЭлементДереваМодулей = ДеревоТестов.НайтиПоИдентификатору(ИдентификаторСтроки);
	ДеревоТесты = ЭлементДереваМодулей.ПолучитьЭлементы();
	Если ДеревоТесты.Количество() Тогда
		
		Если 		ТипОбъекта = 1 Тогда
			ВнешнийОбъект = ВнешниеОбработки.Создать(GUID, Ложь);
		ИначеЕсли 	ТипОбъекта = 2 Тогда
			ВнешнийОбъект = ВнешниеОтчеты.Создать(GUID, Ложь);	
		КонецЕсли;
		
		ЮнитОбъект = РеквизитФормыВЗначение(""Объект"");
		ВнешнийОбъект.ПолучитьСписокТестов(ЮнитОбъект);
		МаксимальноеСостояниеТеста = 0;
		
		Для каждого СтрокаДереваТестов Из ДеревоТесты Цикл
			ТекущаяДата = ТекущаяДата();
			ЕстьПараметры = СтрокаДереваТестов.ПараметрыТеста.Количество() <> 0;
			ЕстьТранзакция = Ложь;
			ИмяТестовогоСлучая = СтрокаДереваТестов.НаименованиеОбъекта;
			СписокПараметрыТеста = СтрокаДереваТестов.ПараметрыТеста;
			
			Если ЕстьПараметры Тогда
				ПараметрыТеста = ?(ТипЗнч(СписокПараметрыТеста) = Тип(""Структура""), СписокПараметрыТеста, СписокПараметрыТеста[0].Значение);
				Если ПараметрыТеста.Свойство(""Транзакция"", ЕстьТранзакция) Тогда
					ЕстьТранзакция = ТипЗнч(ЕстьТранзакция) = Тип(""Булево"") И ЕстьТранзакция;
				Иначе
					ЕстьТранзакция = Ложь;
				КонецЕсли;

				Если ЕстьТранзакция Тогда
					НачатьТранзакцию();
				КонецЕсли;
			КонецЕсли;
			
			ЮнитОбъект.ВыполнитьПроцедуруТестовогоСлучая(ВнешнийОбъект, ""ПередЗапускомТеста"", ИмяТестовогоСлучая, СтрокаДереваТестов);
			МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
			Если СтрокаДереваТестов.СостояниеТеста = 3 Тогда // Тест сломался
				
				Если ЕстьТранзакция Тогда
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
				
			ПереданПараметрТеста = Ложь;
			СтрокаПараметров = """";
			ПараметрТеста = """";
			Если ЕстьПараметры Тогда
				ПараметрыТеста = ?(ТипЗнч(СписокПараметрыТеста) = Тип(""Структура""), СписокПараметрыТеста, СписокПараметрыТеста[0].Значение);
				ПереданПараметрТеста = ПараметрыТеста.Свойство(""Параметр"", ПараметрТеста);
				
				Если ПереданПараметрТеста Тогда
					СтрокаПараметров = ""ПараметрТеста"";	
				КонецЕсли;
			КонецЕсли;
			

			Попытка
				
				Выполнить(""ВнешнийОбъект."" + ИмяТестовогоСлучая + ""("" + СтрокаПараметров + "");"");
				
				СтрокаДереваТестов.СостояниеТеста = 1;
				МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
				
			Исключение		
				
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				СтрокаДереваТестов.ПолныйПуть = ПредставлениеОшибки;
				Если ЮнитОбъект.ЕстьОшибка_МетодОбъектаНеОбнаружен(ПредставлениеОшибки, ИмяТестовогоСлучая) Тогда
					СтрокаДереваТестов.СостояниеТеста = 2;			
				Иначе
					СтрокаДереваТестов.СостояниеТеста = 3;
				КонецЕсли;
				МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
				
				Если ЕстьТранзакция Тогда
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
				
			КонецПопытки;	
			
			ЮнитОбъект.ВыполнитьПроцедуруТестовогоСлучая(ВнешнийОбъект, ""ПослеЗапускаТеста"", ИмяТестовогоСлучая, СтрокаДереваТестов);
			МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
			Если СтрокаДереваТестов.СостояниеТеста = 3 Тогда // Тест сломался
				
				Если ЕстьТранзакция Тогда
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если ЕстьТранзакция Тогда
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДереваТестов.ВремяВыполнения = Число(ТекущаяДата() - ТекущаяДата);
	
		КонецЦикла;
		
		ВнешнийОбъект = Неопределено;
		ЭлементДереваМодулей.СостояниеТеста = Макс(МаксимальноеСостояниеТеста, ЭлементДереваМодулей.СостояниеТеста);
		
	Иначе
		
		// Тесты не реализированы
		ЭлементДереваМодулей.СостояниеТеста = 2;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти 

#КонецОбласти





",
{4,17,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",8b1e16c4-2561-4ad3-8aff-591a6616d2a6}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"ДеревоТестов",
{1,1,
{"ru","Дерево тестов"}
},
{"Pattern",
{"#",e603c0f2-92fb-4d47-8f38-a44a381cf235}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,11,
{5,1,0,"СостояниеТеста",
{1,1,
{"ru","Состояние теста"}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"ТипОбъекта",
{1,1,
{"ru","Тип объекта"}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"КоличествоТестов",
{1,1,
{"ru","К-во"}
},
{"Pattern",
{"N",10,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"НаименованиеТеста",
{1,1,
{"ru","Наименование теста"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ПолныйПуть",
{1,1,
{"ru","Полный путь"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"ТипСтроки",
{1,1,
{"ru","Тип строки"}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"ПараметрыТеста",
{1,1,
{"ru","Параметры теста"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,8,0,"НеРазрешимаяОшибка",
{1,1,
{"ru","Не разрешимая ошибка"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,9,0,"НаименованиеОбъекта",
{1,1,
{"ru","Объект"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,10,0,"GUID",
{1,1,
{"ru","GUID"}
},
{"Pattern",
{"S",36,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,11,0,"ВремяВыполнения",
{1,1,
{"ru","Время выполнения"}
},
{"Pattern",
{"N",5,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{3},0,"АдресВременногоХранилища",
{1,1,
{"ru","Адрес временного хранилища"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"СтруктураПараметров",
{1,1,
{"ru","Структура параметров"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"ПутьКФайлуПарсинга",
{1,1,
{"ru","Путь к файлу"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{6},0,"ТаблицаИменаФорм",
{1,1,
{"ru","Таблица имена форм"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,3,
{5,1,0,"ИмяОбъекта",
{1,1,
{"ru","Имя объекта"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"ИмяФормы",
{1,1,
{"ru","Имя формы"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"GUID",
{1,1,
{"ru","GUID"}
},
{"Pattern",
{"S",36,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{9},0,"ЗначенияСостоянияТестов",
{1,1,
{"ru","Значения состояния тестов"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{8},0,"ЗначенияТиповСтроки",
{1,1,
{"ru","Значения типов строки"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{10},0,"ЗначениеМодульИлиФорма",
{1,1,
{"ru","Значение модуль или форма"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{7},0,"ВсегоТестов",
{1,1,
{"ru","Всего тестов"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{11},0,"Пути",
{1,2,
{"en","Path to test cases"},
{"ru","Пути к тестовым случаям"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,1,
{0}
},0,0,0,0,
{0,0},
{0,0}
},
{9,
{12},0,"ПутиНадпись",
{1,1,
{"ru","Пути надпись"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{13},0,"ПутиПараметр",
{1,1,
{"ru","Пути параметр"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{14},0,"ПутьОтчетаТестирования",
{1,1,
{"ru","Путь отчета тестирования"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{15},0,"СписокОшибок",
{1,1,
{"ru","Список ошибок"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{16},0,"ТипОтчетаОТестировании",
{1,1,
{"ru","Тип отчета о тестировании"}
},
{"Pattern",
{"S",10,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{17},0,"ЗапретИспользованияИнформатора",
{1,1,
{"ru","Запрет использования информатора"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,1,"ДеревоТестов.НеРазрешимаяОшибка","ДеревоТестов.НеРазрешимаяОшибка",
{2,
{2},
{8}
},
{1,
{2}
},
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxjb25kaXRp
b25hbEFwcGVhcmFuY2U+DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJCQk8
aXRlbT4NCgkJCQkJPGZpZWxkPtCU0LXRgNC10LLQvtCi0LXRgdGC0L7QsjwvZmll
bGQ+DQoJCQkJPC9pdGVtPg0KCQkJPC9zZWxlY3Rpb24+DQoJCQk8ZmlsdGVyPg0K
CQkJCTxpdGVtIHhzaTp0eXBlPSJGaWx0ZXJJdGVtQ29tcGFyaXNvbiI+DQoJCQkJ
CTxsZWZ0IHhzaTp0eXBlPSJkY3Njb3I6RmllbGQiPtCU0LXRgNC10LLQvtCi0LXR
gdGC0L7Qsi7QndC10KDQsNC30YDQtdGI0LjQvNCw0Y/QntGI0LjQsdC60LA8L2xl
ZnQ+DQoJCQkJCTxjb21wYXJpc29uVHlwZT5FcXVhbDwvY29tcGFyaXNvblR5cGU+
DQoJCQkJCTxyaWdodCB4c2k6dHlwZT0ieHM6Ym9vbGVhbiI+dHJ1ZTwvcmlnaHQ+
DQoJCQkJPC9pdGVtPg0KCQkJPC9maWx0ZXI+DQoJCQk8YXBwZWFyYW5jZT4NCgkJ
CQk8ZGNzY29yOml0ZW0geHNpOnR5cGU9IlNldHRpbmdzUGFyYW1ldGVyVmFsdWUi
Pg0KCQkJCQk8ZGNzY29yOnBhcmFtZXRlcj7QptCy0LXRgtCi0LXQutGB0YLQsDwv
ZGNzY29yOnBhcmFtZXRlcj4NCgkJCQkJPGRjc2Nvcjp2YWx1ZSB4c2k6dHlwZT0i
djh1aTpDb2xvciI+d2ViOkxpZ2h0U2FsbW9uPC9kY3Njb3I6dmFsdWU+DQoJCQkJ
PC9kY3Njb3I6aXRlbT4NCgkJCQk8ZGNzY29yOml0ZW0geHNpOnR5cGU9IlNldHRp
bmdzUGFyYW1ldGVyVmFsdWUiPg0KCQkJCQk8ZGNzY29yOnBhcmFtZXRlcj7QotC+
0LvRjNC60L7Qn9GA0L7RgdC80L7RgtGAPC9kY3Njb3I6cGFyYW1ldGVyPg0KCQkJ
CQk8ZGNzY29yOnZhbHVlIHhzaTp0eXBlPSJ4czpib29sZWFuIj50cnVlPC9kY3Nj
b3I6dmFsdWU+DQoJCQkJPC9kY3Njb3I6aXRlbT4NCgkJCTwvYXBwZWFyYW5jZT4N
CgkJPC9pdGVtPg0KCTwvY29uZGl0aW9uYWxBcHBlYXJhbmNlPg0KPC9TZXR0aW5n
cz4=}
},
{0,1,
{0,"Пути",
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},0}
},
{0,7,
{6,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаВыполнитьВсеТесты",
{1,1,
{"ru","Выполнить все тесты"}
},
{1,1,
{"ru","Выполнить все тесты"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{3,0,
{0},"",-1,-1,1,0},"КомандаВыполнитьВсеТесты",2,0,0,
{0,0}
},
{6,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаВыполнитьТест",
{1,1,
{"ru","Выполнить тест"}
},
{1,1,
{"ru","Команда выполнить тест"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{3,0,
{0},"",-1,-1,1,0},"КомандаВыполнитьТест",2,0,0,
{0,0}
},
{6,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаЗагрузитьНаборыТестов",
{1,1,
{"ru","Загрузить наборы тестов"}
},
{1,1,
{"ru","Команда загрузить наборы тестов"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{3,0,
{0},"",-1,-1,1,0},"КомандаЗагрузитьНаборыТестов",2,0,0,
{0,0}
},
{6,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаЗагрузитьНаборТестов",
{1,1,
{"ru","Загрузить отдельный набор"}
},
{1,1,
{"ru","Загрузить набор тестов"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{3,0,
{0},"",-1,-1,1,0},"КомандаЗагрузитьНаборТестов",2,0,0,
{0,0}
},
{6,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаЗавершитьРаботу",
{1,1,
{"ru","Завершить работу"}
},
{1,1,
{"ru","Завершить работу с V8Commit"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{3,0,
{0},"",-1,-1,1,0},"КомандаЗавершитьРаботу",1,0,0,
{0,0}
},
{6,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаПерезагрузитьТесты",
{1,1,
{"ru","Перезагрузить тесты"}
},
{1,1,
{"ru","Перезагрузить набор(ы) тесты"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{3,0,
{0},"",-1,-1,1,0},"КомандаПерезагрузитьТесты",2,0,0,
{0,0}
},
{6,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаОПроекте",
{1,1,
{"ru","О проекте xUnitFor1C"}
},
{1,1,
{"ru","О проекте xUnitFor1C"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{3,1,
{0,3b2a508b-f36e-4e0b-9dc0-70b2b56276a9},"",-1,-1,1,0},"КомандаОПроекте",2,0,0,
{0,0}
}
},
{0,0},
{0,0}
}