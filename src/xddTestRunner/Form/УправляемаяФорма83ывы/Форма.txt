
&НаКлиенте
Перем ОбъектНаКлиенте;

&НаКлиенте
Перем MiddleMan;

#Область ИнтерфейсАвтоматическихТестов
	
&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверитьСтруктуруПараметровЗапуска", Ложь, "");
	СписокТестов.Добавить(ПараметрыТеста);
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Процедура Тест_ПроверитьСтруктуруПараметровЗапуска(Параметр) Экспорт
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровЗапуска(Параметр);
	ЮнитТест.ПроверитьТип(СтруктураПараметров, Тип("Структура"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ЭтаФорма.Заголовок = ОбъектНаСервере.ЗаголовокФормы();
	
	Если ЗначениеЗаполнено(Параметры.Пути) Тогда
        ПутиПараметр = Параметры.Пути;
    КонецЕсли;
	
	//{ Состояния тестов - ВАЖЕН порядок заполнения в мЗначенияСостоянияТестов, используется в ЗапомнитьСамоеХудшееСостояние
    ЗначенияСостоянияТестов = Новый Структура;
    ЗначенияСостоянияТестов.Вставить("НеВыполнялся", 	0);
    ЗначенияСостоянияТестов.Вставить("Прошел", 			1);
    ЗначенияСостоянияТестов.Вставить("НеРеализован", 	2);
    ЗначенияСостоянияТестов.Вставить("Сломался", 		3);
	ЗначенияСостоянияТестов = Новый ФиксированнаяСтруктура(ЗначенияСостоянияТестов);
    //} 

    //{ Типы строк дерева тестов
    ЗначенияТиповСтроки = Новый Структура;
    ЗначенияТиповСтроки.Вставить("КаталогТестов", 	0);
    ЗначенияТиповСтроки.Вставить("ТестовыйСлучай", 	1);
    ЗначенияТиповСтроки.Вставить("ТестовыйМетод", 	2);
	ЗначенияТиповСтроки = Новый ФиксированнаяСтруктура(ЗначенияТиповСтроки);
    //} 
    
    ЗначениеМодульИлиФорма = Новый Структура;
    ЗначениеМодульИлиФорма.Вставить("Модуль", 	1);
    ЗначениеМодульИлиФорма.Вставить("Форма", 	2);
	ЗначениеМодульИлиФорма = Новый ФиксированнаяСтруктура(ЗначениеМодульИлиФорма);
		
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбъектНаКлиенте = ПолучитьФорму("ВнешняяОбработка.xddTestRunner.Форма.УправляемаяФормаПеренаправления");	
	
	//Если ОбъектНаКлиенте.ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
	//	Возврат;
	//КонецЕсли;

	//Если ЗначениеЗаполнено(ПутиПараметр) Тогда
	//	ПользовательскиеПутиСохр = Пути;
	//	Пути = ПутиПараметр;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Пути) Тогда
	//	ОбновитьНадписьПути();
	//	
	//	Попытка
	//		LoadAllTests();
	//	Исключение
	//		текстОшибки = ОписаниеОшибки();
	//		ВывестиСообщение("ОШИБКА загрузки тестов: "+текстОшибки);
	//	КонецПопытки;
	//КонецЕсли;
	
	//Если Не ПустаяСтрока(ПараметрЗапуска) Тогда
	//
	//	СтруктураПараметров = ПолучитьСтруктуруПараметровЗапуска(ПараметрЗапуска, ";");
	//	
	//	Если СтруктураПараметров.Свойство("pathToCF", ПутьКФайлуПарсинга) Тогда
	//		
	//		ЗагрузитьТесты(ДеревоТестов, ПутьКФайлуПарсинга);
	//		
	//	Иначе
	//		
	//		Если СтруктураПараметров.Свойство("ЗавершитьРаботуПосле") Тогда
	//			Отказ = Истина;	
	//			ЗавершитьРаботуСистемы(Ложь);
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//			
	//КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
//	
//	Если СтруктураПараметров.Свойство("ЗавершитьРаботуПосле") Тогда
//		ЗавершитьРаботуСистемы(Ложь);
//	КонецЕсли;
//	
//КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицыФормы_ДеревоТестов

&НаКлиенте
Процедура ДеревоТестовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные.ТипСтроки = 2 И Не ПустаяСтрока(ТекущиеДанные.ПолныйПуть) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Сообщение об ошибке'"));
		ПараметрыФормы.Вставить("ТекстСообщения", ТекущиеДанные.ПолныйПуть);
		ОткрытьФорму("ВнешняяОбработка.V8Commit.Форма.ФормаСообщенияОбОшибке", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;                                     
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнитьТест(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьВсеТесты(Команда)
	
	ОчиститьСостояниеТестов(ДеревоТестов);
	ВыполнитьВсеТесты(ДеревоТестов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьНаборТестов(Команда)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'Текст'; en = 'Text'")
	    + "(*.epf, *.erf)|*.epf; *.erf";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКФайлуПарсинга = ДиалогОткрытияФайла.ПолноеИмяФайла;
		ДеревоТестов.ПолучитьЭлементы().Очистить();
		ЗагрузитьТесты(ДеревоТестов, ПутьКФайлуПарсинга);
	Иначе
	    Предупреждение(НСтр("ru = 'Файл не выбран!'; en = 'File not selected!'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьНаборыТестов(Команда)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите каталог";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКФайлуПарсинга = ДиалогОткрытияФайла.Каталог;
		ДеревоТестов.ПолучитьЭлементы().Очистить();
		ЗагрузитьТесты(ДеревоТестов, ПутьКФайлуПарсинга);	
	Иначе
	    Предупреждение(НСтр("ru = 'Каталог не выбран!'; en = 'Catalog not selected!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерезагрузитьТесты(Команда)
	
	ДеревоТестов.ПолучитьЭлементы().Очистить();
	ЗагрузитьТесты(ДеревоТестов, ПутьКФайлуПарсинга);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершитьРаботу(Команда)
	Закрыть(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОПроекте(Команда)
	
	ЗапуститьПриложение("https://github.com/xUnitFor1C/xUnitFor1C");
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииАвтоматическогоПарсинга
	
&НаКлиенте
Функция ПолучитьСтруктуруПараметровЗапуска(Знач Строка, Разделитель = ".") 
   
	СтруктураПараметров = Новый Структура;
	
    СтрокаЗамены 	= СтрЗаменить(Строка, Разделитель, Символы.ПС);
	КоличествоСтрок = СтрЧислоСтрок(СтрокаЗамены);
	Для i=1 По КоличествоСтрок Цикл
		
		Строка = СтрПолучитьСтроку(СтрокаЗамены, i);
		Если ПустаяСтрока(Строка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(Строка) = ВРег("decompile") Тогда
			СтруктураПараметров.Вставить("decompile");
			Продолжить;
		КонецЕсли;
		
		Если ВРег(Строка) = ВРег("ЗавершитьРаботуПосле") Тогда
			СтруктураПараметров.Вставить("ЗавершитьРаботуПосле");
			Продолжить;
		КонецЕсли;
		
		Если ВРег(Строка) = ВРег("pathToCF") И i + 1 <= КоличествоСтрок Тогда
			СтруктураПараметров.Вставить("pathToCF", СтрПолучитьСтроку(СтрокаЗамены, i + 1));
		КонецЕсли;
		
		Если ВРег(Строка) = ВРег("pathOut") И i + 1 <= КоличествоСтрок Тогда
			СтруктураПараметров.Вставить("pathOut", СтрПолучитьСтроку(СтрокаЗамены, i + 1));	
		КонецЕсли;
		 
	КонецЦикла;
	
 	Возврат СтруктураПараметров;
   
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииПроведенияТестирования

&НаКлиенте
Процедура Проверить(_Истина, ДопСообщениеОшибки = "") Экспорт
	Если Не _Истина Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Истина, "БЛ=ложь; БИ=истина")+") не является Истиной, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИстину(_Истина, ДопСообщениеОшибки = "") Экспорт
	Проверить(_Истина, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЛожь(_Ложь, ДопСообщениеОшибки = "") Экспорт
	Если _Ложь Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Ложь, "БЛ=ложь; БИ=истина")+") не является Ложью, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 <> _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") не равны, а хотели, чтобы были равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 = _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") равны, а хотели, чтобы были не равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольше(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше <= _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше или равен второму ("+_Меньше+") а хотели, чтобы был больше." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольшеИлиРавно(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше < _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше второго ("+_Меньше+") а хотели, чтобы был больше или равен." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньше(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 >= проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> больше или равно, чем <"+проверяемоеЗначение2+">, а ожидалось меньше"+
				ФорматДСО(СообщениеОбОшибке);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньшеИлиРавно(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 > проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> больше, чем <"+проверяемоеЗначение2+">, а ожидалось меньше или равно"+
				ФорматДСО(СообщениеОбОшибке);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнилось(СтрокаВыполнения, ДопСообщениеОшибки = "") Экспорт
	Попытка
		Выполнить(СтрокаВыполнения);
		Упало = Ложь;
	Исключение
		Упало = Истина;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Упало Тогда
		СообщениеОшибки = "Хотели, чтобы код """+СтрокаВыполнения+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодВыполнился(Объект, ИмяМетода, ДопСообщениеОшибки = "") Экспорт
	СтрокаВыполнения = "Объект."+ИмяМетода+"()";
	
	Попытка
		Выполнить(СтрокаВыполнения);
		Упало = Ложь;
	Исключение
		Упало = Истина;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Упало Тогда
		СообщениеОшибки = "Хотели, чтобы код """+СтрокаВыполнения+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеВыполнилось(СтрокаВыполнения, ОжидаемоеОписаниеОшибки, ДопСообщениеОшибки = "") Экспорт
	Попытка
		Выполнить(СтрокаВыполнения);
		Успех = Истина;
	Исключение
		Успех = Ложь;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Успех Тогда
		ВызватьИсключение("Хотели, чтобы код """+СтрокаВыполнения+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если ОжидаемоеОписаниеОшибки <> ПолученноеОписаниеОшибки Тогда
		ВызватьИсключение("Хотели, чтобы код """+СтрокаВыполнения+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодНеВыполнился(Объект, ИмяМетода, ОжидаемоеОписаниеОшибки, ДопСообщениеОшибки = "") Экспорт
	СтрокаВыполнения = "Объект."+ИмяМетода+"()";
	
	Попытка
		Выполнить(СтрокаВыполнения);
		Успех = Истина;
	Исключение
		Успех = Ложь;
		ПолученноеОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Если Успех Тогда
		ВызватьИсключение("Хотели, чтобы код """+СтрокаВыполнения+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если ОжидаемоеОписаниеОшибки <> ПолученноеОписаниеОшибки Тогда
		ВызватьИсключение("Хотели, чтобы код """+СтрокаВыполнения+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
    Попытка
        фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
    Исключение
        Возврат;
    КонецПопытки; 
    Если НЕ фЗаполнено Тогда
        ВызватьИсключение "Значение ("+ПроверяемоеЗначение+") не заполнено, а ожидалась заполненность" + ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	СообщениеОшибки = "Значение ("+ПроверяемоеЗначение+") заполнено, а ожидалась незаполненность" + ФорматДСО(ДопСообщениеОшибки);
	Попытка
        фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
    Исключение
        ВызватьИсключение СообщениеОшибки;
    КонецПопытки; 
    Если фЗаполнено Тогда
        ВызватьИсключение СообщениеОшибки;
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТип(значение, ТипИлиИмяТипа, ДопСообщениеОшибки = "") Экспорт
    Если ТипЗнч(ТипИлиИмяТипа) = Тип("Строка") Тогда
        искомыйТип = Тип(ТипИлиИмяТипа);
    ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип("Тип") Тогда
        искомыйТип = ТипИлиИмяТипа;
    Иначе
        ВызватьИсключение "ПроверитьТип: Тип значения параметра ТипИлиИмяТипа должен быть <Тип> или <Строка>, а получили <"+ ТипЗнч(ТипИлиИмяТипа) + ">" + ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
    Если ТипЗнч(значение) <> искомыйТип Тогда
        ВызватьИсключение "Типом значения <"+значение+"> является <"+ТипЗнч(значение)+">, а ожидался тип <"+ТипИлиИмяТипа+">."+ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВхождение(строка, подстрокаПоиска, ДопСообщениеОшибки = "") Экспорт
	Если Найти(строка, подстрокаПоиска) = 0 Тогда
		СообщениеОшибки = "Искали в <"+строка+"> подстроку <"+подстрокаПоиска+">, но не нашли." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВалидностьЗапроса(ТекстЗапроса, ДопСообщениеОшибки = "") Экспорт
	ПроверитьВалидностьЗапросаНаСервере(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

&НаСервере
Процедура ПроверитьВалидностьЗапросаНаСервере(ТекстЗапроса, ДопСообщениеОшибки)
	РеквизитФормыВЗначение("Объект").ПроверитьВалидностьЗапроса(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры // ПроверитьВалидностьЗапросаНаСервере()

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииЗагрузкиВыполненияТестов

&НаКлиенте
Процедура ЗагрузитьТесты(РодительскаяСтрока, ПутьКФайлу)
	
	ОбъектФайл = Новый Файл(ПутьКФайлу);
	Если ОбъектФайл.Существует() Тогда
		
		GUID = Строка(Новый УникальныйИдентификатор);	
		Если ОбъектФайл.ЭтоКаталог() Тогда
			
			ПараметрыСтроки = ПолучитьНовуюСтруктуруПараметровСтроки();
			ПараметрыСтроки.Вставить("GUID", GUID);
			ПараметрыСтроки.Вставить("НаименованиеОбъекта", ОбъектФайл.Имя);
			ПараметрыСтроки.Вставить("ТипОбъекта", 			0);
			ПараметрыСтроки.Вставить("СостояниеТеста", 		0);
			ПараметрыСтроки.Вставить("КоличествоТестов", 	0);
			ПараметрыСтроки.Вставить("ТипСтроки", 			0);
			ПараметрыСтроки.Вставить("ПолныйПуть", 			ОбъектФайл.ПолноеИмя);
			
			НоваяСтрока = ДобавитьСтрокуДереваТестов(РодительскаяСтрока, ПараметрыСтроки);
			
			НайденныеФайлы = НайтиФайлы(ОбъектФайл.ПолноеИмя, "*", Ложь);
			Для каждого Файл из НайденныеФайлы Цикл
				ЗагрузитьТесты(НоваяСтрока, Файл.ПолноеИмя);		
			КонецЦикла;
			
		ИначеЕсли ОбъектФайл.Расширение = ".epf" ИЛИ ОбъектФайл.Расширение = ".erf" Тогда
			
			Если ТипЗнч(РодительскаяСтрока) = Тип("ДанныеФормыДерево") Тогда
				ДополнительныеПараметры = Новый Структура("GUID, Расширение", GUID, ОбъектФайл.Расширение);	
			Иначе
				ДополнительныеПараметры = Новый Структура("GUID, Расширение, Идентификатор", GUID, ОбъектФайл.Расширение, РодительскаяСтрока.ПолучитьИдентификатор());
			КонецЕсли;
			Оповещение = Новый ОписаниеОповещения("ВыполнитьПодключениеОбъектаНаКлиенте", ЭтаФорма, ДополнительныеПараметры);
			
			//Функция на веб-клиенте может выполнятся асинхронно
			НачатьПомещениеФайла(Оповещение, , ОбъектФайл.ПолноеИмя, Ложь, УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключениеОбъектаНаКлиенте(Результат, АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Перем GUID;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("GUID", GUID);
	КонецЕсли;

	Идентификатор = ВыполнитьПодключениеОбъектаНаСервере(АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры);
	СтрокаРодитель = ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
	
	РезультатПоиска = ТаблицаИменаФорм.НайтиСтроки(Новый Структура("GUID", GUID));
	Для Каждого ЭлементПоиска Из РезультатПоиска Цикл
		ЗагрузитьТестыИзФормыОбъекта(ЭтаФорма, СтрокаРодитель, ЭлементПоиска, Новый Структура("АвтоТест"), ДополнительныеПараметры);
	КонецЦикла;	
	
	СтрокаРодитель.КоличествоТестов = ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаРодитель);
	
	// Для совместимости с Веб-клиентом, так как выполнение функции "НачатьПомещениеФайла" может выполнятся асинхронно
	СтрокаВерхнегоУровня = СтрокаРодитель.ПолучитьРодителя();	
	Пока СтрокаВерхнегоУровня <> Неопределено Цикл
		СтрокаВерхнегоУровня.КоличествоТестов = СтрокаВерхнегоУровня.КоличествоТестов + СтрокаРодитель.КоличествоТестов;
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.ПолучитьРодителя();
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ВыполнитьПодключениеОбъектаНаСервере(АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры)

	Перем GUID, Расширение, Идентификатор;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("GUID", GUID);
		ДополнительныеПараметры.Свойство("Расширение", Расширение);
		ДополнительныеПараметры.Свойство("Идентификатор", Идентификатор);
	КонецЕсли;
		
	Если Расширение = ".epf" Тогда
		ТипОбъекта = 1;
		ИмяОбъекта = ВнешниеОбработки.Подключить(АдресХранилища, GUID, Ложь);
		ВнешнийОбъект = ВнешниеОбработки.Создать(GUID);
	ИначеЕсли Расширение = ".erf" Тогда
		ТипОбъекта = 2;
		ИмяОбъекта = ВнешниеОтчеты.Подключить(АдресХранилища, GUID, Ложь);
		ВнешнийОбъект = ВнешниеОтчеты.Создать(GUID);  		
	КонецЕсли;
	
	МетаданныеОбъекта = ВнешнийОбъект.Метаданные();
	Для каждого Форма Из МетаданныеОбъекта.Формы Цикл
		НоваяЗапись = ТаблицаИменаФорм.Добавить();
		НоваяЗапись.ИмяОбъекта = ИмяОбъекта; 
		НоваяЗапись.ИмяФормы = Форма.Имя;
		НоваяЗапись.GUID = GUID;
	КонецЦикла;
	
	
	ПараметрыСтроки = ПолучитьНовуюСтруктуруПараметровСтроки();
	ПараметрыСтроки.Вставить("GUID", GUID);
	ПараметрыСтроки.Вставить("НаименованиеОбъекта", МетаданныеОбъекта.Синоним);
	ПараметрыСтроки.Вставить("ТипОбъекта", 			ТипОбъекта);
	ПараметрыСтроки.Вставить("СостояниеТеста", 		0);
	ПараметрыСтроки.Вставить("КоличествоТестов", 	0);
	ПараметрыСтроки.Вставить("ТипСтроки", 			1);
	ПараметрыСтроки.Вставить("ПолныйПуть", 			ВыбранноеИмяФайла);
	Если Идентификатор = Неопределено Тогда
		НоваяСтрока = ДобавитьСтрокуДереваТестов(ДеревоТестов, ПараметрыСтроки);	
	Иначе
		НоваяСтрока = ДобавитьСтрокуДереваТестов(ДеревоТестов.НайтиПоИдентификатору(Идентификатор), ПараметрыСтроки);
	КонецЕсли;
	
	ЗагрузитьТестыИзМодуляОбъекта(РеквизитФормыВЗначение("Объект"), НоваяСтрока, ВнешнийОбъект);
	
	Возврат НоваяСтрока.ПолучитьИдентификатор();
				
КонецФункции 

 
&НаКлиенте
Процедура ЗагрузитьТестыИзФормыОбъекта(ЮнитОбъект, Родитель, ВнешнийОбъект, ПараметрыФормы, ДополнительныеПараметры)

	Перем Расширение;	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("Расширение", Расширение);
	КонецЕсли;
	
	ПараметрыСтроки = ПолучитьНовуюСтруктуруПараметровСтроки();
	ПараметрыСтроки.Вставить("ТипСтроки", 0);	
	ПараметрыСтроки.Вставить("ТипОбъекта", 4);
	ПараметрыСтроки.Вставить("СостояниеТеста", 0);
	ПараметрыСтроки.Вставить("НаименованиеОбъекта", ВнешнийОбъект.ИмяФормы);
	КореньФормыОбъекта = ДобавитьСтрокуДереваТестов(Родитель, ПараметрыСтроки);
		
	Попытка
		
		Если 		Расширение = ".epf" Тогда
			ВнешнийОбъект = ПолучитьФорму("ВнешняяОбработка." 	+ ВнешнийОбъект.ИмяОбъекта + ".Форма." + ВнешнийОбъект.ИмяФормы, ПараметрыФормы, ЭтаФорма);
		ИначеЕсли 	Расширение = ".erf" Тогда
			ВнешнийОбъект = ПолучитьФорму("ВнешнийОтчет." 		+ ВнешнийОбъект.ИмяОбъекта + ".Форма." + ВнешнийОбъект.ИмяФормы, ПараметрыФормы, ЭтаФорма);	
		Иначе
			КореньФормыОбъекта.СостояниеТеста = 3;
			Возврат; 
		КонецЕсли;
		
	Исключение
		
		КореньФормыОбъекта.СостояниеТеста = 3;
		КореньФормыОбъекта.ПолныйПуть = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат;

	КонецПопытки;
	
	
	Попытка
    	МассивТестовыхМетодов = ВнешнийОбъект.ПолучитьСписокТестов(ЮнитОбъект);
	Исключение
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЕстьОшибка_МетодОбъектаНеОбнаружен = ЮнитОбъект.ЕстьОшибка_МетодОбъектаНеОбнаружен(ПредставлениеОшибки, "ПолучитьСписокТестов");
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен Тогда
			ЮнитОбъект.ВывестиОшибку("Не удалось загрузить список тестов для модуля объекта:
				|  Ошибка получения списка тестовых случаев: " + ОписаниеОшибки());
			КореньФормыОбъекта.СостояниеТеста = 3;
		Иначе
			ЮнитОбъект.ВывестиОшибку(ПредставлениеОшибки);
			КореньФормыОбъекта.СостояниеТеста = 0;	
		КонецЕсли;
		КореньФормыОбъекта.ПолныйПуть = ПредставлениеОшибки;
		Возврат;
		
	КонецПопытки;
	
	ВыполнитьЗагрузкуСтрокДереваТестов(КореньФормыОбъекта, 4, МассивТестовыхМетодов, ПараметрыСтроки);
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьТестыИзМодуляОбъекта(ЮнитОбъект, Родитель, ВнешнийОбъект)	
	
	ПараметрыСтроки = ПолучитьНовуюСтруктуруПараметровСтроки();
	ПараметрыСтроки.Вставить("ТипСтроки", 0);	
	ПараметрыСтроки.Вставить("ТипОбъекта", 3);
	ПараметрыСтроки.Вставить("СостояниеТеста", 0);
	ПараметрыСтроки.Вставить("НаименованиеОбъекта", "Модуль объекта");
	КореньМодуляОбъекта = ДобавитьСтрокуДереваТестов(Родитель, ПараметрыСтроки);
		
	Попытка
		МассивТестовыхМетодов = ВнешнийОбъект.ПолучитьСписокТестов(ЮнитОбъект);
	Исключение
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЕстьОшибка_МетодОбъектаНеОбнаружен = ЮнитОбъект.ЕстьОшибка_МетодОбъектаНеОбнаружен(ПредставлениеОшибки, "ПолучитьСписокТестов");
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен Тогда
			ЮнитОбъект.ВывестиОшибку("Не удалось загрузить список тестов для модуля объекта:
				|  Ошибка получения списка тестовых случаев: " + ОписаниеОшибки());
			КореньМодуляОбъекта.СостояниеТеста = 3;
		Иначе
			ЮнитОбъект.ВывестиОшибку(ПредставлениеОшибки);
			КореньМодуляОбъекта.СостояниеТеста = 0;	
		КонецЕсли;
		КореньМодуляОбъекта.ПолныйПуть = ПредставлениеОшибки;
		Возврат;
		
	КонецПопытки;
	
	ВыполнитьЗагрузкуСтрокДереваТестов(КореньМодуляОбъекта, 3, МассивТестовыхМетодов, ПараметрыСтроки);
	
КонецПроцедуры // ЗагрузитьТестыИзМодуляОбъекта()


&НаКлиентеНаСервереБезКонтекста
Процедура ВыполнитьЗагрузкуСтрокДереваТестов(Родитель, ТипОбъекта, МассивТестовыхМетодов, ПараметрыСтроки)

	Для каждого ЭлементМассива Из МассивТестовыхМетодов Цикл
		
		ПараметрыСтроки = ПолучитьНовуюСтруктуруПараметровСтроки();
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			
			ПараметрыСтроки.Вставить("НаименованиеТеста", ЭлементМассива);
			ПараметрыСтроки.Вставить("НаименованиеОбъекта", ЭлементМассива);
			
		Иначе
			
			ПараметрыСтроки.Вставить("НаименованиеТеста", ЭлементМассива.ИмяТеста);
			ПараметрыСтроки.Вставить("НаименованиеОбъекта", ЭлементМассива.ИмяТеста);
			
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(ЭлементМассива);
			ПараметрыСтроки.Вставить("ПараметрыТеста", СписокЗначений);
				
			ОписаниеПараметра = "<пусто>";
			Если ЭлементМассива.Свойство("Параметр") Тогда
				ОписаниеПараметра = "" + ЭлементМассива.Параметр;
			КонецЕсли;
			ПараметрыСтроки.Вставить("НаименованиеТеста", ЭлементМассива.ИмяТеста +  "( " + ОписаниеПараметра + " )");

		КонецЕсли;
		ПараметрыСтроки.Вставить("ТипОбъекта", 			ТипОбъекта);
		ПараметрыСтроки.Вставить("СостояниеТеста", 		0);
		ПараметрыСтроки.Вставить("КоличествоТестов", 	1);
		ПараметрыСтроки.Вставить("ТипСтроки", 			2);
			
		ДобавитьСтрокуДереваТестов(Родитель, ПараметрыСтроки);
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьЗагрузкуСтрокиДереваТестов()

// Функция добавляет новую строку в ДеревоЗначений, которая соответствует тестовому случаю
//
// Параметры:
//	Родитель - ДанныеФормыЭлементДерева - Строка дерева значений которой будет подчинен новый элемент
//  ПараметрыСтроки
//		* СостояниеТеста 		- Число(1,0Н) 		- Описывает в каком состояние выполнения тестов
//			* 0 - Тест не выполнялся
//			* 1 - Тест успешно завершен
//			* 2 - Тест не реализирован
//			* 3 - Тест провален
//		* НаименованиеОбъекта   - Строка			- Наименование объекта
//		* КоличествоТестов		- Число				- Количество тестов
//		* ТипОбъекта			- Число(1,0Н)		- Описывает тип объекта данной ноды
//			* 0 - Каталог файловой системы
//			* 1 - Внешняя обработка
//			* 2 - Внешний отчет
//			* 3 - Модуль объекта
//			* 4 - Модуль формы
//		* НаименованиеТеста 	- Строка			- Наименование тестового случая
//		* ПолныйПуть			- Строка			- Путь к объекту в файловой системе
//		* ТипСтроки				- Число(1,0Н)  		- Тип картинки строки дерева значений
//			* 0 - Отображение в виде папки
//			* 1 - Отображение в виде обработки
//			* 2 - Отображение в виде функции
//		* GUID 					- Строка(36)				- Уникальный идетификатор внешней обработки или внешнего отчета
//		* ПараметрыТеста		- СписокЗначений 			- Список с параметрами для передачи их в тестовые случаи
//		* НаименованиеТеста		- Строка					- Наименование тестового случая
//		* ТипОбъекта			- Число						- Описывает тип объекта данной ноды
//		* СостояниеТеста		- Число						- Описывает в каком состояние данного теста
//		* ТипСтроки				- Число						- Тип картинки строки дерева значений
//		* ПараметрыТеста		- Неопределено, Структура 	- Параметры тестового случая
//
// Возвращаемое значение:
//	НоваяСтрока - ДанныеФормыЭлементДерева - Новая строка в дереве тестов
//
&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьСтрокуДереваТестов(Родитель, ПараметрыСтроки)

	НоваяСтрока = Родитель.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыСтроки);
	Возврат НоваяСтрока;
	
КонецФункции // ДобавитьСтрокуДереваТестовНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНовуюСтруктуруПараметровСтроки()
	
	ПараметрыСтроки = Новый Структура;
	ПараметрыСтроки.Вставить("GUID");
	ПараметрыСтроки.Вставить("НаименованиеТеста");
	ПараметрыСтроки.Вставить("НаименованиеОбъекта");
	ПараметрыСтроки.Вставить("ТипОбъекта");
	ПараметрыСтроки.Вставить("СостояниеТеста");
	ПараметрыСтроки.Вставить("КоличествоТестов");
	ПараметрыСтроки.Вставить("ТипСтроки");
	ПараметрыСтроки.Вставить("ПараметрыТеста");
	ПараметрыСтроки.Вставить("ПолныйПуть");
	Возврат ПараметрыСтроки;
	
КонецФункции // ПолучитьНовуюСтруктуруПараметровСтроки()



&НаКлиенте
Процедура ВывестиОшибку(Ошибка) Экспорт
	
	ТипОбъектаОшибка = ТипЗнч(Ошибка);	
	Если ТипОбъектаОшибка = Тип("Структура") Тогда
		Сообщить("[" + Ошибка.ИмяТестовогоНабора + ": " + Ошибка.ИмяТестовогоСлучая + "] " + Ошибка.Описание, СтатусСообщения.Важное);
	ИначеЕсли ТипОбъектаОшибка = Тип("ИнформацияОбОшибке") Тогда
		Сообщить(Ошибка.Описание, СтатусСообщения.Важное);
	Иначе
		Сообщить(Ошибка, СтатусСообщения.Важное);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте 
Процедура ВыполнитьВсеТесты(ЭлементДереваТестов)
	
	ЭлементыДерева = ЭлементДереваТестов.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если ЭлементДерева.ТипОбъекта = 0 Тогда
			ВыполнитьВсеТесты(ЭлементДерева);
		Иначе
			ВыполнитьТестыОбъекта(ЭлементДерева);		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте 
Процедура ВыполнитьТестыОбъекта(ЭлементДереваТестов)
	
	ТипОбъекта = ЭлементДереваТестов.ТипОбъекта;
	ЭлементыДереваМодулей = ЭлементДереваТестов.ПолучитьЭлементы();
	Для каждого ЭлементДереваМодулей Из ЭлементыДереваМодулей Цикл
		
		Если 	  ЭлементДереваМодулей.ТипОбъекта = 3 Тогда // Модуль объекта
			ВыполнитьТестыНаСервере(ЭлементДереваМодулей.ПолучитьИдентификатор(), ЭлементДереваТестов.ТипОбъекта, ЭлементДереваТестов.GUID);
		ИначеЕсли ЭлементДереваМодулей.ТипОбъекта = 4 Тогда // Модуль формы
			ВыполнитьТестыНаКлиенте(ЭлементДереваМодулей, ЭлементДереваТестов.ТипОбъекта, ЭлементДереваТестов.GUID);
		КонецЕсли;
		ЭлементДереваТестов.СостояниеТеста = Макс(ЭлементДереваМодулей.СостояниеТеста, ЭлементДереваТестов.СостояниеТеста);
		
	КонецЦикла;
	
	СтрокаВерхнегоУровня = ЭлементДереваТестов.ПолучитьРодителя();	
	Пока СтрокаВерхнегоУровня <> Неопределено Цикл
		СтрокаВерхнегоУровня.СостояниеТеста = Макс(СтрокаВерхнегоУровня.СостояниеТеста, ЭлементДереваТестов.СостояниеТеста);
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.ПолучитьРодителя();
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТестыНаКлиенте(ЭлементДереваМодулей, ТипОбъекта, GUID)
	
	ДеревоТесты = ЭлементДереваМодулей.ПолучитьЭлементы();
	Если ДеревоТесты.Количество() Тогда
		
		ПараметрыФормы = Новый Структура("АвтоТест");
		Если 		ТипОбъекта = 1 Тогда
			ВнешнийОбъект = ПолучитьФорму("ВнешняяОбработка." + GUID + ".Форма." + ЭлементДереваМодулей.НаименованиеОбъекта, ПараметрыФормы, ЭтаФорма);
		ИначеЕсли 	ТипОбъекта = 2 Тогда
			ВнешнийОбъект = ПолучитьФорму("ВнешнийОтчет." 	  + GUID + ".Форма." + ЭлементДереваМодулей.НаименованиеОбъекта, ПараметрыФормы, ЭтаФорма);	
		КонецЕсли;
		
		ЮнитОбъект = ЭтаФорма;
		ВнешнийОбъект.ПолучитьСписокТестов(ЮнитОбъект);
		МаксимальноеСостояниеТеста = 0;
		
		Для каждого СтрокаДереваТестов Из ДеревоТесты Цикл
			ТекущаяДата = ТекущаяДата();
			ЕстьПараметры = СтрокаДереваТестов.ПараметрыТеста.Количество() <> 0;
			ЕстьТранзакция = Ложь;
			ИмяТестовогоСлучая = СтрокаДереваТестов.НаименованиеОбъекта;
			СписокПараметрыТеста = СтрокаДереваТестов.ПараметрыТеста;
			
			Если ЕстьПараметры Тогда
				ПараметрыТеста = ?(ТипЗнч(СписокПараметрыТеста) = Тип("Структура"), СписокПараметрыТеста, СписокПараметрыТеста[0].Значение);
				Если ПараметрыТеста.Свойство("Транзакция", ЕстьТранзакция) Тогда
					ЕстьТранзакция = ТипЗнч(ЕстьТранзакция) = Тип("Булево") И ЕстьТранзакция;
				Иначе
					ЕстьТранзакция = Ложь;
				КонецЕсли;

				Если ЕстьТранзакция Тогда
					#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
						НачатьТранзакцию();
					#КонецЕсли
				КонецЕсли;
			КонецЕсли;
			
			ЮнитОбъект.ВыполнитьПроцедуруТестовогоСлучая(ВнешнийОбъект, "ПередЗапускомТеста", ИмяТестовогоСлучая, СтрокаДереваТестов);
			МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
			Если СтрокаДереваТестов.СостояниеТеста = 3 Тогда // Тест сломался
				
				Если ЕстьТранзакция Тогда
					#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
						Если ТранзакцияАктивна() Тогда
							ОтменитьТранзакцию();
						КонецЕсли;
					#КонецЕсли
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
				
			ПереданПараметрТеста = Ложь;
			СтрокаПараметров = "";
			ПараметрТеста = "";
			Если ЕстьПараметры Тогда
				ПараметрыТеста = ?(ТипЗнч(СписокПараметрыТеста) = Тип("Структура"), СписокПараметрыТеста, СписокПараметрыТеста[0].Значение);
				ПереданПараметрТеста = ПараметрыТеста.Свойство("Параметр", ПараметрТеста);
				
				Если ПереданПараметрТеста Тогда
					СтрокаПараметров = "ПараметрТеста";	
				КонецЕсли;
			КонецЕсли;
			

			Попытка
				
				Выполнить("ВнешнийОбъект." + ИмяТестовогоСлучая + "(" + СтрокаПараметров + ");");
				
				СтрокаДереваТестов.СостояниеТеста = 1;
				МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
				
			Исключение		
				
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				СтрокаДереваТестов.ПолныйПуть = ПредставлениеОшибки;
				Если ЮнитОбъект.ЕстьОшибка_МетодОбъектаНеОбнаружен(ПредставлениеОшибки, ИмяТестовогоСлучая) Тогда
					СтрокаДереваТестов.СостояниеТеста = 2;			
				Иначе
					СтрокаДереваТестов.СостояниеТеста = 3;
				КонецЕсли;
				МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
				
				Если ЕстьТранзакция Тогда
					#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
						Если ТранзакцияАктивна() Тогда
							ОтменитьТранзакцию();
						КонецЕсли;
					#КонецЕсли
				КонецЕсли;
				
				Продолжить;
				
			КонецПопытки;	
			
			ЮнитОбъект.ВыполнитьПроцедуруТестовогоСлучая(ВнешнийОбъект, "ПослеЗапускаТеста", ИмяТестовогоСлучая, СтрокаДереваТестов);
			МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
			Если СтрокаДереваТестов.СостояниеТеста = 3 Тогда // Тест сломался
				
				Если ЕстьТранзакция Тогда
					#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
						Если ТранзакцияАктивна() Тогда
							ОтменитьТранзакцию();
						КонецЕсли;
					#КонецЕсли
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если ЕстьТранзакция Тогда
				#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
				#КонецЕсли
			КонецЕсли;
			
			СтрокаДереваТестов.ВремяВыполнения = Число(ТекущаяДата() - ТекущаяДата);
	
		КонецЦикла;
		
		ВнешнийОбъект = Неопределено;
		ЭлементДереваМодулей.СостояниеТеста = Макс(МаксимальноеСостояниеТеста, ЭлементДереваМодулей.СостояниеТеста);
	
	Иначе
		
		// Тесты не реализированы
		ЭлементДереваМодулей.СостояниеТеста = 2;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцедуруТестовогоСлучая(ВнешнийОбъект, ИмяПроцедуры, ИмяТестовогоСлучая, СтрокаДереваТестов) Экспорт

	Попытка
		Выполнить("ВнешнийОбъект." + ИмяПроцедуры + "();");
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ;
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен(ПредставлениеОшибки, ИмяПроцедуры) Тогда
			// Вывод ошибок в регистр, а так же отдельный вывод в ТЗ
			СтрокаДереваТестов.СостояниеТеста = 3;
			СтрокаДереваТестов.ПолныйПуть = ПредставлениеОшибки;
			ВывестиОшибку(ПредставлениеОшибки);
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры



&НаКлиенте
Процедура ОчиститьСостояниеТестов(РодительскаяСтрока)
	
	КоллекцияСтрок = РодительскаяСтрока.ПолучитьЭлементы(); 
	Для каждого СтрокаДерева Из КоллекцияСтрок Цикл
		СтрокаДерева.СостояниеТеста = 0;
		ОчиститьСостояниеТестов(СтрокаДерева);
	КонецЦикла; 
	
КонецПроцедуры


&НаКлиенте
Функция ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(РодительскаяСтрока)
	
	КоллекцияСтрок = РодительскаяСтрока.ПолучитьЭлементы();
	Если КоллекцияСтрок.Количество() = 0 И РодительскаяСтрока.ТипСтроки = 2 Тогда
		Возврат 1; // строка теста
	КонецЕсли;
	
	КоличествоТестов = 0;
	Для каждого СтрокаДерева из КоллекцияСтрок Цикл
		Количество = ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаДерева);
		СтрокаДерева.КоличествоТестов = Количество;
        КоличествоТестов = КоличествоТестов + Количество;
	КонецЦикла;
	Возврат КоличествоТестов;
	
КонецФункции

&НаКлиенте
Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ИмяМетода) Экспорт
	Возврат Найти(ТекстОшибки, "Метод объекта не обнаружен (" + ИмяМетода + ")") > 0;
КонецФункции

&НаКлиенте
Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Символы.ПС + ДопСообщениеОшибки;
КонецФункции



&НаСервере
Процедура ВыполнитьТестыНаСервере(ИдентификаторСтроки, ТипОбъекта, GUID)
	
	ЭлементДереваМодулей = ДеревоТестов.НайтиПоИдентификатору(ИдентификаторСтроки);
	ДеревоТесты = ЭлементДереваМодулей.ПолучитьЭлементы();
	Если ДеревоТесты.Количество() Тогда
		
		Если 		ТипОбъекта = 1 Тогда
			ВнешнийОбъект = ВнешниеОбработки.Создать(GUID, Ложь);
		ИначеЕсли 	ТипОбъекта = 2 Тогда
			ВнешнийОбъект = ВнешниеОтчеты.Создать(GUID, Ложь);	
		КонецЕсли;
		
		ЮнитОбъект = РеквизитФормыВЗначение("Объект");
		ВнешнийОбъект.ПолучитьСписокТестов(ЮнитОбъект);
		МаксимальноеСостояниеТеста = 0;
		
		Для каждого СтрокаДереваТестов Из ДеревоТесты Цикл
			ТекущаяДата = ТекущаяДата();
			ЕстьПараметры = СтрокаДереваТестов.ПараметрыТеста.Количество() <> 0;
			ЕстьТранзакция = Ложь;
			ИмяТестовогоСлучая = СтрокаДереваТестов.НаименованиеОбъекта;
			СписокПараметрыТеста = СтрокаДереваТестов.ПараметрыТеста;
			
			Если ЕстьПараметры Тогда
				ПараметрыТеста = ?(ТипЗнч(СписокПараметрыТеста) = Тип("Структура"), СписокПараметрыТеста, СписокПараметрыТеста[0].Значение);
				Если ПараметрыТеста.Свойство("Транзакция", ЕстьТранзакция) Тогда
					ЕстьТранзакция = ТипЗнч(ЕстьТранзакция) = Тип("Булево") И ЕстьТранзакция;
				Иначе
					ЕстьТранзакция = Ложь;
				КонецЕсли;

				Если ЕстьТранзакция Тогда
					НачатьТранзакцию();
				КонецЕсли;
			КонецЕсли;
			
			ЮнитОбъект.ВыполнитьПроцедуруТестовогоСлучая(ВнешнийОбъект, "ПередЗапускомТеста", ИмяТестовогоСлучая, СтрокаДереваТестов);
			МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
			Если СтрокаДереваТестов.СостояниеТеста = 3 Тогда // Тест сломался
				
				Если ЕстьТранзакция Тогда
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
				
			ПереданПараметрТеста = Ложь;
			СтрокаПараметров = "";
			ПараметрТеста = "";
			Если ЕстьПараметры Тогда
				ПараметрыТеста = ?(ТипЗнч(СписокПараметрыТеста) = Тип("Структура"), СписокПараметрыТеста, СписокПараметрыТеста[0].Значение);
				ПереданПараметрТеста = ПараметрыТеста.Свойство("Параметр", ПараметрТеста);
				
				Если ПереданПараметрТеста Тогда
					СтрокаПараметров = "ПараметрТеста";	
				КонецЕсли;
			КонецЕсли;
			

			Попытка
				
				Выполнить("ВнешнийОбъект." + ИмяТестовогоСлучая + "(" + СтрокаПараметров + ");");
				
				СтрокаДереваТестов.СостояниеТеста = 1;
				МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
				
			Исключение		
				
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				СтрокаДереваТестов.ПолныйПуть = ПредставлениеОшибки;
				Если ЮнитОбъект.ЕстьОшибка_МетодОбъектаНеОбнаружен(ПредставлениеОшибки, ИмяТестовогоСлучая) Тогда
					СтрокаДереваТестов.СостояниеТеста = 2;			
				Иначе
					СтрокаДереваТестов.СостояниеТеста = 3;
				КонецЕсли;
				МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
				
				Если ЕстьТранзакция Тогда
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
				
			КонецПопытки;	
			
			ЮнитОбъект.ВыполнитьПроцедуруТестовогоСлучая(ВнешнийОбъект, "ПослеЗапускаТеста", ИмяТестовогоСлучая, СтрокаДереваТестов);
			МаксимальноеСостояниеТеста = Макс(МаксимальноеСостояниеТеста, СтрокаДереваТестов.СостояниеТеста);
			Если СтрокаДереваТестов.СостояниеТеста = 3 Тогда // Тест сломался
				
				Если ЕстьТранзакция Тогда
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если ЕстьТранзакция Тогда
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДереваТестов.ВремяВыполнения = Число(ТекущаяДата() - ТекущаяДата);
	
		КонецЦикла;
		
		ВнешнийОбъект = Неопределено;
		ЭлементДереваМодулей.СостояниеТеста = Макс(МаксимальноеСостояниеТеста, ЭлементДереваМодулей.СостояниеТеста);
		
	Иначе
		
		// Тесты не реализированы
		ЭлементДереваМодулей.СостояниеТеста = 2;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти 

#КонецОбласти





