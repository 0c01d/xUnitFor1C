&НаКлиенте
Перем ПользовательскиеПутиСохр;

&НаКлиенте
Перем MiddleMan;

	//#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
	//&НаКлиенте
	//Перем мОбъектUTR;
	//#КонецЕсли

&НаСервере
Функция ВерсияСервер()
	Возврат Объект().Версия();
КонецФункции
	
// { функции утверждения- проверки значений. 

&НаКлиенте
Процедура Проверить(_Истина, ДопСообщениеОшибки = "") Экспорт
	Если Не _Истина Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Истина, "БЛ=ложь; БИ=истина")+") не является Истиной, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИстину(_Истина, ДопСообщениеОшибки = "") Экспорт
	Проверить(_Истина, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЛожь(_Ложь, ДопСообщениеОшибки = "") Экспорт
	Если _Ложь Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Ложь, "БЛ=ложь; БИ=истина")+") не является Ложью, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 <> _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") не равны, а хотели, чтобы были равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 = _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") равны, а хотели, чтобы были не равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольше(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше <= _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше или равен второму ("+_Меньше+") а хотели, чтобы был больше." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольшеИлиРавно(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше < _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше второго ("+_Меньше+") а хотели, чтобы был больше или равен." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньше(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 >= проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> больше или равно, чем <"+проверяемоеЗначение2+">, а ожидалось меньше"+
				ФорматДСО(СообщениеОбОшибке);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньшеИлиРавно(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 > проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> больше, чем <"+проверяемоеЗначение2+">, а ожидалось меньше или равно"+
				ФорматДСО(СообщениеОбОшибке);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнилось(СтрокаВыполнения, ДопСообщениеОшибки = "") Экспорт
	Попытка
		Выполнить(СтрокаВыполнения);
		Упало = Ложь;
	Исключение
		Упало = Истина;
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Упало Тогда
		СообщениеОшибки = "Хотели, чтобы алгоритм """+СтрокаВыполнения+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодВыполнился(Объект, ИмяМетода, ДопСообщениеОшибки = "") Экспорт
	СтрокаВыполнения = "Объект."+ИмяМетода+"()";
	
	Попытка
		Выполнить(СтрокаВыполнения);
		Упало = Ложь;
	Исключение
		Упало = Истина;
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Упало Тогда
		СообщениеОшибки = "Хотели, чтобы алгоритм """+СтрокаВыполнения+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеВыполнилось(СтрокаВыполнения, ОжидаемоеОписаниеОшибки, ДопСообщениеОшибки = "") Экспорт
	Попытка
		Выполнить(СтрокаВыполнения);
		Успех = Истина;
	Исключение
		Успех = Ложь;
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Успех Тогда
		ВызватьИсключение("Хотели, чтобы алгоритм """+СтрокаВыполнения+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
		ВызватьИсключение("Хотели, чтобы алгоритм """+СтрокаВыполнения+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодНеВыполнился(Объект, ИмяМетода, ОжидаемоеОписаниеОшибки, ДопСообщениеОшибки = "") Экспорт
	СтрокаВыполнения = "Объект."+ИмяМетода+"()";
	
	Попытка
		Выполнить(СтрокаВыполнения);
		Успех = Истина;
	Исключение
		Успех = Ложь;
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Успех Тогда
		ВызватьИсключение("Хотели, чтобы алгоритм """+СтрокаВыполнения+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
		ВызватьИсключение("Хотели, чтобы алгоритм """+СтрокаВыполнения+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

// проверка идет через ЗначениеЗаполнено, но мутабельные значение всегда считаем заполненными
&НаКлиенте
Процедура ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
    Попытка
        фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
    Исключение
        Возврат;
    КонецПопытки; 
    Если НЕ фЗаполнено Тогда
        ВызватьИсключение "Значение ("+ПроверяемоеЗначение+") не заполнено, а ожидалась заполненность" + ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	СообщениеОшибки = "Значение ("+ПроверяемоеЗначение+") заполнено, а ожидалась незаполненность" + ФорматДСО(ДопСообщениеОшибки);
	Попытка
        фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
    Исключение
        ВызватьИсключение СообщениеОшибки;
    КонецПопытки; 
    Если фЗаполнено Тогда
        ВызватьИсключение СообщениеОшибки;
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТип(значение, ТипИлиИмяТипа, ДопСообщениеОшибки = "") Экспорт
    Если ТипЗнч(ТипИлиИмяТипа) = Тип("Строка") Тогда
        искомыйТип = Тип(ТипИлиИмяТипа);
    ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип("Тип") Тогда
        искомыйТип = ТипИлиИмяТипа;
    Иначе
        ВызватьИсключение "ПроверитьТип: Тип значения параметра ТипИлиИмяТипа должен быть <Тип> или <Строка>, а получили <"+ ТипЗнч(ТипИлиИмяТипа) + ">" + ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
    Если ТипЗнч(значение) <> искомыйТип Тогда
        ВызватьИсключение "Типом значения <"+значение+"> является <"+ТипЗнч(значение)+">, а ожидался тип <"+ТипИлиИмяТипа+">."+ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
КонецПроцедуры
// }

// { Методы генерации тестовых данных

// количествоСозданныхОбъектов учитывает только созданные элементы справочников, документы и пользователей ИБ. Записи регистров сведений не считаются!
&НаКлиенте
Функция СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, количествоСозданныхОбъектов = 0) Экспорт
	Данные = СоздатьДанныеПоТабличномуДокументуСервер(ТабличныйДокумент, количествоСозданныхОбъектов);
	Возврат Данные;
КонецФункции

&НаСервере
Функция СоздатьДанныеПоТабличномуДокументуСервер(ТабличныйДокумент, количествоСозданныхОбъектов = 0) Экспорт
	Данные = Объект().СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, количествоСозданныхОбъектов);
	Возврат Неопределено; //Данные;
КонецФункции
//}

// { ВНЕШНЕЕ API

&НаКлиенте
Функция OpenBrowserForm() Экспорт
	ЭтаФорма.Открыть();
КонецФункции

&НаКлиенте
Функция SetHandlerObject(obj) Экспорт
	MiddleMan = obj;	
КонецФункции

&НаКлиенте
Процедура LoadAllTests() Экспорт
	Объект.ДеревоТестов.ПолучитьЭлементы().Очистить();

	Для каждого ЭлементСписка Из Пути Цикл
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли 
		
		путьТеста = ЭлементСписка.Значение;
		Если Найти(ВРег(путьТеста), "МЕТАДАННЫЕ.") = 1 Тогда
            ЗагрузитьТестыКонфигурации(Объект.ДеревоТестов, путьТеста);
		Иначе
	        Файл = Новый Файл(путьТеста);		
			Если Файл.Существует() Тогда
	            ЗагрузитьТесты(Объект.ДеревоТестов, Файл);
	        Иначе
	            ВывестиОшибку(НСтр("en = 'File or directory does not exist ""'; ru = 'Файл или каталог не существует ""'") +
	                               путьТеста + """");
	        КонецЕсли;
        КонецЕсли;
	КонецЦикла;
	
	ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(Объект.ДеревоТестов);
	РазвернутьСтрокиДерева();
КонецПроцедуры

&НаКлиенте
Функция RunAllTests() Экспорт
	//мОбъектUTR = Неопределено;
	
	МассивИдентификаторовСтрок = Новый Массив();
	Для каждого ЭлементДерева Из Объект.ДеревоТестов.ПолучитьЭлементы() Цикл
		МассивИдентификаторовСтрок.Добавить(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
	_ВыполнитьВыбранныеТесты(МассивИдентификаторовСтрок);
	
	СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(Объект.ДеревоТестов.ПолучитьЭлементы(), Истина);
КонецФункции
// }

// { работа с тестами

&НаКлиенте
Процедура ЗагрузитьТесты(РодительскаяСтрока, ОбъектФайл)
	ЭтоВнешниеФайловыеДанные = Ложь;
	ЭтоКаталог = Ложь;
	ХарактеристикиФайлаТеста(ОбъектФайл, ЭтоВнешниеФайловыеДанные, ЭтоКаталог);

	Если ЭтоКаталог Тогда
		СтрокаКаталога = ДобавитьСтрокуДереваТестов(РодительскаяСтрока, ОбъектФайл.Имя, ОбъектФайл.Имя, ОбъектФайл.ПолноеИмя, Неопределено, Неопределено, ЗначенияТиповСтроки.КаталогТестов);
		
		Если ЭтоВнешниеФайловыеДанные Тогда
			НайденныеФайлы = НайтиФайлы(ОбъектФайл.ПолноеИмя, "*", Ложь);
		Иначе
			НайденныеФайлы = ОбъектФайл.Строки;
		КонецЕсли;
		Для каждого Файл из НайденныеФайлы Цикл
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли 
			ЭтоВложенныйВнешнийФайл = Ложь;
			ЭтоВложенныйКаталог = Ложь;
			ХарактеристикиФайлаТеста(Файл, ЭтоВложенныйВнешнийФайл, ЭтоВложенныйКаталог);

			Если ЭтоВложенныйКаталог Тогда
				ЗагрузитьТесты(СтрокаКаталога, Файл);
			ИначеЕсли НЕ ЭтоВложенныйВнешнийФайл или НРег(Файл.Расширение) = ".epf" Тогда //И НРег(Лев(Файл.Имя, 4)) = "тест" Тогда
                СтрокаТеста = ДобавитьТест(СтрокаКаталога, Файл);
                Если СтрокаТеста <> Неопределено И СтрокаТеста.ТестовыйСлучайОбъектМетаданныхИмя <> Неопределено Тогда
						//#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
						//ДобавитьТестТолстыйКлиент(СтрокаТеста.ПолучитьИдентификатор(), Файл);
						//#Иначе
                    ДобавитьТестНаСервере(СтрокаТеста.ПолучитьИдентификатор(), СтрокаТеста.ТестовыйСлучайОбъектМетаданныхИмя);
	                    //#КонецЕсли
                КонецЕсли;

				УдалитьПустуюСтрокуДерева(СтрокаТеста, СтрокаКаталога);
			КонецЕсли;
		КонецЦикла;
		
		СтрокаТеста = СтрокаКаталога;
	Иначе
        СтрокаТеста = ДобавитьТест(РодительскаяСтрока, ОбъектФайл);
        Если СтрокаТеста <> Неопределено И СтрокаТеста.ТестовыйСлучайОбъектМетаданныхИмя <> Неопределено Тогда
				//#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
				//ДобавитьТестТолстыйКлиент(СтрокаТеста.ПолучитьИдентификатор(), ОбъектФайл);
				//#Иначе
            ДобавитьТестНаСервере(СтрокаТеста.ПолучитьИдентификатор(), СтрокаТеста.ТестовыйСлучайОбъектМетаданныхИмя);
            	//#КонецЕсли
        КонецЕсли;
	КонецЕсли;	
	
	УдалитьПустуюСтрокуДерева(СтрокаТеста, РодительскаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиФайлаТеста(ФайлИлиСтруктура, РезЭтоВложенныйВнешнийФайл, РезЭтоВложенныйКаталог)
	РезЭтоВложенныйВнешнийФайл = ТипЗнч(ФайлИлиСтруктура) = Тип("Файл");
	РезЭтоВложенныйКаталог = РезЭтоВложенныйВнешнийФайл И ФайлИлиСтруктура.ЭтоКаталог() или ТипЗнч(ФайлИлиСтруктура) = Тип("Структура") И ФайлИлиСтруктура.ТипСтроки = ЗначенияТиповСтроки.КаталогТестов;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустуюСтрокуДерева(СтрокаТеста, РодительскаяСтрока)
	Если СтрокаТеста <> Неопределено И СтрокаТеста.ПолучитьЭлементы().Количество() = 0 Тогда
		Если РодительскаяСтрока <> Неопределено Тогда
			РодительскаяСтрока.ПолучитьЭлементы().Удалить(СтрокаТеста);
		Иначе
			Объект.ДеревоТестов.ПолучитьЭлементы().Удалить(СтрокаТеста);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ДобавитьСтрокуДереваТестов(РодительскаяСтрока,
                                   ПредставлениеТестовогоСлучая,
                                   Имя,
                                   ПутьКФайлу,
                                   ТестовыйСлучайОбъектМетаданныхИмя = Неопределено,
                                   ТестовыйСлучайОбъект = Неопределено,
                                   ТипСтроки = 0,
								   ПараметрыТеста = Неопределено, 
                                   Состояние = 0,
                                   МодульИлиФорма = 0,
									ИмяОсновнойУправляемойФормы = "")
	НоваяСтрока = РодительскаяСтрока.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Имя = ПредставлениеТестовогоСлучая;
	НоваяСтрока.ПолныйПуть = ПутьКФайлу;
	//НоваяСтрока.ПредставлениеПути = СтрЗаменить(НоваяСтрока.ПолныйПуть, РодительскаяСтрока.ПолныйПуть, "...");
	НоваяСтрока.ТипСтроки = ТипСтроки;
	НоваяСтрока.Состояние = Состояние;
	НоваяСтрока.ТестовыйСлучайОбъектМетаданныхИмя = ТестовыйСлучайОбъектМетаданныхИмя;
	НоваяСтрока._GUID = Строка(Новый УникальныйИдентификатор());
    НоваяСтрока.МодульИлиФорма = МодульИлиФорма;
    НоваяСтрока.ИмяОсновнойУправляемойФормы = ИмяОсновнойУправляемойФормы;
	
	НоваяСтрока.ЕстьПараметрыТеста = Ложь;
	НоваяСтрока.ИмяТестовогоСлучая = Имя;
	
	ЗаданоСпециальноеПредставлениеТеста = НоваяСтрока.Имя <> НоваяСтрока.ИмяТестовогоСлучая;
	
    Если ПараметрыТеста <> Неопределено Тогда
        СЗ = Новый СписокЗначений();
        СЗ.Добавить(ПараметрыТеста);
        НоваяСтрока.ПараметрыТеста = СЗ;
		НоваяСтрока.ЕстьПараметрыТеста = Истина;
		
		Если Не ЗаданоСпециальноеПредставлениеТеста Тогда
			описаниеПараметра = "<пусто>";
			Если ПараметрыТеста.Свойство("Параметр") Тогда
				описаниеПараметра = "" + ПараметрыТеста.Параметр;
			КонецЕсли;
		
			НоваяСтрока.Имя = НоваяСтрока.Имя + " ( " + описаниеПараметра + " )";
		КонецЕсли;
	КонецЕсли;

    ОповеститьОСобытии("TestLoaded", НоваяСтрока);
	
	Возврат НоваяСтрока;
КонецФункции

&НаКлиенте
Функция ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(РодительскаяСтрока)
	коллекцияСтрок = РодительскаяСтрока.ПолучитьЭлементы();
	Если коллекцияСтрок.Количество() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	количествоТестов = 0;
	Для каждого СтрокаДерева из коллекцияСтрок Цикл
		лКоличество = ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаДерева);
		СтрокаДерева.КоличествоТестов = лКоличество;
        количествоТестов = количествоТестов + лКоличество;
	КонецЦикла;
	Возврат количествоТестов;
КонецФункции

&НаСервере
Функция ПолучитьИмяОсновнойУправляемойФормы(имОбработки)
	Попытка
		лМетаданные = ВнешниеОбработки.Создать(имОбработки).Метаданные();
	Исключение
		лМетаданные = Метаданные.Обработки[имОбработки];
	КонецПопытки;
	метаФорма = лМетаданные.ОсновнаяФорма;
	Если метаФорма = Неопределено Тогда
		метаФорма = лМетаданные.ДополнительнаяФорма;
		Если метаФорма = Неопределено Тогда
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	Если метаФорма.ТипФормы = Метаданные.СвойстваОбъектов.ТипФормы.Управляемая Тогда
		Возврат метаФорма.Имя;
	КонецЕсли;
	Возврат "";
КонецФункции

&НаСервереБезКонтекста
Функция ПодключитьВнешнююОбработкуСервер(АдресХранилища, ИдентификаторОбработки)
    Возврат ВнешниеОбработки.Подключить(АдресХранилища, ИдентификаторОбработки, Ложь); // подключаю не в безопасном режиме
КонецФункции

&НаКлиенте
Функция ПолучитьТестОбъект(ИдентификаторОбработки, имяОсновнойУправляемойФормы)
    Попытка
    	Возврат ПолучитьФорму("ВнешняяОбработка." + ИдентификаторОбработки + ".Форма." + имяОсновнойУправляемойФормы);
    Исключение
	    Попытка
	    	Возврат ПолучитьФорму("Обработка." + ИдентификаторОбработки + ".Форма." + имяОсновнойУправляемойФормы);
	    Исключение
	        Возврат Неопределено;
	    КонецПопытки;
    КонецПопытки;
КонецФункции

&НаКлиенте
Функция ПодключитьНаСервереВнешнююОбработкуОтКлиента(ПолныйПутьФайлаОбработки, ИдентификаторОбработки)
	Если ЕстьВстроеннаяОбработкаСервер(ИдентификаторОбработки) Тогда
    	Возврат ИдентификаторОбработки;
	Иначе
	    АдресХранилища = "";
	    ПоместитьФайл(АдресХранилища, ПолныйПутьФайлаОбработки,, Ложь);
	    Возврат ПодключитьВнешнююОбработкуСервер(АдресХранилища, ИдентификаторОбработки);
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьВстроеннаяОбработкаСервер(ИдентификаторОбработки)
	Возврат Метаданные.Обработки.Найти(ИдентификаторОбработки) <> Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеВстроеннойОбработкиСервер(ИдентификаторОбработки)
	Возврат Метаданные.Обработки.Найти(ИдентификаторОбработки).Представление();
КонецФункции

&НаКлиенте
Функция ДобавитьТест(РодительскаяСтрока, ФайлТестовогоСлучая)
    Перем ТестовыйСлучайОбъект; // специально локальная переменная для исключения циклических ссылок
	
	Если ТипЗнч(ФайлТестовогоСлучая) = Тип("Структура") Тогда
		полныйПуть = ФайлТестовогоСлучая.ПолноеИмя;
		лИмяОбработки = ФайлТестовогоСлучая.Имя; //Сред(ФайлТестовогоСлучая, 11);
		ТестовыйСлучайОбъектМетаданныхИмя = лИмяОбработки;
		
		ИмяОсновнойУправляемойФормы = ПолучитьИмяОсновнойУправляемойФормы(лИмяОбработки);
		Если Не ПустаяСтрока(ИмяОсновнойУправляемойФормы) Тогда
			ТестовыйСлучайОбъект = ПолучитьТестОбъект(ТестовыйСлучайОбъектМетаданныхИмя, ИмяОсновнойУправляемойФормы);
		КонецЕсли;
		
		СтрокаТеста = ДобавитьСтрокуДереваТестов(РодительскаяСтрока,
		ПредставлениеВстроеннойОбработкиСервер(лИмяОбработки),
		лИмяОбработки,
		полныйПуть, //ФайлТестовогоСлучая,
		ТестовыйСлучайОбъектМетаданныхИмя,,
		ЗначенияТиповСтроки.ТестовыйСлучай);
	Иначе
		полныйПуть = ФайлТестовогоСлучая.ПолноеИмя;
		ТестовыйСлучайОбъектМетаданныхИмя = Строка(Новый УникальныйИдентификатор());
		Попытка
			лИмяОбработки = ПодключитьНаСервереВнешнююОбработкуОтКлиента(полныйПуть, ТестовыйСлучайОбъектМетаданныхИмя);
			
			ИмяОсновнойУправляемойФормы = ПолучитьИмяОсновнойУправляемойФормы(лИмяОбработки);
			Если ИмяОсновнойУправляемойФормы = "" Тогда
				//Возврат "НЕТ_ФОРМЫ"; // ВОзврат Неопределено;
			Иначе
				ТестовыйСлучайОбъект = ПолучитьТестОбъект(ТестовыйСлучайОбъектМетаданныхИмя, ИмяОсновнойУправляемойФормы);
			КонецЕсли;
			
		Исключение
			ВывестиОшибку("Тест не загружен: " + полныйПуть + "Ошибка: " + ОписаниеОшибки());
			
			Возврат Неопределено;
		КонецПопытки;
		
		СтрокаТеста = ДобавитьСтрокуДереваТестов(РодительскаяСтрока,
		ФайлТестовогоСлучая.ИмяБезРасширения,
		ФайлТестовогоСлучая.ИмяБезРасширения,
		полныйПуть,
		ТестовыйСлучайОбъектМетаданныхИмя,,
		ЗначенияТиповСтроки.ТестовыйСлучай);
	КонецЕсли;
	 
    Если ТестовыйСлучайОбъект <> Неопределено Тогда
    	МассивТестовыхМетодов = ПолучитьТестовыеСлучаи(ТестовыйСлучайОбъект, полныйПуть);
		Если МассивТестовыхМетодов <> Неопределено Тогда
		
			Для каждого ТестовыйМетод из МассивТестовыхМетодов Цикл
				#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
				#КонецЕсли 
				
				Если ТипЗнч(ТестовыйМетод) = Тип("Строка") Тогда
					имяТестовогоМетода = ТестовыйМетод;
					параметрыТеста = Неопределено;
					ПредставлениеТеста = имяТестовогоМетода;
	            Иначе
	                имяТестовогоМетода = ТестовыйМетод.ИмяТеста;
	                параметрыТеста = ТестовыйМетод;
					Если НЕ ТестовыйМетод.Свойство("ПредставлениеТеста", ПредставлениеТеста) или 
							не ЗначениеЗаполнено(ПредставлениеТеста) Тогда
						ПредставлениеТеста = имяТестовогоМетода;
					КонецЕсли;
				КонецЕсли;
				
    			ДобавитьСтрокуДереваТестов(СтрокаТеста,
                                           ПредставлениеТеста,
                                           имяТестовогоМетода,
                                           полныйПуть,
                                           ТестовыйСлучайОбъектМетаданныхИмя,,
                                           ЗначенияТиповСтроки.ТестовыйМетод,
										   параметрыТеста,,
                                           ЗначениеМодульИлиФорма.Форма);
    		КонецЦикла;
        КонецЕсли;
    КонецЕсли;
    
    Возврат СтрокаТеста;
КонецФункции

		//#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		//&НаКлиенте
		//Процедура ДобавитьТестТолстыйКлиент(ИдентификаторРодительскойСтроки, Файл)
		//	//ОбъектUTR = ВнешниеОбработки.Создать(ИспользуемоеИмяФайла(), Ложь); // подключаю не в безопасном режиме
		//	ОбъектUTR = ПолучитьОбъектUTR();

		//	СтрокаДЗ = Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторРодительскойСтроки);
		//	ДобавитьТест(СтрокаДЗ, Файл);
		//		//ОбъектUTR.ДобавитьТест(СтрокаДЗ, Файл,, Ложь, Истина);
		//КонецПроцедуры
		//#КонецЕсли

&НаСервере
Процедура ДобавитьТестНаСервере(ИдентификаторРодительскойСтроки, ТестовыйСлучайОбъектМетаданныхИмя)
    ОбъектUTR = Объект();
    СтрокаДЗ = Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторРодительскойСтроки);
    ОбъектUTR.ДобавитьТест(СтрокаДЗ, Новый Файл(СтрокаДЗ.ПолныйПуть), ТестовыйСлучайОбъектМетаданныхИмя, Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТестовыеСлучаи(ТестовыйСлучайОбъект, ТестовыйСлучайИмяФайла)
    Попытка
    	МассивТестовыхМетодов = ТестовыйСлучайОбъект.ПолучитьСписокТестов(ЭтаФорма);
	Исключение
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ;
		
		// TODO если не использовать переменную ниже, а поставить вызов метода в условие, то будет глюк - внутрь условия не попадаем !
		ЕстьОшибка_МетодОбъектаНеОбнаружен = ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, "ПолучитьСписокТестов");
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен Тогда
	    	ВывестиОшибку("Тестовый случай не загружен: " + ТестовыйСлучайИмяФайла + "
	        |  Ошибка получения списка тестовых случаев: " + ОписаниеОшибки());
		КонецЕсли;

    	Возврат Неопределено;
    КонецПопытки;
    	
	Если ТипЗнч(МассивТестовыхМетодов) <> Тип("Массив") Тогда
		ВывестиОшибку("Тест не загружен: " + ТестовыйСлучайИмяФайла + "
		|  Ошибка получения списка тестовых случаев: вместо массива 
        |имен тестовых случаев получен объект <" + Строка(ТипЗнч(МассивТестовыхМетодов)) + ">");

		Возврат Неопределено;			
	КонецЕсли;
	
	Возврат МассивТестовыхМетодов;
КонецФункции

&НаКлиенте
Функция _ВыполнитьВыбранныеТесты(МассивИдентификаторовСтрок)
	Перем ТипОтчетаОТестировании;
	ПередВыполнениемТестов();
	
	датаНачалаТестирования = ТекущаяДата();
	
	СтрокиДереваТестов = Новый Массив;
	Для каждого Идентификатор Из МассивИдентификаторовСтрок Цикл
		СтрокиДереваТестов.Добавить(Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор));
	КонецЦикла;
	
	СостояниеРезультат = _ВыполнитьТесты(СтрокиДереваТестов);
	
	ТипОтчетаОТестировании = ?(ПустаяСтрока(ЭтаФорма.ТипОтчетаОТестировании), "mxl", ЭтаФорма.ТипОтчетаОТестировании);
		
	табДок = ВывестиОтчетТестирования(датаНачалаТестирования, ТипОтчетаОТестировании);
	
	имяФайлаТестирования = "лог_тестирования";
	
	Если табДок <> Неопределено Тогда
		Если НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			Если ТипОтчетаОТестировании = "xml" Тогда
				ЗаписьXML = Новый ЗаписьXML;
				Попытка
					ЗаписьXML.ОткрытьФайл(ПутьОтчетаТестирования + "\" + имяФайлаТестирования + "."+ТипОтчетаОТестировании);
					ЗаписьXML.ЗаписатьОбъявлениеXML();
					ЗаписьXML.ЗаписатьБезОбработки(табДок.ПолучитьТекст());
					ЗаписьXML.Закрыть();
				Исключение
				КонецПопытки;
			Иначе
				Попытка
					табДок.Записать(ПутьОтчетаТестирования + "\" + имяФайлаТестирования + "."+ТипОтчетаОТестировании, ТипФайлаТабличногоДокумента[ТипОтчетаОТестировании]);
				Исключение
				КонецПопытки;
			КонецЕсли;
		Иначе
			табДок.Показать("Отчет об автоматическом тестировании, xUnitFor1C v." + ВерсияСервер());
		КонецЕсли;
	Иначе // все тесты прошли
		Если НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда

			Попытка
				УдалитьФайлы(ПутьОтчетаТестирования + "\" + имяФайлаТестирования + ".xlsx");
			Исключение
			КонецПопытки;

			Попытка
				УдалитьФайлы(ПутьОтчетаТестирования + "\" + имяФайлаТестирования + ".mxl");
			Исключение
			КонецПопытки;


		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеРезультат;
КонецФункции

&НаКлиенте
Функция _ВыполнитьТесты(СтрокиДереваТестов) Экспорт
	СостояниеРезультат = ЗначенияСостоянияТестов.НеВыполнялся;
	Для каждого СтрокаДереваТестов из СтрокиДереваТестов Цикл
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли 
		
		Если СтрокаДереваТестов.ТипСтроки = ЗначенияТиповСтроки.ТестовыйМетод Тогда

			ВсегоТестов = ВсегоТестов + 1; //Объект.мВсегоТестов = Объект.мВсегоТестов + 1;
			
			НовоеСостояние = ВыполнитьТестВЗависимостиОтВидаТеста_МодульИлиФорма(СтрокаДереваТестов, СписокОшибок);
				//Если СтрокаДереваТестов.МодульИлиФорма = ЗначениеМодульИлиФорма.Форма Тогда
				//	НовоеСостояние = ВыполнитьТест(СтрокаДереваТестов);
				//Иначе
				//		//#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
				//		//	
				//		//	НовоеСостояние = ВыполнитьТестТолстыйКлиент(СтрокаДереваТестов.ПолучитьИдентификатор());
				//		//	
				//		//#Иначе
				//		
				//	НовоеСостояние = ВыполнитьТестНаСервере(СтрокаДереваТестов.ПолучитьИдентификатор(), СписокОшибок);
				//		
				//		//#КонецЕсли
				//КонецЕсли;
		Иначе
			НовоеСостояние = _ВыполнитьТесты(СтрокаДереваТестов.ПолучитьЭлементы());
		КонецЕсли;
		
		СтрокаДереваТестов.Состояние = НовоеСостояние;
		ЗапомнитьСамоеХудшееСостояние(СостояниеРезультат, НовоеСостояние);
	КонецЦикла;
	
	Возврат СостояниеРезультат;
КонецФункции

&НаКлиенте
Функция ВыполнитьТестВЗависимостиОтВидаТеста_МодульИлиФорма(СтрокаДереваТестов, СписокОшибок)
	Если Объект.РегистрацияПрохожденияТестовВЖР Тогда
		Родитель = Объект.ДеревоТестов.НайтиПоИдентификатору(СтрокаДереваТестов.ПолучитьИдентификатор()).ПолучитьРодителя();
		ЗарегистрироватьНачалоПрохожденияТестаСервер(СтрокаДереваТестов.ИмяТестовогоСлучая, Родитель.ПолныйПуть);
	КонецЕсли;

	Если СтрокаДереваТестов.МодульИлиФорма = ЗначениеМодульИлиФорма.Форма Тогда
		СостояниеРезультат = ВыполнитьТест(СтрокаДереваТестов);
    Иначе
				//#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
				//	
				//	НовоеСостояние = ВыполнитьТестТолстыйКлиент(СтрокаДереваТестов.ПолучитьИдентификатор());
				//	
				//#Иначе
				
		КоличествоОшибокДо = СписокОшибок.Количество();
		
		СостояниеРезультат = ВыполнитьТестНаСервере(СтрокаДереваТестов.ПолучитьИдентификатор(), СписокОшибок);
		
		Если КоличествоОшибокДо <> СписокОшибок.Количество() Тогда
			ОповеститьОСобытии("TestFailed", СтрокаДереваТестов);
		КонецЕсли;
		
				//#КонецЕсли
	КонецЕсли;

	СтрокаДереваТестов.Состояние = СостояниеРезультат;
	
	Возврат СостояниеРезультат;
КонецФункции

&НаКлиенте
Функция ВыполнитьТест(СтрокаДереваТестов) Экспорт
	Перем Тест; // специально локальная переменная для исключения циклических ссылок

	ИдентификаторСтроки = СтрокаДереваТестов.ПолучитьИдентификатор();
	
	ИмяТестовогоМетода	= СтрокаДереваТестов.ИмяТестовогоСлучая; //Имя;
	ПолноеИмяТестовогоМетода = СтрокаДереваТестов.Имя;
	
	Если ПустаяСтрока(СтрокаДереваТестов.ТестовыйСлучайОбъектМетаданныхИмя) Тогда
		Возврат ЗначенияСостоянияТестов.НеВыполнялся;
	КонецЕсли;
	
	полныйПуть = СтрокаДереваТестов.ПолныйПуть;
	
	ТестовыйСлучайОбъектМетаданныхИмя = СтрокаДереваТестов.ТестовыйСлучайОбъектМетаданныхИмя;
	Попытка
        лИмяОбработки = ПодключитьНаСервереВнешнююОбработкуОтКлиента(полныйПуть, ТестовыйСлучайОбъектМетаданныхИмя);
	Исключение
		ВывестиОшибку("Тест не загружен: " + полныйПуть + "Ошибка: " + ОписаниеОшибки());

		Возврат ЗначенияСостоянияТестов.Сломался;
	КонецПопытки;
	
	ТекущаяДата = ТекущаяДата();
	Попытка
		Тест = ПолучитьТестОбъект(ТестовыйСлучайОбъектМетаданныхИмя, СтрокаДереваТестов.ИмяОсновнойУправляемойФормы);
		массивТестов = ПолучитьТестовыеСлучаи(Тест, полныйПуть); // возможно, что тест сохранит у себя ссылку на браузер
		ПроверитьЗаполненность(массивТестов, "Не удалось получить тестовые случаи");
	Исключение
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ;
		СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(ПолноеИмяТестовогоМетода, текстОшибки, СтрокаДереваТестов, ОписаниеОшибки(), ИнформацияОбОшибке());
		
		Тест = Неопределено; // для исключения циклических ссылок
		
		Возврат СостояниеВыполнения;
		
	КонецПопытки;
	
	СостояниеВыполнения = ЗначенияСостоянияТестов.НеВыполнялся;
	
	параметрыТеста = СтрокаДереваТестов.ПараметрыТеста;
	естьПараметры = СтрокаДереваТестов.ЕстьПараметрыТеста;
	
	естьТранзакция = Ложь;
	Если естьПараметры Тогда
		естьТранзакция = ?(ТипЗнч(параметрыТеста) = Тип("Структура"), параметрыТеста, параметрыТеста[0].Значение).Свойство("Транзакция", естьТранзакция) 
			или ТипЗнч(естьТранзакция) = Тип("Булево") и естьТранзакция;
		Если естьТранзакция Тогда
			#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
				НачатьТранзакцию();
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
		//TODO Если первый раз запуск setup оказался неуспешным, то при повторном прогоне без перезагрузки
		// не выполнять, также не выполнять для следующих тестовых случаев.
	лСостояниеВыполнения = ВыполнитьПроцедуруТестовогоСлучая(Тест, "ПередЗапускомТеста", ПолноеИмяТестовогоМетода, СтрокаДереваТестов);
	Если лСостояниеВыполнения <> Неопределено Тогда
		СостояниеВыполнения = лСостояниеВыполнения;
	КонецЕсли;
	Если СостояниеВыполнения = ЗначенияСостоянияТестов.Сломался Тогда
		Возврат ЗначенияСостоянияТестов.Сломался;
	КонецЕсли;
		
	переданПараметрТеста = Ложь;
	параметрТеста = "";
	
	Если естьПараметры Тогда
		лПараметрыТеста = ?(ТипЗнч(параметрыТеста) = Тип("Структура"), параметрыТеста, параметрыТеста[0].Значение);
		переданПараметрТеста = лПараметрыТеста.Свойство("Параметр", параметрТеста);
		
		Если переданПараметрТеста Тогда
			строкаПараметров = "параметрТеста";	
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		
		Выполнить("Тест." + ИмяТестовогоМетода + "(" + строкаПараметров + ");");
		
		СостояниеВыполнения = ЗначенияСостоянияТестов.Прошел;
		ОповеститьОСобытии("TestPassed", СтрокаДереваТестов);
	Исключение
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ; //Ошибка.Описание + ". " + Ошибка.Причина.Описание + ". Номер строки: " + Ошибка.НомерСтроки;
		
		Если ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, ИмяТестовогоМетода) Тогда
				//Если Найти(текстОшибки, "Метод объекта не обнаружен ("+ИмяТестовогоМетода+")") > 0 Тогда
			СостояниеВыполнения = ЗначенияСостоянияТестов.НеРеализован;
			ОповеститьОСобытии("TestNotImplemented", СтрокаДереваТестов);
		Иначе
			СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(ПолноеИмяТестовогоМетода, текстОшибки, СтрокаДереваТестов, ОписаниеОшибки(), ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;	
	
	лСостояниеВыполнения = ВыполнитьПроцедуруТестовогоСлучая(Тест, "ПослеЗапускаТеста", ПолноеИмяТестовогоМетода, СтрокаДереваТестов);
	Если лСостояниеВыполнения <> Неопределено Тогда
		СостояниеВыполнения = ЗапомнитьСамоеХудшееСостояние(СостояниеВыполнения, лСостояниеВыполнения); //СостояниеВыполнения = лСостояниеВыполнения;
	КонецЕсли;
	
	Если естьТранзакция Тогда
			#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
				ОтменитьТранзакцию();
			#КонецЕсли
		//ОтменитьТранзакцию_сервер();
	КонецЕсли;
	
	Тест = Неопределено; // для исключения циклических ссылок
	
	СтрокаДереваТестов = Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтрокаДереваТестов.ВремяВыполнения = Число(ТекущаяДата()-ТекущаяДата);
	Возврат СостояниеВыполнения;
КонецФункции

		//#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		//&НаКлиенте
		//Функция ВыполнитьТестТолстыйКлиент(ИдентификаторСтрокиТестовогоМетода)
		//	//Возврат ВнешниеОбработки.Создать(ИспользуемоеИмяФайла(), Ложь).ВыполнитьТест(Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторСтрокиТестовогоМетода));// подключаю не в безопасном режиме
		//	ОбъектUTR = ПолучитьОбъектUTR();
		//	Возврат ОбъектUTR.ВыполнитьТест(Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторСтрокиТестовогоМетода));// подключаю не в безопасном режиме
		//КонецФункции
		//#КонецЕсли

&НаСервере
Функция ВыполнитьТестНаСервере(ИдентификаторСтрокиТестовогоМетода, СписокОшибокРез)
    Возврат Объект().ВыполнитьТест(Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторСтрокиТестовогоМетода), СписокОшибокРез);
КонецФункции

&НаКлиенте
Функция ВыполнитьПроцедуруТестовогоСлучая(Тест, ИмяПроцедуры, ИмяТестовогоСлучая, СтрокаДереваТестов)
	СостояниеВыполнения = Неопределено;
	
	Попытка
		Выполнить("Тест." + ИмяПроцедуры + "();");
	Исключение
		Ошибка = ИнформацияОбОшибке();
		текстОшибки = ПодробноеПредставлениеОшибки(Ошибка) ;
		
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, ИмяПроцедуры) Тогда
				//Если Найти(текстОшибки, "Метод объекта не обнаружен (" + ИмяПроцедуры + ")") = 0 Тогда
			СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(ИмяТестовогоСлучая, текстОшибки, СтрокаДереваТестов, ОписаниеОшибки(), ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;

	Возврат СостояниеВыполнения;

КонецФункции

&НаСервере
Процедура ПередВыполнениемТестов()
	СписокОшибок = Новый СписокЗначений;
	ВсегоТестов = 0;
КонецПроцедуры

// Возвращаем Неопределено, если все тесты прошли
&НаСервере
Функция ВывестиОтчетТестирования(датаНачалаТестирования, ТипОтчета =  "mxl") Экспорт
		
	Если ТипОтчета = "xml" Тогда
		
		Текст = ВывестиОтчетТестированияВФорматеJunitXML(датаНачалаТестирования);
		ТабДокумент = Новый ТекстовыйДокумент;
		ТабДокумент.УстановитьТекст(Текст);
		Возврат ТабДокумент;
		
	КонецЕсли;
		
	КоличествоОшибок = СписокОшибок.Количество();
	Если КоличествоОшибок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПрошлоВремени = ТекущаяДата() - датаНачалаТестирования;
	
	ТабДок = Новый ТабличныйДокумент;
	макет = Объект().ПолучитьМакет("ОтчетТестирования");

	Секция = макет.ПолучитьОбласть("Заголовок"); //"R1C1:R6C1");
	Секция.Параметры.ВсегоТестов = ВсегоТестов;
	Секция.Параметры.КоличествоОшибок = СписокОшибок.Количество();
	Секция.Параметры.ПрошлоВремени = ПрошлоВремени;
	Секция.Параметры.ПрошлоВремениСтрока = формат(Дата(1,1,1) + ПрошлоВремени, "ДЛФ=T");
	Секция.Параметры.ВремяВыполненияОдногоТеста = ?(ВсегоТестов = 0, "", Формат(ПрошлоВремени / ВсегоТестов * 1000, "ЧЦ=15; ЧДЦ=2"));
	ТабДок.Вывести(Секция);

	ТабДок.НачатьАвтогруппировкуСтрок();
	
	Для Каждого Ошибка Из СписокОшибок Цикл
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли 

		ВывестиОшибкуВМакет(ТабДок, макет, Ошибка.Значение);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабДок;
КонецФункции

Процедура ВывестиОшибкуВМакет(ТабДок, макет, _Ошибка)
	Секция = макет.ПолучитьОбласть("НаименованиеНабора");
	ЗаполнитьЗначенияСвойств(Секция.Параметры, _Ошибка);
	ТабДок.Вывести(Секция, 1);
	
	Секция = макет.ПолучитьОбласть("НаименованиеТеста");
	ЗаполнитьЗначенияСвойств(Секция.Параметры, _Ошибка);
	ТабДок.Вывести(Секция, 2);
	
	Если _Ошибка.ЕстьПараметрыТеста Тогда
		Секция = макет.ПолучитьОбласть("ПараметрыТеста");
		ЗаполнитьЗначенияСвойств(Секция.Параметры, _Ошибка);
			//Секция.Область("R4C1").Текст = "Параметр метода: "+_Ошибка.ПараметрыТеста;
		ТабДок.Вывести(Секция, 2);
	КонецЕсли;
	
	ИнфоОшибки = _Ошибка.ИнфоОшибки;
	Пока ИнфоОшибки <> Неопределено Цикл
		Секция = макет.ПолучитьОбласть("R1C1:R4C3");
		Секция.Область("R1C3").Текст = ИнфоОшибки.ИмяМодуля + ", строка № "+ИнфоОшибки.НомерСтроки;
		Секция.Область("R2C3").Текст = ИнфоОшибки.ИсходнаяСтрока;
		Секция.Область("R3C3").Текст = ИнфоОшибки.Описание;
		
		ТабДок.Вывести(Секция, 3);
		
		ИнфоОшибки = ИнфоОшибки.Причина;
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗаполнитьРезультатТестовогоСлучая(ЗаписьXML, СтрокаТестов, КэшОшибок)
	
	#Если _ Тогда
	ЗаписьXML = Новый ЗаписьXML;
	#КонецЕсли
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("testcase");
	ЗаписьXML.ЗаписатьАтрибут("classname", СтрокаТестов.Родитель.ИмяТестовогоСлучая);
	ЗаписьXML.ЗаписатьАтрибут("name", СтрокаТестов.Имя);
	ЗаписьXML.ЗаписатьАтрибут("time", XMLСтрока(СтрокаТестов.ВремяВыполнения));
	
	КлючСоответствия	= СтрокаТестов._guid;
	СтруктураОшибки		= КэшОшибок.Получить(КлючСоответствия);
	
	Если СтруктураОшибки <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("status", "failure");
		ЗаписьXML.ЗаписатьНачалоЭлемента("failure");
		ЗаписьXML.ЗаписатьАтрибут("message", XMLСтрока(СтруктураОшибки.Описание));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("status", "success " + XMLСтрока(СтрокаТестов.ВремяВыполнения) + " s");
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаполнитьРезультатТестовИерархически(ЗаписьXML, СтрокаТестов, КэшОшибок) 
	
	#Если _ Тогда
	ЗаписьXML = Новый ЗаписьXML;
	#КонецЕсли

	Если СтрокаТестов.ТипСтроки = ЗначенияТиповСтроки.ТестовыйМетод Тогда
		
		ЗаполнитьРезультатТестовогоСлучая(ЗаписьXML, СтрокаТестов, КэшОшибок);
		Возврат;
		
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("testsuite");	
	ЗаписьXML.ЗаписатьАтрибут("name", СтрокаТестов.Имя);
	ЗаписьXML.ЗаписатьНачалоЭлемента("properties");
	
	Если СтрокаТестов.ЕстьПараметрыТеста Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("property");
		ЗаписьXML.ЗаписатьАтрибут("ЕстьПараметрыТеста",XMLСтрока(СтрокаТестов.ЕстьПараметрыТеста));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Для каждого ЭлементСтроки из СтрокаТестов.Строки Цикл 
		
		Если ЭлементСтроки.ТипСтроки = ЗначенияТиповСтроки.ТестовыйМетод Тогда 
			ЗаполнитьРезультатТестовогоСлучая(ЗаписьXML, ЭлементСтроки, КэшОшибок);
			Продолжить;
		Иначе 
			ЗаполнитьРезультатТестовИерархически(ЗаписьXML, ЭлементСтроки, КэшОшибок)
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ВывестиОтчетТестированияВФорматеJunitXML(датаНачалаТестирования) Экспорт 
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
		
	КоличествоОшибок = СписокОшибок.Количество();
	
	КэшОшибок = Новый Соответствие();
	Для каждого ЭлементСписка из СписокОшибок Цикл
		
		КлючСоответствия = ЭлементСписка.Значение["УИДСтрокиДерева"];
		КэшОшибок.Вставить(КлючСоответствия, ЭлементСписка.Значение);
		
	КонецЦикла;
	
	КэшОшибок = Новый ФиксированноеСоответствие(КэшОшибок);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("testsuites");
	ЗаписьXML.ЗаписатьАтрибут("tests", XMLСтрока(ВсегоТестов));
	ЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока("1CUNIT")); //TODO: указывать путь к набору тестов. 
	ЗаписьXML.ЗаписатьАтрибут("time", XMLСтрока(Число(ТекущаяДата() - датаНачалаТестирования)));
	ЗаписьXML.ЗаписатьАтрибут("failures", XMLСтрока(КоличествоОшибок));
	ДеревоТестов = ДанныеФормыВЗначение(Объект.ДеревоТестов, Тип("ДеревоЗначений"));
	Для каждого ЭлементСтроки из ДеревоТестов.Строки Цикл
		ЗаполнитьРезультатТестовИерархически(ЗаписьXML, ЭлементСтроки, КэшОшибок);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
	
КонецФункции

&НаКлиенте
Функция ВывестиОшибкуВыполненияТеста(ПолноеИмяТестовогоМетода, текстОшибки, СтрокаДереваТестов, СообщениеОбОшибке, ИнфоОшибки)

	СостояниеВыполнения = ЗначенияСостоянияТестов.Сломался;
	
	СтруктураОшибки = Новый Структура;
	
	стИнфоОшибки = Новый Структура("ИмяМодуля,ИсходнаяСтрока,НомерСтроки,Описание");
	ЗаполнитьЗначенияСвойств(стИнфоОшибки, ИнфоОшибки);
	стИнфоОшибки.Вставить("Причина",  Неопределено);
	
	стИнфоОшибкиЦикл = стИнфоОшибки;
	ИнфоОшибки = ИнфоОшибки.Причина;
	Пока ИнфоОшибки <> Неопределено Цикл  // Артур TODO
		стИнфоОшибкиЦикл.Причина = Новый Структура("ИмяМодуля,ИсходнаяСтрока,НомерСтроки,Описание");
		стИнфоОшибкиЦикл = стИнфоОшибкиЦикл.Причина;
		ЗаполнитьЗначенияСвойств(стИнфоОшибкиЦикл, ИнфоОшибки);
		стИнфоОшибкиЦикл.Вставить("Причина",  Неопределено);

		ИнфоОшибки = ИнфоОшибки.Причина;
	КонецЦикла;
	
	Родитель = Объект.ДеревоТестов.НайтиПоИдентификатору(СтрокаДереваТестов.ПолучитьИдентификатор()).ПолучитьРодителя();
	СтруктураОшибки.Вставить("ИмяТестовогоНабора", Родитель.Имя);
	СтруктураОшибки.Вставить("ИмяТестовогоСлучая", ПолноеИмяТестовогоМетода);				
	
	СтруктураОшибки.Вставить("Описание", текстОшибки);
	
	СтруктураОшибки.Вставить("СообщениеОбОшибке",     СообщениеОбОшибке);
	СтруктураОшибки.Вставить("ИнфоОшибки",            стИнфоОшибки);
	СтруктураОшибки.Вставить("ЕстьПараметрыТеста",    СтрокаДереваТестов.ЕстьПараметрыТеста);
	СтруктураОшибки.Вставить("ПараметрыТеста",        СтрокаДереваТестов.ПараметрыТеста);
	СтруктураОшибки.Вставить("ПолныйПуть",            СтрокаДереваТестов.ПолныйПуть);
	СтруктураОшибки.Вставить("УИДСтрокиДерева",       СтрокаДереваТестов._guid);
	
	СписокОшибок.Добавить(СтруктураОшибки);
	
	ВывестиОшибку(СтруктураОшибки);
	
	ОповеститьОСобытии("TestFailed", СтрокаДереваТестов);

	Возврат СостояниеВыполнения;

КонецФункции

&НаКлиенте
Функция ОповеститьОСобытии(ИмяСобытия, Аргумент1 = Неопределено)
	рез = Истина;
	Если MiddleMan <> Неопределено Тогда
		Попытка
			Выполнить("MiddleMan." + ИмяСобытия + "(Аргумент1);");
		Исключение
			рез = Ложь;
		КонецПопытки;
	КонецЕсли;
	#Если Клиент Тогда 
		Оповестить("xUnitFor1C." + ИмяСобытия, Аргумент1);
	#КонецЕсли
	Возврат рез;
	
КонецФункции

&НаКлиенте
Функция ЗапомнитьСамоеХудшееСостояние(ТекущееСостояние, НовоеСостояние)
    ТекущееСостояние = Макс(ТекущееСостояние, НовоеСостояние); // TODO некоторый хак, который зависит от порядка заполнения в мЗначенияСостоянияТестов
	Возврат ТекущееСостояние;
КонецФункции

&НаСервере
Процедура ЗарегистрироватьНачалоПрохожденияТестаСервер(ИмяТестовогоСлучая, ПолныйПуть)
	Объект().ЗарегистрироватьНачалоПрохожденияТеста(ИмяТестовогоСлучая, ПолныйПуть);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ЭКСПОРТНЫЕ ФУНКЦИИ

&НаКлиенте
Функция ВывестиОшибку(Ошибка) Экспорт
	ТипОбъектаОшибка = ТипЗнч(Ошибка);
		
	Если ТипОбъектаОшибка = Тип("Структура") Тогда
		ВывестиСообщение("[" + Ошибка.ИмяТестовогоНабора + ": " + Ошибка.ИмяТестовогоСлучая + "] " + Ошибка.Описание, СтатусСообщения.Важное);
	ИначеЕсли ТипОбъектаОшибка = Тип("ИнформацияОбОшибке") Тогда
		ВывестиСообщение(Ошибка.Описание, СтатусСообщения.Важное);
	Иначе
		ВывестиСообщение(Ошибка, СтатусСообщения.Важное);
	КонецЕсли;
КонецФункции

// Выводит сообщение. В тестах ВСЕГДА должна использоваться ВМЕСТО метода Сообщить().
// 
&НаКлиенте
Функция ВывестиСообщение(ТекстСообщения, Статус = Неопределено)	Экспорт
	Если MiddleMan <> Неопределено Тогда
		Если НЕ ОповеститьОСобытии("Message", ТекстСообщения) Тогда
			ОповеститьОСобытии("ВывестиСообщение", ТекстСообщения);
		КонецЕсли;
    Иначе
		Сообщить(ТекстСообщения);	
	КонецЕсли;
КонецФункции

// Вызывает исключение с заданным текстом ошибки для прерывания выполнения тестового случая.
// 
&НаКлиенте
Функция ПрерватьТест(ТекстОшибки) Экспорт
	
	ВызватьИсключение ТекстОшибки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Символы.ПС + ДопСообщениеОшибки;
КонецФункции

&НаКлиенте
Функция Новый_НаборТестов() Экспорт
	Возврат Новый Массив;
КонецФункции

&НаКлиенте
Функция НаборТестов_Добавить(НаборТестов, ИмяТестовогоСлучая, П1 = Неопределено, П2 = Неопределено, П3 = Неопределено,
                             П4 = Неопределено, П5 = Неопределено, П6 = Неопределено, П7 = Неопределено) Экспорт
    НаборТестов.Добавить(ИмяТестовогоСлучая);

    Возврат НаборТестов;
КонецФункции

Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, имяМетода)
	Возврат Найти(текстОшибки, "Метод объекта не обнаружен ("+имяМетода+")") > 0;
КонецФункции

//////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбъектНаСервере = Объект();
	ЭтаФорма.Заголовок = ОбъектНаСервере.ЗаголовокФормы();
	
	ЗапретИспользованияИнформатора = Истина;
	
	Если ЗначениеЗаполнено(Параметры.Пути) Тогда
        ПутиПараметр = Параметры.Пути;
    КонецЕсли;
    
    //{ Состояния тестов - ВАЖЕН порядок заполнения в мЗначенияСостоянияТестов, используется в ЗапомнитьСамоеХудшееСостояние
    ЗначенияСостоянияТестов = Новый Структура;
    ЗначенияСостоянияТестов.Вставить("НеВыполнялся", 0);
    ЗначенияСостоянияТестов.Вставить("Прошел", 1);
    ЗначенияСостоянияТестов.Вставить("НеРеализован", 2);
    ЗначенияСостоянияТестов.Вставить("Сломался", 3);
	ЗначенияСостоянияТестов = Новый ФиксированнаяСтруктура(ЗначенияСостоянияТестов);
    //} 

    //{ Типы строк дерева тестов
    ЗначенияТиповСтроки = Новый Структура;
    ЗначенияТиповСтроки.Вставить("КаталогТестов", 0);
    ЗначенияТиповСтроки.Вставить("ТестовыйСлучай", 1);
    ЗначенияТиповСтроки.Вставить("ТестовыйМетод", 2);
	ЗначенияТиповСтроки = Новый ФиксированнаяСтруктура(ЗначенияТиповСтроки);
    //} 
    
    ЗначениеМодульИлиФорма = Новый Структура();
    ЗначениеМодульИлиФорма.Вставить("Модуль", 1);
    ЗначениеМодульИлиФорма.Вставить("Форма", 2);
	ЗначениеМодульИлиФорма = Новый ФиксированнаяСтруктура(ЗначениеМодульИлиФорма);
	
	СоздатьКнопкуПерезагрузитьФормуНаКоманднойПанелиФормы("Перезагрузить браузер тестирования", Ложь); // блок кода для переоткрытия формы
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПутиПараметр) Тогда
		ПользовательскиеПутиСохр = Пути;
		Пути = ПутиПараметр;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пути) Тогда
		ОбновитьНадписьПути();
		
		Попытка
			LoadAllTests();
		Исключение
			текстОшибки = ОписаниеОшибки();
			ВывестиСообщение("ОШИБКА загрузки тестов: "+текстОшибки);
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

// Пример строки запуска - "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования"
//	"C:\Program Files (x86)\1cv82\8.2.18.96\bin\1cv8c.exe" /DisableStartupMessages /Execute E:\ТестыИМ\xddTestRunner.epf /S "as-msk-a6122\im_test" /Out "E:\ТестыИМ\Тесты\log.txt"  /C "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования" /LogUI
&НаКлиенте
Функция ОбработатьПараметрыЗапуска(СтрокаПараметровЗапуска)
	
	ПараметрыЗапуска = РазобратьПараметрыЗапускаСервер(СтрокаПараметровЗапуска);
	Если ПараметрыЗапуска = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	естьКоманда_ВыполнитьТестирование = ПараметрыЗапуска.Выполнить;
	естьКоманда_Загрузить = ПараметрыЗапуска.Загрузить;
	путьКТестам = ПараметрыЗапуска.ПутьТестов;
	лЗавершитьРаботуПослеТестирования = ПараметрыЗапуска.ОстановитьСистему;
	
	ПутьОтчетаТестирования = ПараметрыЗапуска.ПутьОтчета;
	ТипОтчетаОТестировании = ПараметрыЗапуска.ФорматОтчета;
	ПутьКФайлуЛога = ПараметрыЗапуска.ПутьКодаВозврата;
	Объект.РегистрацияПрохожденияТестовВЖР = ПараметрыЗапуска.РегистрацияПрохожденияТестовВЖР;
	Объект.РегистрацияОшибокТестовВЖР = ПараметрыЗапуска.РегистрацияОшибокТестовВЖР;
	мЭтоВнутренняяОбработка = ПараметрыЗапуска.ВстроенныеТесты;
	
	Если ЗначениеЗаполнено(путьКТестам) Тогда
	    ПутиПараметр.Добавить(путьКТестам);
        ПользовательскиеПутиСохр = Пути;
        Пути = ПутиПараметр;
    КонецЕсли;
    
	Если Не естьКоманда_Загрузить Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаписатьКодВозвратаВЛогФайл(ПутьКФайлуЛога, "1"); //По умолчанию считаем что ошибка. Перед завершением работы запишем 0.

	ОбновитьНадписьПути();
	
	Попытка
		LoadAllTests();
	Исключение
		текстОшибки = ОписаниеОшибки();
		ВывестиСообщение("ОШИБКА загрузки тестов: "+текстОшибки);
		Если лЗавершитьРаботуПослеТестирования Тогда
			ЗавершитьРаботуСистемы(Ложь);
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;

	Если естьКоманда_ВыполнитьТестирование Тогда
		Попытка
			RunAllTests();
		Исключение
			текстОшибки = ОписаниеОшибки();
			ВывестиСообщение("ОШИБКА выполнения тестов: "+текстОшибки);
			Если лЗавершитьРаботуПослеТестирования Тогда
				ЗавершитьРаботуСистемы(Ложь);
				Возврат Ложь;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Если лЗавершитьРаботуПослеТестирования Тогда
		ЗаписатьКодВозвратаВЛогФайл(ПутьКФайлуЛога, "0");
		
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
	Возврат Истина;	
КонецФункции

&НаСервере
Функция РазобратьПараметрыЗапускаСервер(СтрокаПараметровЗапуска)
	Возврат Объект().РазобратьПараметрыЗапуска(СтрокаПараметровЗапуска);
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
    Если ЗначениеЗаполнено(ПутиПараметр) Тогда
        Пути = ПользовательскиеПутиСохр;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТестовыйНабор(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Заголовок = НСтр("en = 'Choose a folder with testcases'; ru = 'Выберите каталог с тестовыми случаями'");

    Если Диалог.Выбрать() Тогда
        Пути.Очистить();
        Пути.Добавить(Диалог.Каталог);
    Иначе
        Возврат;
    КонецЕсли;

    ОбновитьНадписьПути();
    LoadAllTests();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТестовыеСлучаи(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Истина;
	Диалог.Фильтр = НСтр("en = 'External processing form files (*.epf)|*.epf'; ru = 'Файлы внешних обработок (*.epf)|*.epf'");
	Диалог.Заголовок = НСтр("en = 'Choose an external processing form file'; ru = 'Выберите файл с внешней обработкой'");

    Если Диалог.Выбрать() Тогда
        Пути.Очистить();
        Для каждого ПолноеИмяФайла Из Диалог.ВыбранныеФайлы Цикл
            Пути.Добавить(ПолноеИмяФайла);
        КонецЦикла;
    Иначе
        Возврат;
    КонецЕсли;

    ОбновитьНадписьПути();
    LoadAllTests();

	РазвернутьСтрокиДерева(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТолькоВыделенныеТесты(Команда)
    Пути.Очистить();
	МассивИдентификаторовСтрок = Элементы.ДеревоТестов.ВыделенныеСтроки;
	Для каждого Идентификатор Из МассивИдентификаторовСтрок Цикл
		СтрокаДерева = Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаДерева.ТипСтроки = ЗначенияТиповСтроки.ТестовыйМетод Тогда
			СтрокаДерева = СтрокаДерева.ПолучитьРодителя();
		КонецЕсли;
	    Пути.Добавить(СтрокаДерева.ПолныйПуть);
	КонецЦикла;

    ОбновитьНадписьПути();
    LoadAllTests();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерезагрузитьВсеТесты(Команда)
    LoadAllTests();
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьВсеТесты(Команда)
	ОчиститьСообщения();
    LoadAllTests();
    
    RunAllTests();
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьВыделенныеТесты(Команда)
	ОчиститьСообщения();

	МассивИдентификаторовСтрок = Элементы.ДеревоТестов.ВыделенныеСтроки;
	_ВыполнитьВыбранныеТесты(МассивИдентификаторовСтрок);
	
	Для каждого Идентификатор Из МассивИдентификаторовСтрок Цикл
		ИзменитьСостояниеВыполненияРодителей(Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор));
	КонецЦикла;
	
	СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(Объект.ДеревоТестов.ПолучитьЭлементы(), Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьПути()
    Если Пути.Количество() = 1 Тогда
        ПутиНадпись = Пути[0].Значение;
        Элементы.ПутиНадпись.МногострочныйРежим = Ложь;
    Иначе
        ПутиНадпись = "";
        КонечныйИндекс = Пути.Количество() - 1;
        Для Индекс = 0 По КонечныйИндекс Цикл
            Если Индекс = КонечныйИндекс Тогда
                ПутиНадпись = ПутиНадпись + Пути[Индекс].Значение;
            Иначе
                ПутиНадпись = ПутиНадпись + Пути[Индекс].Значение + Символы.ПС;
            КонецЕсли;
        КонецЦикла;
        Элементы.ПутиНадпись.МногострочныйРежим = Истина;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеВыполненияРодителей(СтрокаДереваТестов) Экспорт
	СтрокаРодителя = СтрокаДереваТестов.ПолучитьРодителя();
	Если СтрокаРодителя = Неопределено Тогда
		СтрокаРодителя = Объект.ДеревоТестов.НайтиПоИдентификатору(СтрокаДереваТестов.ПолучитьИдентификатор()).ПолучитьРодителя();
		Если СтрокаРодителя = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗапомнитьСамоеХудшееСостояние(СтрокаРодителя.Состояние, СтрокаДереваТестов.Состояние);
	ИзменитьСостояниеВыполненияРодителей(СтрокаРодителя);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ВключаяПодчиненные = Ложь)
	
	Для каждого СтрокаДерева из Объект.ДеревоТестов.ПолучитьЭлементы() Цикл
		Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
		Элементы.ДеревоТестов.Развернуть(Идентификатор, ВключаяПодчиненные);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(СтрокиДереваТестов, ОставитьРазвернутым)
	ЭлементДеревоТестов = Элементы.ДеревоТестов;
	Для каждого СтрокаДерева из СтрокиДереваТестов Цикл
		Если Не ОставитьРазвернутым Тогда
			Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
			Если СтрокаДерева.Состояние = ЗначенияСостоянияТестов.Сломался или 
				СтрокаДерева.Состояние = ЗначенияСостоянияТестов.НеРеализован Тогда
				
					ЭлементДеревоТестов.Развернуть(Идентификатор, Ложь);
			Иначе
					ЭлементДеревоТестов.Свернуть(Идентификатор);			
			КонецЕсли;
		КонецЕсли;
		СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(СтрокаДерева.ПолучитьЭлементы(), Ложь);
	КонецЦикла;	
	
КонецПроцедуры

// }

// { блок кода для переоткрытия формы

&НаКлиенте
Процедура ПерезагрузитьФорму(Команда)
	Перем ИмяРеквизита;
	ИмяРеквизита = ИмяРеквизитаПолныйПутьОбработки(); //"__ИмяФайла1678";
	
	путьФайла = ИмяФайлаВнешнейОбработки_ПерезагрузитьФорму();
	ПерезагрузитьФорму_НайтиИлиСоздатьРеквизитДляСохраненияПутиФайла(ИмяРеквизита);
	
	Если ПустаяСтрока(ЭтаФорма[ИмяРеквизита]) Тогда
		ЭтаФорма[ИмяРеквизита] = путьФайла;
	КонецЕсли;
	
	АдресХранилища = "";
	Результат = ПоместитьФайл(АдресХранилища, ЭтаФорма[ИмяРеквизита], , Ложь);
	ИмяОбработки = ПодключитьВнешнююОбработку_ПерезагрузитьФорму(АдресХранилища);
	
	//Закрыть();
	
	НоваяФорма = ПолучитьФорму(ЭтаФорма.ИмяФормы,,,Истина);
	
	НоваяФорма.ПерезагрузитьФорму_НайтиИлиСоздатьРеквизитДляСохраненияПутиФайла(ИмяРеквизита);
	
	НоваяФорма[ИмяРеквизита] = ЭтаФорма[ИмяРеквизита];
	
	НоваяФорма.Открыть();
	Закрыть();
КонецПроцедуры

&НаКлиенте
Функция ИмяРеквизитаПолныйПутьОбработки()
	Возврат "__ИмяФайла1678";
КонецФункции

&НаСервере
Процедура СоздатьКнопкуПерезагрузитьФормуНаКоманднойПанелиФормы(заголовокКнопки = "Перезагрузить форму", ТолькоВоВсехДействиях = Истина)
    //Добавляем новую команду
    Кмд = ЭтаФорма.Команды.Добавить("ПерезагрузитьФорму_168733");
    Кмд.Действие = "ПерезагрузитьФорму";
    Кмд.Заголовок = заголовокКнопки; //"Перезагрузить форму";
	
	лКоманднаяПанель = Элементы.Найти("ФормаКоманднаяПанель");
	нашлиКоманднуюПанель = лКоманднаяПанель <> Неопределено;
	Если нашлиКоманднуюПанель Тогда
		нашлиКоманднуюПанель = лКоманднаяПанель.Вид = ВидГруппыФормы.КоманднаяПанель;
	КонецЕсли;
	
	лВладелецФормы = ?(нашлиКоманднуюПанель, лКоманднаяПанель, ЭтаФорма);
	
    //Добавляем новую кнопку
    Элемент2 = ЭтаФорма.Элементы.Добавить("ПерезагрузитьФорму_168733", Тип("КнопкаФормы"), лВладелецФормы);
    Элемент2.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; //ОбычнаяКнопка;
    Элемент2.ИмяКоманды = Кмд.Имя; //"Команда1";
	Элемент2.ТолькоВоВсехДействиях = ТолькоВоВсехДействиях;
КонецПроцедуры

&НаСервере
Процедура ПерезагрузитьФорму_НайтиИлиСоздатьРеквизитДляСохраненияПутиФайла(имяРеквизита) Экспорт
    // Добавляем новый реквизит в форму. Попыт
    // ка нужна для уже существующего реквизита
    Попытка
	    ДобавляемыеРеквизиты = Новый Массив;
	    Реквизит = Новый РеквизитФормы(имяРеквизита, Новый ОписаниеТипов("Строка"), , "Введите строку", Истина);
	    ДобавляемыеРеквизиты.Добавить(Реквизит);
	    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    Исключение
    КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ИмяФайлаВнешнейОбработки_ПерезагрузитьФорму()
	Возврат Объект().ИспользуемоеИмяФайла;
КонецФункции

&НаСервере
Функция ПодключитьВнешнююОбработку_ПерезагрузитьФорму(АдресХранилища)
	Возврат ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
КонецФункции

//}

&НаКлиенте
Процедура ОПроекте(Команда)
	ЗапуститьПриложение("https://github.com/xUnitFor1C/xUnitFor1C");
КонецПроцедуры

&НаКлиенте
Процедура ГенераторМакетовДанных(Команда)
	ИмяИнструмента = "xddDataFixtureGen.epf";
	ОткрытьИнструмент(ИмяИнструмента);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьГУИД(Команда)
	ИмяИнструмента = "xddGuidShow.epf";
	ОткрытьИнструмент(ИмяИнструмента);
КонецПроцедуры

&НаКлиенте
Процедура  ОткрытьИнструмент(ИмяИнструмента)
	ПолныйПутьОбработки = ЭтаФорма[ИмяРеквизитаПолныйПутьОбработки()];
	Файл = Новый Файл(ПолныйПутьОбработки);
	ПутьВнешнихИнструментов = Файл.Путь;
	
	ПутьИнструмента = ПутьВнешнихИнструментов + ИмяИнструмента;
	Файл = Новый Файл(ПутьИнструмента);
	Если Не Файл.Существует() Тогда
		Сообщить("Инструмент <"+ИмяИнструмента+"> не найден в каталоге <"+ПутьИнструмента+">");
		Возврат;
	КонецЕсли;
	
	ИдентификаторИнструмента = Строка(Новый УникальныйИдентификатор());
	
    лИмяОбработки = ПодключитьНаСервереВнешнююОбработкуОтКлиента(ПутьИнструмента, ИдентификаторИнструмента);
	
	ИмяОсновнойУправляемойФормы = ПолучитьИмяОсновнойУправляемойФормы(лИмяОбработки);
	Если ИмяОсновнойУправляемойФормы = "" Тогда
		Сообщить("Инструмент <"+ИмяИнструмента+">: не удалось вычислить основную управляемую форму по метаданным!");
		Возврат;
	КонецЕсли;
	
	ФормаИнструмента = ПолучитьТестОбъект(ИдентификаторИнструмента, имяОсновнойУправляемойФормы);
	Если ФормаИнструмента = Неопределено Тогда
		Сообщить("Инструмент <"+ИмяИнструмента+">: не удалось получить основную управляемую форму!");
		Возврат;
	КонецЕсли;
	ОткрытьФорму(ФормаИнструмента);
	ФормаИнструмента = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПриАктивизацииСтроки(Элемент)
	Если Элементы.ДеревоТестов.ВыделенныеСтроки.Количество() <= 1 Тогда
		ТекcтКоманды = "Выполнить тест";
	Иначе
		ТекcтКоманды = "Выполнить выбранные тесты";
	КонецЕсли;
	Элементы.ДеревоТестовКонтекстноеМенюКомандаВыполнитьВыделенныеТесты.Заголовок = ТекcтКоманды;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКодВозвратаВЛогФайл(ПутьКФайлуЛога, КодВозврата)
	Если НЕ ПустаяСтрока(ПутьКФайлуЛога) Тогда
		Попытка
			Запись = Новый ЗаписьТекста(ПутьКФайлуЛога);
			Запись.ЗаписатьСтроку(КодВозврата);
			Запись.Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция Объект() Экспорт
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Функция ИспользуемоеИмяФайла() Экспорт
	Возврат ИспользуемоеИмяФайлаСервер();
КонецФункции

&НаСервере
Функция ИспользуемоеИмяФайлаСервер()
	ОсновнойОбъект = Объект();
	НайденноеИмяФайла = Неопределено;
	Выполнить("НайденноеИмяФайла = ОсновнойОбъект.ИспользуемоеИмяФайла;");
	Возврат НайденноеИмяФайла;
КонецФункции

&НаКлиенте
Процедура КомандаЗагрузитьТестыИзКонфигурации(Команда)
	ЗагрузитьТестыИзКонфигурации("");
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТестыИзКонфигурацииПоИмени(Команда)
	ЗагрузитьТестыИзКонфигурации("Тест_");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыИзКонфигурации(ОтборПоИмениТеста)
	
	Если ВыбратьПодсистему(ОтборПоИмениТеста) Тогда
		ОбновитьНадписьПути();
	    LoadAllTests();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ВыбратьПодсистему(ОтборПоИмениТеста)
	ПараметрыОткрытия = Новый Структура("ОтборПоИмениТеста", ОтборПоИмениТеста);
	ИмяФормыВыбораПодсистемыУФ = СтрЗаменить(ЭтаФорма.ИмяФормы, "УправляемаяФорма", "ФормаВыбораПодсистемУФ");
	ФормаВыбораПодсистем = ПолучитьФорму(ИмяФормыВыбораПодсистемыУФ, ПараметрыОткрытия, , Истина);
	РезультатВыбораПодсистемы = ФормаВыбораПодсистем.ОткрытьМодально();
	
	Если РезультатВыбораПодсистемы <> Неопределено Тогда
		Пути.Очистить();
		Пути.Добавить(РезультатВыбораПодсистемы);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ЗагрузитьТестыКонфигурации(РодительскаяСтрока, Путь) Экспорт
	КоллекцияВстроенныхТестов = Новый Массив;
	КоллекцияВстроенныхТестовСервер(КоллекцияВстроенныхТестов, Путь);

	Для каждого Элемент Из КоллекцияВстроенныхТестов Цикл
		ЗагрузитьТесты(РодительскаяСтрока, Элемент);
	КонецЦикла;
КонецФункции

&НаСервере
Функция КоллекцияВстроенныхТестовСервер(КоллекцияВстроенныхТестовСервер, Путь)
	ОсновнойОбъект = Объект();

	ДеревоВстроенныхТестов = Новый ДеревоЗначений;
	ДеревоВстроенныхТестов.Колонки.Добавить("Имя");
	ДеревоВстроенныхТестов.Колонки.Добавить("ПолноеИмя");
	ДеревоВстроенныхТестов.Колонки.Добавить("ТипСтроки");
	
	ОбъектМетаданных = ОсновнойОбъект.ПолучитьОбъектМетаданныхПоПути(Путь);
	Если ВРег(Лев(ОбъектМетаданных.ПолноеИмя(),11)) = "ПОДСИСТЕМА." Тогда
		ДобавитьИменаТестовПодсистемы(ДеревоВстроенныхТестов, ОбъектМетаданных);
	Иначе
		ДобавитьИмяВстроенногоТестовогоСлучая(ДеревоВстроенныхТестов, ОбъектМетаданных);
	КонецЕсли;

	ВыгрузитьИменаТестовИзДереваВСписокЗначений(ДеревоВстроенныхТестов.Строки, КоллекцияВстроенныхТестовСервер);
КонецФункции

&НаСервере
Функция ДобавитьИменаТестовПодсистемы(СтрокаДерева, МетаПодсистема) Экспорт
	
	СтрокаТеста = СтрокаДерева.Строки.Добавить();
	СтрокаТеста.Имя = МетаПодсистема.Имя;
	СтрокаТеста.ПолноеИмя = "Метаданные."+СтрЗаменить(МетаПодсистема.ПолноеИмя(), "Подсистема.", "Подсистемы.");
	СтрокаТеста.ТипСтроки = ЗначенияТиповСтроки.КаталогТестов;
	
	Для каждого МетаПодчиненнаяПодсистема из МетаПодсистема.Подсистемы цикл
		ДобавитьИменаТестовПодсистемы(СтрокаТеста, МетаПодчиненнаяПодсистема);
	КонецЦикла;	
	
	Для каждого МетаОбработка из МетаПодсистема.Состав цикл
		ДобавитьИмяВстроенногоТестовогоСлучая(СтрокаТеста, МетаОбработка);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ДобавитьИмяВстроенногоТестовогоСлучая(СтрокаДерева, МетаОбработка)
	НоваяСтрока = СтрокаДерева.Строки.Добавить();
	НоваяСтрока.Имя = МетаОбработка.Имя;
	НоваяСтрока.ПолноеИмя = "Метаданные."+СтрЗаменить(МетаОбработка.ПолноеИмя(), "Обработка.", "Обработки.");
	НоваяСтрока.ТипСтроки = ЗначенияТиповСтроки.ТестовыйСлучай;
КонецФункции

&НаСервере
Процедура ВыгрузитьИменаТестовИзДереваВСписокЗначений(СтрокиДереваВстроенныхТестов, КоллекцияВстроенныхТестов)
	Для каждого Строка Из СтрокиДереваВстроенныхТестов Цикл
		НоваяКоллекция = Новый Массив;
		ЭлементКоллекции = Новый Структура("Имя,ПолноеИмя,ТипСтроки,Строки");
		ЭлементКоллекции.Имя = Строка.Имя;
		ЭлементКоллекции.ПолноеИмя = Строка.ПолноеИмя;
		ЭлементКоллекции.ТипСтроки = Строка.ТипСтроки;
		ЭлементКоллекции.Строки = НоваяКоллекция;
		КоллекцияВстроенныхТестов.Добавить(ЭлементКоллекции);
		Если Строка.Строки.Количество() > 0 Тогда
			ВыгрузитьИменаТестовИзДереваВСписокЗначений(Строка.Строки, НоваяКоллекция);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

		//#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		//&НаКлиенте
		//Функция ПолучитьОбъектUTR()
		//	Возврат Объект; //РеквизитФормыВЗначение("Объект");
		//	
		//	Если мОбъектUTR = Неопределено Тогда
		//		мОбъектUTR = ВнешниеОбработки.Создать(ИспользуемоеИмяФайла(), Ложь); // подключаю не в безопасном режиме
		//	КонецЕсли;
		//	Возврат мОбъектUTR;
		//КонецФункции
		//#КонецЕсли

		//#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		//мОбъектUTR = Неопределено;
		//#КонецЕсли
