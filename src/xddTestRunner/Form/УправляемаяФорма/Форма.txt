&НаКлиенте
Перем КэшФормПлагинов;

// { События формы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ЭтаФорма.Заголовок = ОбъектНаСервере.ЗаголовокФормы();
	ИспользуемоеИмяФайла = ОбъектНаСервере.ИспользуемоеИмяФайла;
	
	ОбновитьКомандыИсторииЗагрузкиТестов();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии()
	ЗагрузитьПлагины();
	
	ЭтоПакетныйЗапуск = ЗначениеЗаполнено(ПараметрЗапуска);
	Если ЭтоПакетныйЗапуск Тогда
		ВыполнитьПакетныйЗапуск(ПараметрЗапуска);
	Иначе
		ПерезагрузитьПоследниеТестыПоИстории();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	ЭтотОбъектНаСервере().СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеВыполненияТестов(ИмяСобытия, Параметр) Экспорт
     Если ИмяСобытия = Объект.ВозможныеСобытия.ВыполненТестовыйМетод Тогда
		 Если Параметр.Состояние = Объект.СостоянияТестов.НеРеализован Тогда
			 Если Элементы.ИндикаторВыполнения.ЦветРамки <> WebЦвета.Красный Тогда
				 Элементы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Золотой;
			 КонецЕсли;
		 ИначеЕсли Параметр.Состояние = Объект.СостоянияТестов.Сломан Тогда
			 Элементы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Красный;
		 КонецЕсли;
		 ИндикаторВыполнения = ИндикаторВыполнения + 1;
	 КонецЕсли;
	 ОбновитьОтображениеДанных();
КонецПроцедуры
// } События формы

// { Управляющие воздействия пользователя
&НаКлиенте
Процедура ЗагрузитьТестыПоУмолчанию(Команда)
	ЗагрузчикПоУмолчанию = ЗагрузчикПоУмолчанию();
	ИдентификаторЗагрузчикаПоУмолчанию = ЗагрузчикПоУмолчанию.ОписаниеПлагина(Объект.ТипыПлагинов).Идентификатор;
	Подключаемый_ИнтерактивныйВызовЗагрузчика(Новый Структура("Имя", ИдентификаторЗагрузчикаПоУмолчанию));
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьВсеТесты(Команда)
	ВыполнитьТестыНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТестыНаКлиенте(Фильтр = Неопределено)
	Если ЗначениеЗаполнено(ЭтаФорма.ДеревоОтЗагрузчика) Тогда
		ОчиститьСообщения();
		
		КоличествоТестовыхМетодов = ПолучитьКоличествоТестовыхМетодов(ЭтаФорма.ДеревоОтЗагрузчика, Фильтр);
		ИнициализироватьИндикаторВыполнения(КоличествоТестовыхМетодов);
		
		РезультатыТестирования = ВыполнитьТесты(Плагин(ИдентификаторЗагрузчика), ЭтаФорма.ДеревоОтЗагрузчика, Фильтр, ЭтаФорма);
		
		ОбновитьДеревоТестовНаОснованииРезультатовТестирования(ДеревоТестов.ПолучитьЭлементы()[0], РезультатыТестирования);
		
		ГенераторОтчетаMXL = Плагин("ГенераторОтчетаMXL");
		Отчет = ГенераторОтчетаMXL.СоздатьОтчет(ЭтаФорма, РезультатыТестирования);
		ГенераторОтчетаMXL.Показать(Отчет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьВыделенныеТесты(Команда)
	Фильтр = Новый Массив;
	ВыделенныеСтроки = Элементы.ДеревоТестов.ВыделенныеСтроки;
	Для каждого ИдентификаторВыделеннойСтроки Из ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = ДеревоТестов.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		Фильтр.Добавить(Новый УникальныйИдентификатор(ВыделеннаяСтрока.Ключ));
	КонецЦикла;
	Если Фильтр.Количество() > 0 Тогда
		ВыполнитьТестыНаКлиенте(Фильтр);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерезагрузитьФорму(Команда)
	Закрыть();
	
	АдресХранилища = "";
	ПоместитьФайл(АдресХранилища, ЭтаФорма.ИспользуемоеИмяФайла, , Ложь);
	ПодключитьФайлОбработкиНаСервере(АдресХранилища, Неопределено);
	
	НоваяФорма = ПолучитьФорму(ЭтаФорма.ИмяФормы,,,Истина);
	НоваяФорма.ИспользуемоеИмяФайла = ЭтаФорма.ИспользуемоеИмяФайла;
	НоваяФорма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьПоследниеТестыПоИстории(Команда = Неопределено)
	ИсторияЗагрузкиТестов = Объект.Настройки.ИсторияЗагрузкиТестов;
	Если ИсторияЗагрузкиТестов.Количество() > 0 Тогда
		ЭлементИстории = ИсторияЗагрузкиТестов[0];
		Попытка
			ЗагрузитьТесты(ЭлементИстории.ИдентификаторЗагрузчика, ЭлементИстории.Путь);
		Исключение
			// TODO
			Сообщить("Не удалось загрузить тесты из истории <" + ЭлементИстории.ИдентификаторЗагрузчика + ": " + ЭлементИстории.Путь + ">" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры
// } Управляющие воздействия пользователя

// { Плагины
&НаКлиенте
Процедура ЗагрузитьПлагины()
	Объект.Плагины = Новый Структура;
	КэшФормПлагинов = Новый Структура;
	
	Файл = Новый Файл(ЭтаФорма.ИспользуемоеИмяФайла);
	КаталогПлагинов = Файл.Путь + "\Plugins";
	НайденныеФайлы = НайтиФайлы(КаталогПлагинов, "*.epf", Ложь);
	Для каждого ФайлОбработки Из НайденныеФайлы Цикл
		АдресХранилища = "";
		ПоместитьФайл(АдресХранилища, ФайлОбработки.ПолноеИмя, , Ложь, ЭтаФорма.УникальныйИдентификатор);
		
		ИмяПлагина = ФайлОбработки.ИмяБезРасширения;
		ПодключитьФайлОбработкиНаСервере(АдресХранилища, ИмяПлагина);
		ФормаПлагина = ПолучитьФорму("ВнешняяОбработка." + ИмяПлагина + ".Форма", , ЭтаФорма);
		
		Попытка
			ОписаниеПлагина = ФормаПлагина.ОписаниеПлагина(Объект.ТипыПлагинов);
			Объект.Плагины.Вставить(ОписаниеПлагина.Идентификатор, ИмяПлагина);
			КэшФормПлагинов.Вставить(ОписаниеПлагина.Идентификатор, ФормаПлагина);
		Исключение
			// TODO добавить поведение при отсутствии управляемой формы у плагина
		КонецПопытки;
	КонецЦикла;
	
	ДобавитьКомандыЗагрузчиковНаФорме();
КонецПроцедуры

&НаКлиенте
Функция Плагин(Идентификатор) Экспорт
	Возврат КэшФормПлагинов[Идентификатор];
КонецФункции

&НаСервере
Процедура ДобавитьКомандыЗагрузчиковНаФорме()
	ОписанияЗагрузчиков = ПолучитьОписанияЗагрузчиковНаСервере();
	Для каждого Описание Из ОписанияЗагрузчиков Цикл
		Команда = ЭтаФорма.Команды.Добавить(Описание.Идентификатор);
		Команда.Действие = "Подключаемый_ИнтерактивныйВызовЗагрузчика";
		ПунктМеню = ЭтаФорма.Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ПлагиныЗагрузчики);
		ПунктМеню.Заголовок = Описание.Представление;
		ПунктМеню.ИмяКоманды = Команда.Имя;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьОписанияЗагрузчиковНаСервере()
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ВозможныеТипыПлагинов = ОбъектНаСервере.ТипыПлагинов;
	ОписанияЗагрузчиков = ОбъектНаСервере.ПолучитьОписанияПлагиновПоТипу(ВозможныеТипыПлагинов.Загрузчик);
	
	Возврат ОписанияЗагрузчиков;
КонецФункции

&НаКлиенте
Функция ЗагрузчикПоУмолчанию() Экспорт
	Возврат Плагин("ЗагрузчикКаталога");
КонецФункции
// } Плагины

// { Работа с деревом тестов
&НаКлиенте
Процедура Подключаемый_ИнтерактивныйВызовЗагрузчика(Команда)
	ИдентификаторВыбранногоЗагрузчика = Команда.Имя;
	Путь = КэшФормПлагинов[ИдентификаторВыбранногоЗагрузчика].ВыбратьПутьИнтерактивно();
	Если ЗначениеЗаполнено(Путь) Тогда
		ЗагрузитьТесты(ИдентификаторВыбранногоЗагрузчика, Путь);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьТесты(ИдентификаторВыбранногоЗагрузчика, Путь)
	ИнициализироватьИндикаторВыполнения();
	
	ЭтаФорма.ИдентификаторЗагрузчика = ИдентификаторВыбранногоЗагрузчика;
	ФормаЗагрузчика = КэшФормПлагинов[ИдентификаторВыбранногоЗагрузчика];
	
	ЭтаФорма.ДеревоОтЗагрузчика = ФормаЗагрузчика.Загрузить(ЭтаФорма, Путь);
	
	ЭлементыДереваТестов = ЭтаФорма.ДеревоТестов.ПолучитьЭлементы();
	ЭлементыДереваТестов.Очистить();
	ЗаполнитьДеревоТестов(ЭтаФорма.ДеревоТестов, ДеревоОтЗагрузчика);
	
	КоличествоТестовыхСлучаев = ЗаполнитьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(ЭтаФорма.ДеревоТестов);
	РазвернутьСтрокиДерева(КоличествоТестовыхСлучаев < 30);
	
	СохранитьВИсториюЗагрузкиТестовНаСервере(ИдентификаторВыбранногоЗагрузчика, Путь);
	ОбновитьКомандыИсторииЗагрузкиТестов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоТестов(РодительскаяСтрокаДереваТестов, КонтейнерДереваТестовЗагрузчика)
	СтрокаКонтейнера = РодительскаяСтрокаДереваТестов.ПолучитьЭлементы().Добавить();
	СтрокаКонтейнера.Имя = КонтейнерДереваТестовЗагрузчика.Имя;
	СтрокаКонтейнера.ИконкаУзла = КонтейнерДереваТестовЗагрузчика.ИконкаУзла;
	СтрокаКонтейнера.Ключ = КонтейнерДереваТестовЗагрузчика.Ключ;
	
	ТипыУзловДереваТестов = ЭтаФорма.Плагин("ПостроительДереваТестов").Объект.ТипыУзловДереваТестов;
	Для каждого ЭлементКоллекции Из КонтейнерДереваТестовЗагрузчика.Строки Цикл
		Если ЭлементКоллекции.Тип = ТипыУзловДереваТестов.Контейнер Тогда
			ЗаполнитьДеревоТестов(СтрокаКонтейнера, ЭлементКоллекции);
		ИначеЕсли ЭлементКоллекции.Тип = ТипыУзловДереваТестов.Элемент Тогда
			СтрокаЭлемента = СтрокаКонтейнера.ПолучитьЭлементы().Добавить();
			СтрокаЭлемента.Имя = ЭлементКоллекции.Представление;
			СтрокаЭлемента.Путь = ЭлементКоллекции.Путь;
			СтрокаЭлемента.ИконкаУзла = ЭлементКоллекции.ИконкаУзла;
			СтрокаЭлемента.Ключ = ЭлементКоллекции.Ключ;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(РодительскаяСтрока)
	КоллекцияСтрок = РодительскаяСтрока.ПолучитьЭлементы();
	Если КоллекцияСтрок.Количество() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	ОбщееКоличествоТестов = 0;
	Для каждого СтрокаДерева из коллекцияСтрок Цикл
		КоличествоТестовВСтроке = ЗаполнитьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаДерева);
		СтрокаДерева.КоличествоТестов = КоличествоТестовВСтроке;
		ОбщееКоличествоТестов = ОбщееКоличествоТестов + КоличествоТестовВСтроке;
	КонецЦикла;
	
	Возврат ОбщееКоличествоТестов;
КонецФункции

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ВключаяПодчиненные = Ложь)
	Для каждого СтрокаДерева из ДеревоТестов.ПолучитьЭлементы() Цикл
		Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
		Элементы.ДеревоТестов.Развернуть(Идентификатор, ВключаяПодчиненные);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоТестовНаОснованииРезультатовТестирования(УзелДереваТестов, РезультатТестирования)
	ТипыУзловДереваТестов = Плагин("ПостроительДереваТестов").Объект.ТипыУзловДереваТестов;
	УзелДереваТестов.Состояние = РезультатТестирования.Состояние;
	УзелДереваТестов.ВремяВыполнения = РезультатТестирования.ВремяВыполнения;
	Если РезультатТестирования.Тип = ТипыУзловДереваТестов.Контейнер Тогда
		Для каждого ДочернийРезультатТестирования Из РезультатТестирования.Строки Цикл
			ДочернийУзелДереваТестов = НайтиСтрокуВДеревеТестовПоКлючу(УзелДереваТестов, ДочернийРезультатТестирования.Ключ);
			ОбновитьДеревоТестовНаОснованииРезультатовТестирования(ДочернийУзелДереваТестов, ДочернийРезультатТестирования);
		КонецЦикла;
	ИначеЕсли РезультатТестирования.Тип = ТипыУзловДереваТестов.Элемент Тогда
		Если РезультатТестирования.Свойство("Сообщение") И ЗначениеЗаполнено(РезультатТестирования.Сообщение) Тогда
			Сообщить(РезультатТестирования.Сообщение, СтатусСообщения.ОченьВажное);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуВДеревеТестовПоКлючу(УзелДереваТестов, Ключ)
	Результат = Неопределено;
	Для каждого ЭлементКоллекции Из УзелДереваТестов.ПолучитьЭлементы() Цикл
		Если ЭлементКоллекции.Ключ = Ключ Тогда
			Результат = ЭлементКоллекции;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
// } Работа с деревом тестов

// { Выполнение тестов
&НаКлиенте
Функция ПолучитьКоличествоТестовыхМетодов(КонтейнерДереваТестов, Фильтр = Неопределено) Экспорт
	Возврат ПолучитьКоличествоТестовыхМетодовНаСервере(КонтейнерДереваТестов, Фильтр);
КонецФункции

Функция ПолучитьКоличествоТестовыхМетодовНаСервере(КонтейнерДереваТестов, Фильтр)
	Возврат ЭтотОбъектНаСервере().ПолучитьКоличествоТестовыхМетодов(КонтейнерДереваТестов, Фильтр);
КонецФункции

&НаКлиенте
Функция ВыполнитьТесты(Загрузчик, КонтейнерДереваТестов, Фильтр = Неопределено, Подписчик = Неопределено) Экспорт
	ТипыУзловДереваТестов = Плагин("ПостроительДереваТестов").Объект.ТипыУзловДереваТестов;
	РезультатТестирования = СоздатьКонтейнерРезультатовТестированияНаСервере(КонтейнерДереваТестов);
	ФильтрДляДочернихУзлов = Неопределено;
	Если Не УзелДереваТестовУдовлетворяетФильтру(КонтейнерДереваТестов, Фильтр) Тогда
		ФильтрДляДочернихУзлов = Фильтр;
	КонецЕсли;
	Для каждого ДочернийУзел Из КонтейнерДереваТестов.Строки Цикл
		ДочернийРезультатТестирования = Неопределено;
		Если ДочернийУзел.Тип = ТипыУзловДереваТестов.Контейнер Тогда
			ДочернийРезультатТестирования = ВыполнитьТесты(Загрузчик, ДочернийУзел, ФильтрДляДочернихУзлов, Подписчик);
		ИначеЕсли ДочернийУзел.Тип = ТипыУзловДереваТестов.Элемент Тогда
			Если УзелДереваТестовУдовлетворяетФильтру(ДочернийУзел, ФильтрДляДочернихУзлов) Тогда
				Контекст = Загрузчик.ПолучитьКонтекстПоПути(ЭтаФорма, ДочернийУзел.Путь);
				ДочернийРезультатТестирования = ВыполнитьТестовыйМетод(Контекст, ДочернийУзел);
				
				Если Подписчик <> Неопределено Тогда
					ОповеститьОСобытии(Подписчик, Объект.ВозможныеСобытия.ВыполненТестовыйМетод, РезультатТестирования);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ДочернийРезультатТестирования <> Неопределено Тогда
			РезультатТестирования.Строки.Добавить(ДочернийРезультатТестирования);
			РезультатТестирования.Состояние = ВыбратьХудшееСостояниеВыполненияТестов(РезультатТестирования.Состояние, ДочернийРезультатТестирования.Состояние);
			ЗаполнитьДанныеСтатистикиНаСервере(ТипыУзловДереваТестов, РезультатТестирования, ДочернийРезультатТестирования);
		КонецЕсли;
	КонецЦикла;
	Если РезультатТестирования.Строки.Количество() = 0 Тогда
		РезультатТестирования = Неопределено;
	КонецЕсли;
	
	Возврат РезультатТестирования;
КонецФункции

&НаКлиенте
Функция УзелДереваТестовУдовлетворяетФильтру(УзелДереваТестов, Фильтр)
	Возврат (Фильтр = Неопределено) Или (Фильтр.Найти(УзелДереваТестов.Ключ) <> Неопределено);
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСтатистикиНаСервере(ТипыУзловДереваТестов, РезультатТестирования, ДочернийРезультатТестирования)
	ЭтотОбъектНаСервере().ЗаполнитьДанныеСтатистики(ТипыУзловДереваТестов, РезультатТестирования, ДочернийРезультатТестирования);
КонецПроцедуры

&НаКлиенте
Функция ВыбратьХудшееСостояниеВыполненияТестов(Состояние1, Состояние2)
	Возврат Макс(Состояние1, Состояние2);
КонецФункции

&НаКлиенте
Функция ВыполнитьТестовыйМетод(Контекст, ЭлементДереваТестов)
	Перем РезультатТестирования;
	
	Если ТипЗнч(Контекст) = Тип("Строка") Или ТипЗнч(Контекст) = Тип("Структура") Тогда
		РезультатТестирования = ВыполнитьТестовыйМетодНаСервере(Контекст, ЭлементДереваТестов);
	Иначе
		РезультатТестирования = ВыполнитьТестовыйМетодНаКлиенте(Контекст, ЭлементДереваТестов);
	КонецЕсли;
	
	Возврат РезультатТестирования;
КонецФункции

&НаКлиенте
Функция ВыполнитьТестовыйМетодНаКлиенте(Контекст, ЭлементДереваТестов) Экспорт
	Контекст.Инициализация(ЭтаФорма);
	
	РезультатТестирования = СоздатьЭлементРезультатовТестированияНаСервере(ЭлементДереваТестов);
	НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Попытка
		ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(Контекст, "ПередЗапускомТеста");
		ВыполнитьПроцедуруКонтекста(Контекст, ЭлементДереваТестов.ИмяМетода, ЭлементДереваТестов.Параметры);
		ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(Контекст, "ПослеЗапускаТеста");
		
		РезультатТестирования.Состояние = Объект.СостоянияТестов.Пройден;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ЭлементДереваТестов.ИмяМетода) Тогда
			РезультатТестирования.Состояние = Объект.СостоянияТестов.НеРеализован;
			Сообщение = НСтр("ru = 'Отсутствует реализация тестового метода (%1).'");
			РезультатТестирования.Сообщение = СтрЗаменить(Сообщение, "%1", ЭлементДереваТестов.ИмяМетода);
		Иначе
			РезультатТестирования.Состояние = Объект.СостоянияТестов.Сломан;
			РезультатТестирования.Сообщение = ТекстОшибки;
		КонецЕсли;
	КонецПопытки;
	ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РезультатТестирования.ВремяВыполнения = (ОкончаниеВыполнения - НачалоВыполнения) / 1000;
	
	Возврат РезультатТестирования;
КонецФункции

&НаСервере
Функция ВыполнитьТестовыйМетодНаСервере(ИдентификаторКонтекста, ЭлементДереваТестов)
	ОбъектНаСервере = ЭтотОбъектНаСервере();
	
	Если ЭтоВнутренняяОбработка(ИдентификаторКонтекста) Тогда
		Контекст = Обработки[ИдентификаторКонтекста.Имя].Создать();
	Иначе
		Контекст = ВнешниеОбработки.Создать(ИдентификаторКонтекста);
	КонецЕсли;
	Контекст.Инициализация(ОбъектНаСервере);
	
	РезультатТестирования = ОбъектНаСервере.ВыполнитьТестовыйМетод(Контекст, ЭлементДереваТестов);
	
	Возврат РезультатТестирования;
КонецФункции

&НаСервере
Функция ЭтоВнутренняяОбработка(ИдентификаторКонтекста)
	Результат = ТипЗнч(ИдентификаторКонтекста) = Тип("Структура");
	Результат = Результат И ИдентификаторКонтекста.ЭтоВнутренняяОбработка;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(Контекст, ИмяПроцедуры)
	Попытка
		ВыполнитьПроцедуруКонтекста(Контекст, ИмяПроцедуры);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Не ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ИмяПроцедуры) Тогда
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцедуруКонтекста(Контекст, ПроцедураКонтекста, Параметры = Неопределено)
	СтрокаПараметров = СформироватьСтрокуПараметров(Параметры);
	ИcполняемыйКод = "Контекст." + ПроцедураКонтекста + "(" + СтрокаПараметров + ");";
	Выполнить(ИcполняемыйКод);
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтрокуПараметров(Параметры)
	СтрокаПараметров = "";
	Если ТипЗнч(Параметры) = Тип("Массив") Тогда
		Для Сч = 0 По Параметры.Количество() - 1 Цикл
			СтрокаПараметров = СтрокаПараметров + ",Параметры[" + Формат(Сч, "ЧН=0; ЧГ=") + "]";
		КонецЦикла;
	КонецЕсли;
	
	Возврат Сред(СтрокаПараметров, 2);
КонецФункции

&НаКлиенте
Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ИмяМетода)
	Результат = Ложь;
	Если Найти(текстОшибки, "Метод объекта не обнаружен (" + ИмяМетода + ")") > 0 
		ИЛИ Найти(текстОшибки, "Object method not found (" + ИмяМетода + ")") > 0  Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
// } Выполнение тестов

// { Генерация результатов тестирования
&НаСервере
Функция СоздатьКонтейнерРезультатовТестированияНаСервере(КонтейнерДереваТестов)
	Возврат ЭтотОбъектНаСервере().СоздатьКонтейнерРезультатовТестирования(КонтейнерДереваТестов);
КонецФункции

&НаСервере
Функция СоздатьЭлементРезультатовТестированияНаСервере(ЭлементДереваТестов)
	Возврат ЭтотОбъектНаСервере().СоздатьЭлементРезультатовТестирования(ЭлементДереваТестов);
КонецФункции
// } Генерация результатов тестирования

// { История загрузки тестов
&НаСервере
Процедура СохранитьВИсториюЗагрузкиТестовНаСервере(ИдентификаторЗагрузчика, Путь)
	ЭтотОбъектНаСервере = ЭтотОбъектНаСервере();
	ЭтотОбъектНаСервере.СохранитьВИсториюЗагрузкиТестов(ИдентификаторЗагрузчика, Путь);
	ЗначениеВРеквизитФормы(ЭтотОбъектНаСервере, "Объект");
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыИсторииЗагрузкиТестов()
	ИсторияЗагрузкиТестов = Объект.Настройки.ИсторияЗагрузкиТестов;
	ПодменюИсторияЗагрузкиТестов = Элементы.ПодменюИсторияЗагрузкиТестов;
	Для Сч = 0 По ИсторияЗагрузкиТестов.Количество() - 1 Цикл
		ИмяКоманды = "История_" + Сч;
		НайденнаяКоманда = Команды.Найти(ИмяКоманды);
		Если НайденнаяКоманда = Неопределено Тогда
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Действие = "Подключаемый_ЗагрузитьТестыИзИстории";
			ПунктМеню = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), ПодменюИсторияЗагрузкиТестов);
			ПунктМеню.ИмяКоманды = НоваяКоманда.Имя;
		Иначе
			ПунктМеню = Элементы.Найти(ИмяКоманды);
		КонецЕсли;
		ЭлементИстории = ИсторияЗагрузкиТестов[Сч];
		ПунктМеню.Заголовок = ЭлементИстории.ИдентификаторЗагрузчика + ": " + ЭлементИстории.Путь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьТестыИзИстории(Команда)
	ИндексИстории = Число(Сред(Команда.Имя, Найти(Команда.Имя, "_") + 1));
	ИсторияЗагрузкиТестов = Объект.Настройки.ИсторияЗагрузкиТестов;
	ЭлементИстории = ИсторияЗагрузкиТестов[ИндексИстории];
	ЗагрузитьТесты(ЭлементИстории.ИдентификаторЗагрузчика, ЭлементИстории.Путь);
КонецПроцедуры
// } История загрузки тестов

// { Пакетный запуск
&НаКлиенте
Процедура ВыполнитьПакетныйЗапуск(Знач ПараметрЗапуска)
	Перем РезультатыТестирования;
	
	ПарсерКоманднойСтроки = ЭтаФорма.Плагин("ПарсерКоманднойСтроки");
	ПараметрыЗапуска = ПарсерКоманднойСтроки.Разобрать(ПараметрЗапуска);
	
	Параметры_xddRun = Неопределено;
	Если ПараметрыЗапуска.Свойство(ПарсерКоманднойСтроки.Объект.ВозможныеКлючи.xddRun, Параметры_xddRun) Тогда
		РезультатыТестирования = ЗагрузитьИВыполнитьТесты_ПакетныйРежим(Параметры_xddRun);
	КонецЕсли;
	
	Параметры_xddReport = Неопределено;
	Если ЗначениеЗаполнено(РезультатыТестирования) И ПараметрыЗапуска.Свойство(ПарсерКоманднойСтроки.Объект.ВозможныеКлючи.xddReport, Параметры_xddReport) Тогда
		СформироватьОтчетОТестированииИЭкспортировать_ПакетныйРежим(Параметры_xddReport, РезультатыТестирования);
	КонецЕсли;
	
	Если ПараметрыЗапуска.Свойство(ПарсерКоманднойСтроки.Объект.ВозможныеКлючи.xddShutdown) Тогда
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьИВыполнитьТесты_ПакетныйРежим(Параметры_xddRun)
	Попытка
		ИдентификаторЗагрузчика = Параметры_xddRun[0];
		Загрузчик = ЭтаФорма.Плагин(ИдентификаторЗагрузчика);
		
		ПутьКТестам = Параметры_xddRun[1];
		ДеревоТестовОтЗагрузчика = Загрузчик.Загрузить(ЭтаФорма, ПутьКТестам);
		
		РезультатыТестирования = ЭтаФорма.ВыполнитьТесты(Загрузчик, ДеревоТестовОтЗагрузчика);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗафиксироватьОшибкуВЖурналеРегистрации(ОписаниеОшибки);
	КонецПопытки;
	
	Возврат РезультатыТестирования;
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетОТестированииИЭкспортировать_ПакетныйРежим(Параметры_xddReport, РезультатыТестирования)
	Попытка
		ИдентификаторГенератораОтчета = Параметры_xddReport[0];
		ГенераторОтчета = ЭтаФорма.Плагин(ИдентификаторГенератораОтчета);
		
		Отчет = ГенераторОтчета.СоздатьОтчет(ЭтаФорма, РезультатыТестирования);
		
		ПутьКОтчету = Параметры_xddReport[1];
		ГенераторОтчета.Экспортировать(Отчет, ПутьКОтчету);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗафиксироватьОшибкуВЖурналеРегистрации(ОписаниеОшибки);
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьОшибкуВЖурналеРегистрации(ОписаниеОшибки)
	ЗаписьЖурналаРегистрации(ЭтотОбъектНаСервере().Метаданные().Имя, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
КонецПроцедуры
// } Пакетный запуск

// { Helpers
&НаСервереБезКонтекста
Процедура ПодключитьФайлОбработкиНаСервере(АдресХранилища, ИдентификаторОбработки) Экспорт
	ВнешниеОбработки.Подключить(АдресХранилища, ИдентификаторОбработки, Ложь);
КонецПроцедуры

&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Процедура ИнициализироватьИндикаторВыполнения(КоличествоТестовыхМетодов = 0)
	Элементы.ИндикаторВыполнения.МаксимальноеЗначение = КоличествоТестовыхМетодов;
	ИндикаторВыполнения = 0;
	Элементы.ИндикаторВыполнения.ЦветРамки = Новый Цвет(0, 174, 0); // Зеленый
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОСобытии(Подписчик, Событие, ПараметрыСобытия)
	Выполнить("Подписчик.ОбработатьСобытиеВыполненияТестов(Событие, ПараметрыСобытия);");
КонецПроцедуры
// } Helpers
