//Перем КонтекстЯдра;
Перем Ожидаем;
Перем ВременныеФайлы;
Перем КомандныйФайл;

Перем Лог;
Перем ЛогВключен;

Перем RegExp_ПолучитьСписокТестов;
Перем RegExp_КонецФункции_ПолучитьСписокТестов;

//{ Интерфейс конвертера

Функция Инициализация() Экспорт
	//КонтекстЯдра = КонтекстЯдраПараметр;
	//Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	ВременныеФайлы = СоздатьУтилиту("ВременныеФайлы");
	КомандныйФайл = СоздатьУтилиту("КомандныйФайл");
	Ожидаем = СоздатьУтилиту("УтвержденияBDD");
	
	РегулярныеВыражения_Инициализация (RegExp_ПолучитьСписокТестов, "^\s*((?:procedure)|(?:function)|(?:процедура)|(?:функция))\s+(получитьсписоктестов)\s*\(([\wА-яёЁ\d]+)\s*\)\s+экспорт");
	РегулярныеВыражения_Инициализация (RegExp_КонецФункции_ПолучитьСписокТестов, "^\s*конецфункции");
	
	ВключитьЛог(Ложь);
	Лог = "";
КонецФункции

Функция ПреобразоватьФайл(ИсходныйФайл, НужноДелатьКопию) Экспорт
	//НаборТестов.НачатьГруппу("Преобразование файла с одним тестом", Истина);
	//ВыполнитьИнициализацию();
	ИмяКаталогаСборки = ПодготовитьВременныйКаталогДляСборкиРазборки();
	//ФайлТеста = ПолучитьФайлТестаИзМакета(ИмяКаталогаСборки);
	ФайлУтилиты = ПолучитьУтилитуСборкиРазборки(ИмяКаталогаСборки);
	МассивОписанийФайловМодулей = РазобратьФайлТестаНаИсходники(ИмяКаталогаСборки, ИсходныйФайл, ФайлУтилиты);
	МассивФайловМодулейТестов = НайтиФайлыМодуляТестаВИсходниках(МассивОписанийФайловМодулей);
	Для Каждого ФайлМодуляТеста Из МассивФайловМодулейТестов Цикл
		ИсходныйТекст = ПолучитьИсходныйТекстМодуляТеста(ФайлМодуляТеста);
		КонечныйТекст = ПреобразоватьТекстМодуляТестаВФормат_v4_reborn(ИсходныйТекст);
		ЗаписатьНовыйТекстМодуляТестаВИсходникМодуляФайлТеста(ФайлМодуляТеста, КонечныйТекст);
	КонецЦикла;
	Если НужноДелатьКопию Тогда
		ФайлКопии = СделатьКопиюФайла(ИсходныйФайл);
	КонецЕсли;
	СобратьФайлТеста(ИмяКаталогаСборки, ИсходныйФайл, ФайлУтилиты, МассивОписанийФайловМодулей);
	//ПроверитьНаличиеИсходнойКопииФайлаТеста();
	//ВыполнитьТестированиеПолученногоТеста();
	//УдалитьВременныеФайлы();
КонецФункции

Функция ВключитьЛог(НовоеЗначение = Истина) Экспорт
	ЛогВключен = НовоеЗначение = Истина;
КонецФункции

Функция ПолучитьЛог() Экспорт
	Возврат Лог;
КонецФункции

//}

//{ приватные методы

Функция СоздатьУтилиту(ИмяУтилиты)
	ФайлОбработки = Новый Файл(ИспользуемоеИмяФайла);
	Возврат ВнешниеОбработки.Создать(ФайлОбработки.Путь+"/../Plugins/"+ИмяУтилиты+".epf");
КонецФункции

Функция ПодготовитьВременныйКаталогДляСборкиРазборки()
	ИмяКаталогаСборки = ВременныеФайлы.СоздатьКаталог_();
	Возврат ИмяКаталогаСборки;
КонецФункции

//Функция ПолучитьФайлТестаИзМакета(ИмяКаталогаСборки)
//	МакетФайлаТеста = ПолучитьМакет(ИмяМакета); //МакетФайлаТеста = Новый ДвоичныеДанные;
//	
//	ФайлТеста = Новый Файл(ИмяКаталогаСборки+"\fixture.epf");
//	
//	МакетФайлаТеста.Записать(ФайлТеста.ПолноеИмя);
//	
//	Возврат ФайлТеста;
//КонецФункции

Функция ПолучитьУтилитуСборкиРазборки(ИмяКаталогаСборки)
	МакетУтилиты = ПолучитьМакет("v8unpack");
	
	Файл = Новый Файл(ИмяКаталогаСборки+"\v8unpack.exe");
	
	МакетУтилиты.Записать(Файл.ПолноеИмя);
	Возврат Файл;
КонецФункции

Функция РазобратьФайлТестаНаИсходники(ИмяКаталогаСборки, ФайлТеста, ФайлУтилиты) Экспорт
	МассивОписанийФайловМодулей = Новый Массив;
	
	ИмяКаталогаИсходниковФайла = ФайлТеста.ИмяБезРасширения;
	
	Файл = КомандныйФайл.Открыть(ВременныеФайлы.НовоеИмяФайла("bat"));
	КомандныйФайл.Добавить("cd /d " + ИмяКаталогаСборки);
	КомандныйФайл.Добавить(ФайлУтилиты.Имя + " -unpack " + ФайлТеста.ПолноеИмя + " " + ИмяКаталогаИсходниковФайла + " > "+ИмяКаталогаИсходниковФайла+".unpack.log");
	КодВозврата = КомандныйФайл.ВыполнитьКоманду();
	Ожидаем.Что(КодВозврата, "КодВозврата первый -unpack").Равно(0);
	
	Файлы = НайтиФайлы(ИмяКаталогаСборки+"/"+ИмяКаталогаИсходниковФайла, "*.0.data");
	Ожидаем.Что(Файлы.Количество(), "Должны быть файлы, а их нет").Больше(0);
	Для Каждого БинарныйФайл Из Файлы Цикл
		Сообщить(БинарныйФайл.ПолноеИмя);
		ИмяФайлаИсходников = БинарныйФайл.Имя + ".txt";
		
		Файл = КомандныйФайл.Открыть(ВременныеФайлы.НовоеИмяФайла("bat"));
		КомандныйФайл.Добавить("cd /d " + БинарныйФайл.Путь);
		КомандныйФайл.Добавить(ФайлУтилиты.Имя + " -undeflate " + БинарныйФайл.Имя + " " + ИмяФайлаИсходников + " > "+БинарныйФайл.ИмяБезРасширения+".unpack.log");
		КодВозврата = КомандныйФайл.ВыполнитьКоманду();
		Ожидаем.Что(КодВозврата, "КодВозврата -undeflate "+БинарныйФайл.Имя).Равно(0);
		
		Файл = КомандныйФайл.Открыть(ВременныеФайлы.НовоеИмяФайла("bat"));
		КомандныйФайл.Добавить("cd /d " + БинарныйФайл.Путь);
		КомандныйФайл.Добавить(ФайлУтилиты.Имя + " -unpack " + ИмяФайлаИсходников + " " + БинарныйФайл.ИмяБезРасширения + " > "+БинарныйФайл.ИмяБезРасширения+".unpack.log");
		КодВозврата = КомандныйФайл.ВыполнитьКоманду();
		
		ОписаниеИсходника = Новый Структура("ИсходныйФайл", БинарныйФайл);
		ОписаниеИсходника.Вставить("ФайлДополнительногоКонтейнера", Новый Файл(БинарныйФайл.Путь +"/"+ИмяФайлаИсходников));
		Если КодВозврата = 4294967245 Тогда //UnpackToFolder. This is not V8 file!
			//ОписаниеИсходника = Новый Структура("Файл,ТолькоСделанТолькоUndeflate,ИсходныйФайл", Новый Файл(БинарныйФайл.Путь +"/"+ИмяФайлаИсходников), Истина, БинарныйФайл);
			ОписаниеИсходника.Вставить("БылРазборДополнительногоКонтейнера", Ложь);
			ОписаниеИсходника.Вставить("Файл", Новый Файл(БинарныйФайл.Путь +"/"+ИмяФайлаИсходников));
			МассивОписанийФайловМодулей.Добавить(ОписаниеИсходника);
			Продолжить;
		ИначеЕсли КодВозврата = 0 Тогда
			//ОписаниеИсходника = Новый Структура("Файл,ТолькоСделанТолькоUndeflate,ИсходныйФайл", Новый Файл(БинарныйФайл.Путь +"/"+БинарныйФайл.ИмяБезРасширения+"/text.data"), Ложь, БинарныйФайл);
			ОписаниеИсходника.Вставить("БылРазборДополнительногоКонтейнера", Истина);
			ОписаниеИсходника.Вставить("Файл", Новый Файл(БинарныйФайл.Путь +"/"+БинарныйФайл.ИмяБезРасширения+"/text.data"));
			МассивОписанийФайловМодулей.Добавить(ОписаниеИсходника);
			Продолжить;
		КонецЕсли;
		Ожидаем.Что(КодВозврата, "КодВозврата второй -unpack "+БинарныйФайл.Имя).Равно(0);
	КонецЦикла;
	//Для Каждого Файл Из МассивОписанийФайловМодулей Цикл
	//	Сообщить(Файл.ПолноеИмя);
	//КонецЦикла;
	Возврат МассивОписанийФайловМодулей;
	
	//КомандныйФайл.Добавить("FOR /F %%I IN (*.0.data) DO (");
	//КомандныйФайл.Добавить("  " + ПутьУтилиты + " -undeflate %%I ~nx%I");
	//КомандныйФайл.Добавить("  " + ПутьУтилиты + " -unpack %%I ~nx%I");
	//КомандныйФайл.Добавить(")");
	//разборка
	//@echo off
	//v8unpack.exe  -unpack ШаблонТестаУФ.epf .\ШаблонТестаУФ
	//v8unpack.exe -undeflate .\ШаблонТестаУФ\727eda5f-558c-428b-86d2-3421c52f4c50.0.data .\ШаблонТестаУФ\Module.txt
	//v8unpack.exe -unpack .\ШаблонТестаУФ\Module.txt .\ШаблонТестаУФ\Module

	//v8unpack.exe -undeflate .\ШаблонТестаУФ\ba335523-e6ff-4049-91a9-5f97f7ab0a0b.0.data .\ШаблонТестаУФ\UF.txt
	//rem v8unpack.exe -unpack .\ШаблонТестаУФ\UF.txt .\ШаблонТеста\UF

	//rem chcp 65001 >nul
	//type .\ШаблонТестаУФ\Module\text.data
	//rem type .\ШаблонТестаУФ\UF.txt
	
	//сборка 
	//rem @echo off
	//v8unpack.exe -pack .\ШаблонТеста\Module .\ШаблонТеста\NewModule.txt 
	//v8unpack.exe -deflate .\ШаблонТеста\NewModule.txt .\ШаблонТеста\727eda5f-558c-428b-86d2-3421c52f4c50.0.data 
	//v8unpack.exe  -pack .\ШаблонТеста ШаблонТеста2.epf 

	//rem chcp 65001 >nul
	//rem type .\ШаблонТеста\Module\text.data	
	
	//ВызватьИсключение "Не реализован";
КонецФункции

Функция ПолучитьИмяКонтейнераИзФайла(БинарныйФайл)
	Возврат БинарныйФайл.Имя + ".txt";	
КонецФункции

Функция НайтиФайлыМодуляТестаВИсходниках(МассивОписанийФайловМодулей)
	МассивФайловМодулейТестов = Новый Массив;
	Для Каждого ОписаниеИсходника Из МассивОписанийФайловМодулей Цикл
		Файл = ОписаниеИсходника.Файл;
		Текст = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
		Стр = Текст.ПрочитатьСтроку();
		Пока Стр <> Неопределено Цикл // строки читаются до символа перевода строки
			Если РегулярныеВыражения_Проверка(RegExp_ПолучитьСписокТестов, Стр) Тогда
				МассивФайловМодулейТестов.Добавить(Файл);
				Прервать;
			КонецЕсли;
			Стр = Текст.ПрочитатьСтроку();
		КонецЦикла;		
	КонецЦикла;
	//Для Каждого Файл Из МассивОписанийФайловМодулей Цикл
	//	Сообщить(Файл.ПолноеИмя);
	//КонецЦикла;
	Возврат МассивФайловМодулейТестов;;
КонецФункции

Функция ПолучитьИсходныйТекстМодуляТеста(ФайлМодуляТеста)
	Возврат ПолучитьТекстФайла(ФайлМодуляТеста);
КонецФункции

Функция ПреобразоватьТекстМодуляТестаВФормат_v4_reborn(ИсходныйТекст)
	Возврат ПреобразоватьТекст(ИсходныйТекст);
КонецФункции

Функция ЗаписатьНовыйТекстМодуляТестаВИсходникМодуляФайлТеста(ФайлМодуляТеста, КонечныйТекст)
	ЗаписатьТекстВФайл(ФайлМодуляТеста, КонечныйТекст);
КонецФункции

Функция СделатьКопиюФайла(ИсходныйФайл)
	ФайлКопии = Новый Файл(ИсходныйФайл.Путь+"/"+ИсходныйФайл.ИмяБезРасширения +".orig.epf");
	КопироватьФайл(ИсходныйФайл.ПолноеИмя, ФайлКопии.ПолноеИмя);
	Ожидаем.Что(ФайлКопии.Существует(), "не удалось сделать копию-файла для файла "+ИсходныйФайл.ПолноеИмя).ЭтоИстина();
	Возврат ФайлКопии;
КонецФункции

Функция СобратьФайлТеста(ИмяКаталогаСборки, ФайлТеста, ФайлУтилиты, МассивОписанийФайловМодулей)
	УдалитьФайлы(ФайлТеста.ПолноеИмя);
	Ожидаем.Что(ФайлТеста.Существует(), "исходный файл теста не удалось удалить "+ФайлТеста.ПолноеИмя).ЭтоЛожь();
	
	Файл = КомандныйФайл.Открыть(ВременныеФайлы.НовоеИмяФайла("bat"));
	КомандныйФайл.Добавить("cd /d " + ИмяКаталогаСборки+"/"+ФайлТеста.ИмяБезРасширения);
	Для Каждого ОписаниеИсходника Из МассивОписанийФайловМодулей Цикл
		РазобранныйФайл = ОписаниеИсходника.Файл;
		ИсходныйФайл = ОписаниеИсходника.ИсходныйФайл;
		ФайлДополнительногоКонтейнера = ОписаниеИсходника.ФайлДополнительногоКонтейнера;
		Если ОписаниеИсходника.БылРазборДополнительногоКонтейнера Тогда
			КомандныйФайл.Добавить(ФайлУтилиты.Имя + " -pack " + РазобранныйФайл.Путь + " " + ФайлДополнительногоКонтейнера.Имя + " > "+РазобранныйФайл.Имя +".pack.log");
		КонецЕсли;
		
		КомандныйФайл.Добавить(ФайлУтилиты.Имя + " -deflate " + ФайлДополнительногоКонтейнера.Имя + " " + ИсходныйФайл.Имя + " >> "+РазобранныйФайл.Имя +".pack.log");
	КонецЦикла;
	ИмяКаталогаИсходниковФайла = ФайлТеста.ИмяБезРасширения;
	
	КомандныйФайл.Добавить("cd ..");
	КомандныйФайл.Добавить(ФайлУтилиты.Имя + " -pack " + ИмяКаталогаИсходниковФайла + " " + ФайлТеста.ПолноеИмя + " > "+ИмяКаталогаИсходниковФайла+".pack.log");
	КодВозврата = КомандныйФайл.ВыполнитьКоманду();
	Ожидаем.Что(КодВозврата, "КодВозврата первый -pack").Равно(0);
		
	//v8unpack.exe -pack .\ШаблонТеста\Module .\ШаблонТеста\NewModule.txt 
	//v8unpack.exe -deflate .\ШаблонТеста\NewModule.txt .\ШаблонТеста\727eda5f-558c-428b-86d2-3421c52f4c50.0.data 
	//v8unpack.exe  -pack .\ШаблонТеста ШаблонТеста2.epf 
КонецФункции


Функция ПреобразоватьТекст(Исходный) Экспорт
	
	ОписаниеМетодаПолучитьСписокТестов = ПолучитьОписаниеМетода_ПолучитьСписокТестов(Исходный);
	Если Не ЗначениеЗаполнено(ОписаниеМетодаПолучитьСписокТестов) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПолучитьПреобразованныйТекст(Исходный, ОписаниеМетодаПолучитьСписокТестов);
КонецФункции

Функция ПолучитьОписаниеМетода_ПолучитьСписокТестов(ИсходныйТекст) Экспорт
	ОписаниеМетода = Новый Структура("Начало, Конец, ИмяПараметра_КонтекстЯдра, ТелоМетода, КоллекцияТестов");
	
	Группировки = РегулярныеВыражения_Выполнить(RegExp_ПолучитьСписокТестов, ИсходныйТекст);
	Если Не ЗначениеЗаполнено(Группировки) Тогда
		ДобавитьЛог("Не удалось найти экспортную процедуру ПолучитьСписокТестов с одним параметром.");
		Возврат Неопределено;
	КонецЕсли;
	
	Группировка_Процедура = Группировки[0];
	Ожидаем.Что(Группировка_Процедура.ПодВыражения.Количество(), "Ожидаем, что количество найденных элементов при поиске ПолучитьСписокТестов равно образцу, а это не так").Равно(3);
	ОписаниеМетода.Вставить("Начало", Группировка_Процедура.Начало + 2);
	ОписаниеМетода.Вставить("ИмяПараметра_КонтекстЯдра", Группировка_Процедура.ПодВыражения[2]);
	ДобавитьЛог("ОписаниеМетода.ИмяПараметра_КонтекстЯдра "+ОписаниеМетода.ИмяПараметра_КонтекстЯдра);
	
	НачалоКодаПроцедуры = Группировка_Процедура.Начало + Группировка_Процедура.Длина + 2;
	
	Группировки_КонецПроцедуры = РегулярныеВыражения_Выполнить(RegExp_КонецФункции_ПолучитьСписокТестов, Сред(ИсходныйТекст, НачалоКодаПроцедуры));
	Если Не ЗначениеЗаполнено(Группировки_КонецПроцедуры) Тогда
		ВызватьИсключение "Не удалось найти конец процедуры для процедуры ПолучитьСписокТестов с одним параметром.";
	КонецЕсли;
	
	ГруппировкаДляКонецПроцедуры = Группировки_КонецПроцедуры[0];
	ТекстМетодаПолучитьСписокТестов = Сред(ИсходныйТекст, НачалоКодаПроцедуры, ГруппировкаДляКонецПроцедуры.Начало - 1); 
	
	ОписаниеМетода.Вставить("Конец", НачалоКодаПроцедуры + ГруппировкаДляКонецПроцедуры.Начало + ГруппировкаДляКонецПроцедуры.Длина + 2);
	ОписаниеМетода.Вставить("ТелоМетода", ТекстМетодаПолучитьСписокТестов);
	
	ДобавитьЛог("ТелоМетода ПолучитьСписокТестов <"+ОписаниеМетода.ТелоМетода+">");
	
	ОписаниеГлобальнойПеременнойКонтекстаЯдра = ПолучитьОписаниеГлобальнойПеременнойКонтекстаЯдра(ИсходныйТекст, ОписаниеМетода);
	ПодтвердитьИмяГлобальнойПеременнойКонтекстаЯдра(ИсходныйТекст, ОписаниеМетода, ОписаниеГлобальнойПеременнойКонтекстаЯдра);
	ОписаниеМетода.Вставить("ОписаниеГлобальнойПеременнойКонтекстаЯдра", ОписаниеГлобальнойПеременнойКонтекстаЯдра);
	
	КоллекцияТестов = ПолучитьКоллекциюТестов(ИсходныйТекст, ОписаниеМетода);
	ОписаниеМетода.Вставить("КоллекцияТестов", КоллекцияТестов);
	
	Возврат ОписаниеМетода;
КонецФункции

Функция ПолучитьОписаниеГлобальнойПеременнойКонтекстаЯдра(ИсходныйТекст, ОписаниеМетода)
	RegExp_ПрисваиваниеКонтекстаЯдра = Неопределено;
	РегулярныеВыражения_Инициализация (RegExp_ПрисваиваниеКонтекстаЯдра, "^\s*([\wА-яёЁ\d]+)\s*=\s*" + ОписаниеМетода.ИмяПараметра_КонтекстЯдра + "\s*;");
	Группировки = РегулярныеВыражения_Выполнить(RegExp_ПрисваиваниеКонтекстаЯдра, ОписаниеМетода.ТелоМетода);
	Если Не ЗначениеЗаполнено(Группировки) Тогда
		ВызватьИсключение "Не удалось найти присваивание параметра контекста ядра.";
	КонецЕсли;
	Группировка = Группировки[0];
	
	Ожидаем.Что(Группировка.ПодВыражения.Количество(), "Ожидаем, что количество найденных элементов при поиске ИмяГлобальнойПеременнойКонтекстаЯдра равно образцу, а это не так").Равно(1);
	
	ОписаниеГлобальнойПеременнойКонтекстаЯдра = Новый Структура("Имя, НачалоОписания, КонецОписания");	

	ОписаниеГлобальнойПеременнойКонтекстаЯдра.Вставить("Имя", Группировка.ПодВыражения[0]);
	
	ДобавитьЛог("предварительно ОписаниеГлобальнойПеременнойКонтекстаЯдра.Имя = " + ОписаниеГлобальнойПеременнойКонтекстаЯдра.Имя);
	Возврат ОписаниеГлобальнойПеременнойКонтекстаЯдра;
КонецФункции

Процедура ПодтвердитьИмяГлобальнойПеременнойКонтекстаЯдра(ИсходныйТекст, ОписаниеМетода, ОписаниеГлобальнойПеременнойКонтекстаЯдра)
	RegExp_ОбъявлениеГлобальнойПеременнойКонтекстаЯдра = Неопределено;
	РегулярныеВыражения_Инициализация (RegExp_ОбъявлениеГлобальнойПеременнойКонтекстаЯдра, "^\s*Перем\s+(" + ОписаниеГлобальнойПеременнойКонтекстаЯдра.Имя + ")\s*[;,]");
	Группировки = РегулярныеВыражения_Выполнить(RegExp_ОбъявлениеГлобальнойПеременнойКонтекстаЯдра, ИсходныйТекст);
	Если Не ЗначениеЗаполнено(Группировки) Тогда
		ВызватьИсключение ("Не удалось найти глобальную переменную контекста ядра.");
	КонецЕсли;
	Группировка = Группировки[0];
	
	Ожидаем.Что(Группировка.ПодВыражения.Количество(), "Ожидаем, что количество найденных элементов при проверке ИмяГлобальнойПеременнойКонтекстаЯдра равно образцу, а это не так").Равно(1);
	ДобавитьЛог("подтверждено ИмяГлобальнойПеременнойКонтекстаЯдра = "+Группировка.ПодВыражения[0]);

	ОписаниеГлобальнойПеременнойКонтекстаЯдра.Вставить("НачалоОписания", Группировка.Начало);
	ОписаниеГлобальнойПеременнойКонтекстаЯдра.Вставить("КонецОписания", Группировка.Начало + Группировка.Длина);
КонецПроцедуры

Функция ПолучитьКоллекциюТестов(ИсходныйТекст, ОписаниеМетода)
	RegExp_ИмяКоллекцииТестов = Неопределено;
	//РегулярныеВыражения_Инициализация (RegExp_ИмяКоллекцииТестов, "\s*([\wА-яёЁ\d]+)\s*=\s*Новый\s+Массив\s*[;\(]([.\s].+)+Возврат\s+([\wА-яёЁ\d]+)");
	РегулярныеВыражения_Инициализация (RegExp_ИмяКоллекцииТестов, "^\s*Возврат\s+([\wА-яёЁ\d]+)");
	Группировки = РегулярныеВыражения_Выполнить(RegExp_ИмяКоллекцииТестов, ОписаниеМетода.ТелоМетода);
	Если Не ЗначениеЗаполнено(Группировки) Тогда
		ВызватьИсключение "Не удалось найти создание коллекции тестов.";
	КонецЕсли;
	Ожидаем.Что(Группировки[0].ПодВыражения.Количество(), "Ожидаем, что количество найденных элементов при поиске ИмяГлобальнойПеременнойКонтекстаЯдра равно образцу, а это не так").Равно(1);
	ИмяПеременнойКоллекцииСпискаТестов = Группировки[0].ПодВыражения[0];
	ДобавитьЛог("ИмяПеременнойКоллекцииСпискаТестов = "+ИмяПеременнойКоллекцииСпискаТестов);
	
	RegExp_ДобавлениеТеста = Неопределено;
	РегулярныеВыражения_Инициализация (RegExp_ДобавлениеТеста, "^\s*" + ИмяПеременнойКоллекцииСпискаТестов + "\s*\.\s*Добавить\(\s*""([\wА-яёЁ\d]+)""\s*\)\s*;");
	Группировки = РегулярныеВыражения_Выполнить(RegExp_ДобавлениеТеста, ОписаниеМетода.ТелоМетода);
	
	КоллекцияТестов = Новый  Массив;
	Если Не ЗначениеЗаполнено(Группировки) Тогда
		Возврат КоллекцияТестов; //ВызватьИсключение "Не удалось найти добавление тестов.";
	КонецЕсли;
	Ожидаем.Что(Группировки[0].ПодВыражения.Количество(), "Ожидаем, что количество найденных элементов при поиске ИмяГлобальнойПеременнойКонтекстаЯдра равно образцу, а это не так").Равно(1);
	
	Для Каждого Группировка Из Группировки Цикл
		ИмяТеста = Группировка.ПодВыражения[0];
		ДобавитьЛог("добавляем имя теста = "+ИмяТеста);
		КоллекцияТестов.Добавить(ИмяТеста);
	КонецЦикла;
	
	Возврат КоллекцияТестов;
КонецФункции

Функция ПолучитьПреобразованныйТекст(Исходный, ОписаниеМетодаПолучитьСписокТестов)
	ОписаниеГлобальнойПеременнойКонтекстаЯдра = ОписаниеМетодаПолучитьСписокТестов.ОписаниеГлобальнойПеременнойКонтекстаЯдра;
	ИмяГлобальнойПеременнойКонтекстаЯдра = ОписаниеГлобальнойПеременнойКонтекстаЯдра.Имя;
	
	Макет = ПолучитьМакет("ШаблонТеста");

	ОбластьПеременныеТестирования = Макет.ПолучитьОбласть("ПеременныеТестирования");
	ОбластьОписанияТестов = Макет.ПолучитьОбласть("ОписанияТестов");
	ОбластьДобавитьИмяТеста = Макет.ПолучитьОбласть("ДобавитьИмяТеста");
	ОбластьЗавершениеСпискаТестов = Макет.ПолучитьОбласть("ЗавершениеСпискаТестов");
	
	ИтоговыйТекст = Новый ТекстовыйДокумент;
	
	ТекстДоОписанияГлобальнойПеременнойКонтекстаЯдра = СокрЛП(Лев(Исходный, ОписаниеГлобальнойПеременнойКонтекстаЯдра.НачалоОписания-1));
	ДобавитьЛог("текст до описания глобальной переменной контекста "+Символы.ПС+ТекстДоОписанияГлобальнойПеременнойКонтекстаЯдра +"=========="+Символы.ПС);
	
	ДобавитьНепустуюСтрокуКТексту(ИтоговыйТекст, ТекстДоОписанияГлобальнойПеременнойКонтекстаЯдра);
	
	ИтоговыйТекст.Вывести(ОбластьПеременныеТестирования);
	ИтоговыйТекст.ДобавитьСтроку("");
	
	ТекстДоМетодаПолучитьСписокТестов = СокрЛП(Сред(Исходный, ОписаниеГлобальнойПеременнойКонтекстаЯдра.КонецОписания + 1, ОписаниеМетодаПолучитьСписокТестов.Начало-1 - ОписаниеГлобальнойПеременнойКонтекстаЯдра.КонецОписания - 1));
	ДобавитьЛог("текст до ПолучитьСписокТестов"+Символы.ПС+ТекстДоМетодаПолучитьСписокТестов +"=========="+Символы.ПС);
	ДобавитьНепустуюСтрокуКТексту(ИтоговыйТекст, ТекстДоМетодаПолучитьСписокТестов);
	Если Не ПустаяСтрока(ТекстДоМетодаПолучитьСписокТестов) Тогда
		ИтоговыйТекст.ДобавитьСтроку("");
	КонецЕсли;
	
	ИтоговыйТекст.ДобавитьСтроку(ДобавитьКомментарии("Перем " + ИмяГлобальнойПеременнойКонтекстаЯдра + ";"));
	
	ИсходныйТекстВКомментарии = ДобавитьКомментарии(Сред(Исходный, ОписаниеМетодаПолучитьСписокТестов.Начало, ОписаниеМетодаПолучитьСписокТестов.Конец-ОписаниеМетодаПолучитьСписокТестов.Начало - 2));
	
	ИтоговыйТекст.ДобавитьСтроку(ИсходныйТекстВКомментарии);
	ИтоговыйТекст.ДобавитьСтроку("");
	
	ИтоговыйТекст.Вывести(ОбластьОписанияТестов);
	
	Для Каждого ИмяТеста Из ОписаниеМетодаПолучитьСписокТестов.КоллекцияТестов Цикл
		// из-за невозможности управлять длиной строки-параметра при установке параметра не использую параметры макета текстового документа
		ДобавляемыйТекст = СтрЗаменить(ОбластьДобавитьИмяТеста.ПолучитьСтроку(2), "%ИмяТеста%", ИмяТеста);
		ИтоговыйТекст.ДобавитьСтроку(ДобавляемыйТекст);
	КонецЦикла;
	ИтоговыйТекст.Вывести(ОбластьЗавершениеСпискаТестов);
	
	ОсновнойТекст = Сред(Исходный, ОписаниеМетодаПолучитьСписокТестов.Конец);
	ИтоговыйТекст.ДобавитьСтроку(ОсновнойТекст);
	
	ДобавитьЛог("ИтоговыйТекст.ПолучитьТекст() = "+Символы.ПС + ИтоговыйТекст.ПолучитьТекст()+"=========="+Символы.ПС);
	
	Возврат ИтоговыйТекст.ПолучитьТекст();
КонецФункции

Функция ДобавитьКомментарии(Строка)
	Рез = Новый ТекстовыйДокумент;
	Для к=1 По СтрЧислоСтрок(Строка) Цикл
		Рез.ДобавитьСтроку("//"+СтрПолучитьСтроку(Строка, к));
	КонецЦикла;
	Возврат СокрЛП(Рез.ПолучитьТекст());
КонецФункции

Процедура ДобавитьНепустуюСтрокуКТексту(Текст, Строка)
	Если Не ПустаяСтрока(Строка) Тогда
		Текст.ДобавитьСтроку(Строка);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьТекстФайла(Файл)
	Текст = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
	Стр = Текст.Прочитать();
	Возврат Стр;
КонецФункции

Процедура ЗаписатьТекстВФайл(Файл, Строка)
	Текст = Новый ЗаписьТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
	Текст.Записать(Строка);
	Текст.Закрыть();
КонецПроцедуры

Процедура ДобавитьЛог(Сообщение)
	Если ЛогВключен Тогда
		Лог = Лог + Сообщение + Символы.ПС;
	КонецЕсли;
КонецПроцедуры

//}

//{ RegExp

Процедура РегулярныеВыражения_Инициализация (RegExp, Шаблон, ИскатьДоПервогоСовпадения = Ложь, МногоСтрок = Истина, ИгнорироватьРегистр = Истина) Экспорт

    Если RegExp = Неопределено Тогда //Нужна инициализация
        RegExp = Новый COMОбъект("VBScript.RegExp");    // создаем объект для работы с регулярными выражениями
    КонецЕсли;

    //Заполняем данные
    RegExp.MultiLine = МногоСтрок;                  // истина — текст многострочный, ложь — одна строка
    RegExp.Global = Не ИскатьДоПервогоСовпадения;   // истина — поиск по всей строке, ложь — до первого совпадения
    RegExp.IgnoreCase = ИгнорироватьРегистр;        // истина — игнорировать регистр строки при поиске
    RegExp.Pattern = Шаблон;                        // шаблон (регулярное выражение)

КонецПроцедуры

Функция РегулярныеВыражения_Проверка(RegExp, ПроверяемыйТекст)

    Возврат RegExp.Test(ПроверяемыйТекст);

КонецФункции

Функция РегулярныеВыражения_Выполнить(RegExp, АнализируемыйТекст) Экспорт

    РезультатАнализаСтроки = RegExp.Execute(АнализируемыйТекст);

    Группировки = Новый Массив;

    Для Каждого Выражение Из РезультатАнализаСтроки Цикл
        СтруктураВыражение = Новый Структура ("Начало, Длина, Значение, ПодВыражения", Выражение.FirstIndex, Выражение.Length,Выражение.Value);

        //Обработка подвыражений
        МассивПодВыражений = Новый Массив;
        Для Каждого ПодВыражение Из Выражение.SubMatches Цикл
            МассивПодВыражений.Добавить(ПодВыражение);
        КонецЦикла;
        СтруктураВыражение.ПодВыражения = МассивПодВыражений;

        Группировки.Добавить (СтруктураВыражение);

    КонецЦикла;

    Возврат Группировки;

КонецФункции

Функция РегулярныеВыражения_Заменить(RegExp, АнализируемыйТекст, ЗаменяемыйТекст) Экспорт

    Рез = RegExp.Replace(АнализируемыйТекст, ЗаменяемыйТекст);
    Возврат Рез;

КонецФункции

//}