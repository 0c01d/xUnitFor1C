Перем КонтекстЯдра;
Перем Ожидаем;

Перем Лог;

Перем RegExp_ПолучитьСписокТестов;
Перем RegExp_КонецФункции_ПолучитьСписокТестов;

//Перем ИмяПараметра_КонтекстЯдра;

//{ Интерфейс конвертера

Функция Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	
	РегулярныеВыражения_Инициализация (RegExp_ПолучитьСписокТестов, "^\s*((?:procedure)|(?:function)|(?:процедура)|(?:функция))\s+(получитьсписоктестов)\s*\(([\wА-яёЁ\d]+)\s*\)\s+экспорт");
	РегулярныеВыражения_Инициализация (RegExp_КонецФункции_ПолучитьСписокТестов, "^\s*конецфункции");
	
	Лог = "";
КонецФункции

Функция ПреобразоватьТекст(Исходный) Экспорт
	
	ОписаниеМетодаПолучитьСписокТестов = ПолучитьОписаниеМетода_ПолучитьСписокТестов(Исходный);
	Если Не ЗначениеЗаполнено(ОписаниеМетодаПолучитьСписокТестов) Тогда
		ЛогПараметр = Лог;
		Возврат "";
	КонецЕсли;
	
	//ИмяГлобальнойПеременнойКонтекстаТестирования = ПолучитьИмяГлобальнойПеременнойКонтекстаТестирования(ОписаниеМетодаПолучитьСписокТестов.ИмяПараметра_КонтекстЯдра, ОписаниеМетодаПолучитьСписокТестов.ТелоМетода);
	//Если Не ЗначениеЗаполнено(ИмяГлобальнойПеременнойКонтекстаТестирования) Тогда
	//	ЛогПараметр = Лог;
	//	Возврат "";
	//КонецЕсли;
	
	ЛогПараметр = Лог;
	ВызватьИсключение "Не реализовано";
КонецФункции

Функция ПолучитьЛог() Экспорт
	Возврат Лог;
КонецФункции

//}

//{ приватные методы

Функция ПолучитьОписаниеМетода_ПолучитьСписокТестов(ИсходныйТекст) Экспорт
	ОписаниеМетода = Новый Структура("Начало, Конец, ИмяПараметра_КонтекстЯдра, ТелоМетода, КоллекцияТестов");
	
	Группировки = РегулярныеВыражения_Выполнить(RegExp_ПолучитьСписокТестов, ИсходныйТекст);
	Если Не ЗначениеЗаполнено(Группировки) Тогда
		ДобавитьЛог("Не удалось найти экспортную процедуру ПолучитьСписокТестов с одним параметром.");
		Возврат Неопределено;
	КонецЕсли;
	
	Группировка_Процедура = Группировки[0];
	Ожидаем.Что(Группировка_Процедура.ПодВыражения.Количество(), "Ожидаем, что количество найденных элементов при поиске ПолучитьСписокТестов равно образцу, а это не так").Равно(3);
	ОписаниеМетода.Вставить("Начало", Группировка_Процедура.Начало);
	ОписаниеМетода.Вставить("ИмяПараметра_КонтекстЯдра", Группировка_Процедура.ПодВыражения[2]);
	ДобавитьЛог("ОписаниеМетода.ИмяПараметра_КонтекстЯдра "+ОписаниеМетода.ИмяПараметра_КонтекстЯдра);
	
	НачалоКодаПроцедуры = Группировки[0].Начало + Группировки[0].Длина + 2;
	
	Группировки_КонецПроцедуры = РегулярныеВыражения_Выполнить(RegExp_КонецФункции_ПолучитьСписокТестов, Сред(ИсходныйТекст, НачалоКодаПроцедуры));
	Если Не ЗначениеЗаполнено(Группировки_КонецПроцедуры) Тогда
		ДобавитьЛог("Не удалось найти конец процедуры для процедуры ПолучитьСписокТестов с одним параметром.");
		Возврат Неопределено;
	КонецЕсли;
	
	ГруппировкаДляКонецПроцедуры = Группировки_КонецПроцедуры[0];
	ТекстМетодаПолучитьСписокТестов = Сред(ИсходныйТекст, НачалоКодаПроцедуры, ГруппировкаДляКонецПроцедуры.Начало - 1); 
	
	ОписаниеМетода.Вставить("Конец", ГруппировкаДляКонецПроцедуры.Начало);
	ОписаниеМетода.Вставить("ТелоМетода", ТекстМетодаПолучитьСписокТестов);
	
	ДобавитьЛог("ТелоМетода ПолучитьСписокТестов <"+ОписаниеМетода.ТелоМетода+">");
	
	ИмяГлобальнойПеременнойКонтекстаЯдра = ПолучитьИмяГлобальнойПеременнойКонтекстаЯдра(ИсходныйТекст, ОписаниеМетода);
	ОписаниеМетода.Вставить("ИмяГлобальнойПеременнойКонтекстаЯдра", ИмяГлобальнойПеременнойКонтекстаЯдра);
	
	Возврат ОписаниеМетода;
КонецФункции

Функция ПолучитьИмяГлобальнойПеременнойКонтекстаЯдра(ИсходныйТекст, ОписаниеМетода);
	RegExp_ПрисваниеКонтекстаЯдра = Неопределено;
	РегулярныеВыражения_Инициализация (RegExp_ПрисваниеКонтекстаЯдра, "^\s*([\wА-яёЁ\d]+)\s*=\s*" + ОписаниеМетода.ИмяПараметра_КонтекстЯдра + "\s*;");
	Группировки = РегулярныеВыражения_Выполнить(RegExp_ПрисваниеКонтекстаЯдра, ОписаниеМетода.ТелоМетода);
	Если Не ЗначениеЗаполнено(Группировки) Тогда
		ДобавитьЛог("Не удалось найти присваивание параметра контекста ядра.");
		Возврат Неопределено;
	КонецЕсли;
	Ожидаем.Что(Группировки[0].ПодВыражения.Количество(), "Ожидаем, что количество найденных элементов при поиске ИмяГлобальнойПеременнойКонтекстаЯдра равно образцу, а это не так").Равно(1);
	ИмяГлобальнойПеременнойКонтекстаЯдра = Группировки[0].ПодВыражения[0];
	ДобавитьЛог("предварительно ИмяГлобальнойПеременнойКонтекстаЯдра = "+ИмяГлобальнойПеременнойКонтекстаЯдра);
	
	RegExp_ОбъявлениеГлобальнойПеременнойКонтекстаЯдра = Неопределено;
	РегулярныеВыражения_Инициализация (RegExp_ОбъявлениеГлобальнойПеременнойКонтекстаЯдра, "^\s*Перем\s+(" + ИмяГлобальнойПеременнойКонтекстаЯдра + ")\s*[;,]");
	Группировки = РегулярныеВыражения_Выполнить(RegExp_ОбъявлениеГлобальнойПеременнойКонтекстаЯдра, ИсходныйТекст);
	Если Не ЗначениеЗаполнено(Группировки) Тогда
		ДобавитьЛог("Не удалось найти глобальную переменную контекста ядра.");
		Возврат Неопределено;
	КонецЕсли;
	Ожидаем.Что(Группировки[0].ПодВыражения.Количество(), "Ожидаем, что количество найденных элементов при проверке ИмяГлобальнойПеременнойКонтекстаЯдра равно образцу, а это не так").Равно(1);
	ИмяГлобальнойПеременнойКонтекстаЯдра = Группировки[0].ПодВыражения[0];
	ДобавитьЛог("подтверждено ИмяГлобальнойПеременнойКонтекстаЯдра = "+ИмяГлобальнойПеременнойКонтекстаЯдра);
	Возврат ИмяГлобальнойПеременнойКонтекстаЯдра;
КонецФункции

Процедура ДобавитьЛог(Сообщение)
	Лог = Лог + Сообщение + Символы.ПС;
КонецПроцедуры

//}

//{ RegExp

Процедура РегулярныеВыражения_Инициализация (RegExp, Шаблон, ИскатьДоПервогоСовпадения = Истина, МногоСтрок = Истина, ИгнорироватьРегистр = Истина) Экспорт

    Если RegExp = Неопределено Тогда //Нужна инициализация
        RegExp = Новый COMОбъект("VBScript.RegExp");    // создаем объект для работы с регулярными выражениями
    КонецЕсли;

    //Заполняем данные
    RegExp.MultiLine = МногоСтрок;                  // истина — текст многострочный, ложь — одна строка
    RegExp.Global = Не ИскатьДоПервогоСовпадения;   // истина — поиск по всей строке, ложь — до первого совпадения
    RegExp.IgnoreCase = ИгнорироватьРегистр;        // истина — игнорировать регистр строки при поиске
    RegExp.Pattern = Шаблон;                        // шаблон (регулярное выражение)

КонецПроцедуры

Функция РегулярныеВыражения_Проверка(RegExp, ПроверяемыйТекст)

    Возврат RegExp.Test(ПроверяемыйТекст);

КонецФункции

Функция РегулярныеВыражения_Выполнить(RegExp, АнализируемыйТекст) Экспорт

    РезультатАнализаСтроки = RegExp.Execute(АнализируемыйТекст);

    Группировки = Новый Массив;

    Для Каждого Выражение Из РезультатАнализаСтроки Цикл
        СтруктураВыражение = Новый Структура ("Начало, Длина, Значение, ПодВыражения", Выражение.FirstIndex, Выражение.Length,Выражение.Value);

        //Обработка подвыражений
        МассивПодВыражений = Новый Массив;
        Для Каждого ПодВыражение Из Выражение.SubMatches Цикл
            МассивПодВыражений.Добавить(ПодВыражение);
        КонецЦикла;
        СтруктураВыражение.ПодВыражения = МассивПодВыражений;

        Группировки.Добавить (СтруктураВыражение);

    КонецЦикла;

    Возврат Группировки;

КонецФункции
//}