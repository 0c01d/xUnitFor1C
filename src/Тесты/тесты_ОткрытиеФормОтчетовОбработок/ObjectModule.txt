Перем _Форма;

Перем	юТест;

Перем	мИменаОсновныхФорм;
Перем	мИменаОсновныхФорм_Списки;
Перем	мИменаОсновныхФорм_Объекты;
Перем	мПолучениеФорм;

// основная процедура для юнит-тестирования SnowTest
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	СоздатьФорму_ПолучениеФорм();
	СоздатьИменаОсновныхФорм();	

	//ДобавитьТестДляМетаданного_Справочник(ВсеТесты, Метаданные.Справочники, "Тест_ОткрытьФормуСуществующегоЭлементаСправочника", ПолучитьСписокИсключений_Справочники_Существующие());
	
	ДобавитьТестДляМетаданного(ВсеТесты, Метаданные.Отчеты, "ТестДолжен_ОткрытьФорму_ПоМетаФорме", ПолучитьСписокИсключений_Отчеты());
	
	ДобавитьТестДляМетаданного(ВсеТесты, Метаданные.Обработки, "ТестДолжен_ОткрытьФорму_ПоМетаФорме", ПолучитьСписокИсключений_Обработки());

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста()
	//НачатьТранзакцию();
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	//НачатьТранзакцию();
	
	ЗакрытьФорму();
	
	//Если ТранзакцияАктивна() Тогда
	//	ОтменитьТранзакцию();
	//КонецЕсли;
КонецПроцедуры

Процедура ЗакрытьФорму()
	Если ТипЗнч(_Форма) <> Тип("Форма") и ТипЗнч(_Форма) <> Тип("УправляемаяФорма") Тогда
		Возврат;
	КонецЕсли; 
	_Форма.Модифицированность = Ложь;
	Если _Форма.Открыта() Тогда
		_Форма.Модифицированность = Ложь;
		Попытка
			_Форма.Закрыть();
		Исключение
			Ошибка = ИнформацияОбОшибке();
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			//ДобавитьСтрокуРезультата(ИмяОперации, ИнформацияОбОшибке());
			НачатьТранзакцию();
			_Форма.УстановитьДействие("ПередЗакрытием", Неопределено);
			_Форма.УстановитьДействие("ПриЗакрытии", Неопределено);
			_Форма.Закрыть();
			ВызватьИсключение Ошибка; 			
		КонецПопытки;
	Иначе
		Попытка
			_Форма.Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;
	_Форма = "";

КонецПроцедуры

//{ блок работы с управляемыми формами - из "Инструменты разработчика"
Процедура ТестДолжен_ОткрытьФорму_ПоМетаФорме(МетаФорма_ПолноеИмя) Экспорт
	
	ВыводитьСообщения = Ложь;
	ВыводитьСообщенияВЖурналРегистрации = Ложь;
	ВнешнийОбъект = Неопределено;
	КлючВременнойФормы = "908насмь9ыв";
	
	ИмяОперации = МетаФорма_ПолноеИмя; //МетаФорма.ПолноеИмя();
		//Если ВнешнийОбъект <> Неопределено Тогда
		//	ИмяОперации = Сред(ВнешнийОбъект.ИспользуемоеИмяФайла, СтрДлина(КаталогВнешнихМетаданных) + 2) + "." + ИмяОперации;
		//КонецЕсли; 
	Если ВыводитьСообщения Тогда
		Сообщить(ИмяОперации);
	КонецЕсли; 
	Если ВыводитьСообщенияВЖурналРегистрации Тогда
		ЗаписьЖурналаРегистрации(Метаданные().Имя, УровеньЖурналаРегистрации.Информация, , , "Операция: " + ИмяОперации);
	КонецЕсли;
	//НачатьТранзакцию();
	//Попытка
		Форма = ПолучитьНовуюФорму(МетаФорма_ПолноеИмя, ВнешнийОбъект, КлючВременнойФормы);
		Если Форма = Неопределено Тогда
			//ОтменитьТранзакцию();
			Возврат; //Продолжить;
		КонецЕсли;
			//ЭтоФормаСсылочногоОбъекта = Ложь;
			//Если ТипЗнч(Форма) = Тип("Форма") Тогда //МетаФорма.ТипФормы <> Метаданные.СвойстваОбъектов.ТипФормы.Управляемая
			//	Попытка
			//		Пустышка = Форма.ЭтотОбъект.ЭтоНовый();
			//		ЭтоФормаСсылочногоОбъекта = Истина;
			//	Исключение
			//	КонецПопытки;
			//Иначе
			//	Если Форма.Параметры.Свойство("Ключ") Тогда
			//		Попытка
			//			Пустышка = Форма.Параметры.Ключ.Ссылка;
			//			ЭтоФормаСсылочногоОбъекта = Истина;
			//		Исключение
			//		КонецПопытки;
			//	КонецЕсли; 
			//КонецЕсли; 
			//Если ЭтоФормаСсылочногоОбъекта Тогда
			//	Если ТипЗнч(Форма) = Тип("Форма") Тогда
			//		СсылкаОбъекта = Форма.Ссылка;
			//	Иначе
			//		СсылкаОбъекта = Форма.Параметры.Ключ;
			//	КонецЕсли; 
			//	МенеджерТипаОбъектаФормы = ирГлобальный.ЛксПолучитьМенеджер(СсылкаОбъекта);
			//	Выборка = МенеджерТипаОбъектаФормы.Выбрать();
			//	Если ТипЗнч(Форма) = Тип("Форма") Тогда
			//		Если Выборка.Следующий() Тогда
			//			СсылочныйОбъект = Выборка.ПолучитьОбъект();
			//			СсылочныйОбъект = СсылочныйОбъект.Скопировать();
			//		Иначе
			//			СсылочныйОбъект = ирНеглобальный.СоздатьСсылочныйОбъектПоМетаданнымЛкс(МетаОбъект);
			//			ЗаполнитьРеквизитыНепустымиЗначениями(СсылочныйОбъект, МетаОбъект);
			//		КонецЕсли; 
			//		Если МенеджерТипаОбъектаФормы = МенеджерОбъектаМетаданных Тогда
			//			Форма = СсылочныйОбъект.ПолучитьФорму(МетаФорма.Имя, , КлючВременнойФормы);
			//		Иначе
			//			// Дольше но универсальнее
			//			Форма = ПолучитьНовуюФорму(МетаФорма, ВнешнийОбъект, КлючВременнойФормы);
			//			Форма[мПлатформа.ПолучитьИмяОсновногоРеквизитаФормы(Форма)] = СсылочныйОбъект;
			//		КонецЕсли; 							
			//	Иначе
			//		ПараметрыФормы = Новый Структура;
			//		Если Выборка.Следующий() Тогда
			//			ПараметрыФормы.Вставить("ЗначениеКопирования", Выборка.Ссылка);
			//		КонецЕсли; 
			//		Форма = ПолучитьФормуЛкс(МетаФорма.ПолноеИмя(), ПараметрыФормы, , КлючВременнойФормы);
			//		//Форма = ирНеглобальный.ПолучитьФормуЛкс(МетаФорма.ПолноеИмя(), ПараметрыФормы, , КлючВременнойФормы);
			//	КонецЕсли; 
			//КонецЕсли;
		ТестироватьФорму(Форма, ИмяОперации);
	//Исключение
	//	ДобавитьСтрокуРезультата(ИмяОперации, ИнформацияОбОшибке());
	//КонецПопытки;
	//ОтменитьТранзакцию();
КонецПроцедуры

Процедура СоздатьИменаОсновныхФорм()
	Если Не ЗначениеЗаполнено(мИменаОсновныхФорм) Тогда
		мИменаОсновныхФорм = Новый Массив();
	КонецЕсли;
	СоздатьИменаОсновныхФорм_Объекты();
	СоздатьИменаОсновныхФормСписка();
	Для каждого эл Из мИменаОсновныхФорм_Объекты Цикл
		мИменаОсновныхФорм.Добавить(эл);
	КонецЦикла;
	Для каждого эл Из мИменаОсновныхФорм_Списки Цикл
		мИменаОсновныхФорм.Добавить(эл);
	КонецЦикла;
		//мИменаОсновныхФорм.Добавить("ОсновнаяФорма");
		//мИменаОсновныхФорм.Добавить("ОсновнаяФормаСписка");
		//мИменаОсновныхФорм.Добавить("ОсновнаяФормаДляВыбора");
		//мИменаОсновныхФорм.Добавить("ОсновнаяФормаДляВыбораГруппы");
		//мИменаОсновныхФорм.Добавить("ОсновнаяФормаОбъекта");
		//мИменаОсновныхФорм.Добавить("ОсновнаяФормаГруппы");
		//мИменаОсновныхФорм.Добавить("ОсновнаяФормаЗаписи");
		//мИменаОсновныхФорм.Добавить("ОсновнаяФормаНастроек");
		//мИменаОсновныхФорм.Добавить("ОсновнаяФормаСохранения");
		//мИменаОсновныхФорм.Добавить("ОсновнаяФормаЗагрузки");
		//мИменаОсновныхФорм.Добавить("ОсновнаяФормаКонстант");
		
		//мИменаОсновныхФорм.Добавить("ДополнительнаяФорма");
		//мИменаОсновныхФорм.Добавить("ДополнительнаяФормаСписка");
		//мИменаОсновныхФорм.Добавить("ДополнительнаяФормаДляВыбора");
		//мИменаОсновныхФорм.Добавить("ДополнительнаяФормаДляВыбораГруппы");
		//мИменаОсновныхФорм.Добавить("ДополнительнаяФормаОбъекта");
		//мИменаОсновныхФорм.Добавить("ДополнительнаяФормаГруппы");
		//мИменаОсновныхФорм.Добавить("ДополнительнаяФормаЗаписи");
		//мИменаОсновныхФорм.Добавить("ДополнительнаяФормаНастроек");
		//мИменаОсновныхФорм.Добавить("ДополнительнаяФормаСохранения");
		//мИменаОсновныхФорм.Добавить("ДополнительнаяФормаЗагрузки");
		//мИменаОсновныхФорм.Добавить("ДополнительнаяФормаКонстант");
КонецПроцедуры

Процедура СоздатьИменаОсновныхФорм_Объекты()
	Если Не ЗначениеЗаполнено(мИменаОсновныхФорм_Объекты) Тогда
		мИменаОсновныхФорм_Объекты = Новый Массив();
	КонецЕсли;
	мИменаОсновныхФорм_Объекты.Добавить("ОсновнаяФорма");
	мИменаОсновныхФорм_Объекты.Добавить("ОсновнаяФормаОбъекта");
	мИменаОсновныхФорм_Объекты.Добавить("ОсновнаяФормаГруппы");
	мИменаОсновныхФорм_Объекты.Добавить("ОсновнаяФормаЗаписи");
	мИменаОсновныхФорм_Объекты.Добавить("ОсновнаяФормаНастроек");
	мИменаОсновныхФорм_Объекты.Добавить("ОсновнаяФормаСохранения");
	мИменаОсновныхФорм_Объекты.Добавить("ОсновнаяФормаЗагрузки");
	
	мИменаОсновныхФорм_Объекты.Добавить("ДополнительнаяФорма");
	мИменаОсновныхФорм_Объекты.Добавить("ДополнительнаяФормаОбъекта");
	мИменаОсновныхФорм_Объекты.Добавить("ДополнительнаяФормаГруппы");
	мИменаОсновныхФорм_Объекты.Добавить("ДополнительнаяФормаЗаписи");
	мИменаОсновныхФорм_Объекты.Добавить("ДополнительнаяФормаНастроек");
	мИменаОсновныхФорм_Объекты.Добавить("ДополнительнаяФормаСохранения");
	мИменаОсновныхФорм_Объекты.Добавить("ДополнительнаяФормаЗагрузки");
КонецПроцедуры

Процедура СоздатьИменаОсновныхФормСписка()
	Если Не ЗначениеЗаполнено(мИменаОсновныхФорм_Списки) Тогда
		мИменаОсновныхФорм_Списки = Новый Массив();
	КонецЕсли;
	мИменаОсновныхФорм_Списки.Добавить("ОсновнаяФормаСписка");
	мИменаОсновныхФорм_Списки.Добавить("ОсновнаяФормаДляВыбора");
	мИменаОсновныхФорм_Списки.Добавить("ОсновнаяФормаДляВыбораГруппы");
	мИменаОсновныхФорм_Списки.Добавить("ОсновнаяФормаКонстант");
	
	мИменаОсновныхФорм_Списки.Добавить("ДополнительнаяФормаСписка");
	мИменаОсновныхФорм_Списки.Добавить("ДополнительнаяФормаДляВыбора");
	мИменаОсновныхФорм_Списки.Добавить("ДополнительнаяФормаДляВыбораГруппы");
	мИменаОсновныхФорм_Списки.Добавить("ДополнительнаяФормаКонстант");
КонецПроцедуры

Процедура СоздатьФорму_ПолучениеФорм()
	мПолучениеФорм = ПолучитьФорму("ПолучениеФорм");
КонецПроцедуры

Функция ПолучитьМетаФормыОбъектаДляПроверки(МетаОбъект, ИменаОсновныхФорм)
	
	МетаФормы = Новый Массив();
	Для Каждого ИмяОсновнойФормы Из ИменаОсновныхФорм Цикл
		Попытка
			МетаФорма = МетаОбъект[ИмяОсновнойФормы];
		Исключение
			Продолжить;
		КонецПопытки;
		Если МетаФорма = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если МетаФормы.Найти(МетаФорма) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		МетаФормы.Добавить(МетаФорма);
		//Сообщить("МетаФорма.Имя = <"+?(МетаФорма.Имя = Неопределено, "Неопределено", МетаФорма.Имя)+">"); 
	КонецЦикла;
	Возврат МетаФормы;
	
КонецФункции

Функция ПолучитьФормуЛкс(ИмяФормы, Параметры = Неопределено, Владелец = Неопределено, Уникальность = Неопределено, Окно = Неопределено) Экспорт
	
	Возврат мПолучениеФорм.ПолучитьФормуЛкс(ИмяФормы, Параметры, Владелец, Уникальность, Окно);
	
КонецФункции

Функция ПолучитьНовуюФорму(МетаФорма, ВнешнийОбъект = Неопределено, КлючВременнойФормы = Неопределено)

	//Если ВнешнийОбъект <> Неопределено Тогда
	//	Форма = ВнешнийОбъект.ПолучитьФорму(МетаФорма.Имя, , КлючВременнойФормы);
	//Иначе
		Форма = ПолучитьФормуЛкс(МетаФорма, , , КлючВременнойФормы); //ирНеглобальный.
		//Форма = ПолучитьФормуЛкс(МетаФорма.ПолноеИмя(), , , КлючВременнойФормы); //ирНеглобальный.
	//КонецЕсли; 
	Возврат Форма;

КонецФункции

Функция ТестироватьФорму(Форма, ИмяОперации = "") Экспорт
	_Форма = Форма;
	Форма.Открыть(); // К сожалению здесь исключения не ловятся http://partners.v8.1c.ru/forum/thread.jsp?id=1080350#1080350
		юТест.Проверить(_Форма.Открыта(), "_Форма обработки """+ИмяОперации+""" не открылась, а должна была открыться");
		
	Если ТипЗнч(_Форма) = Тип("Форма") Тогда
		_Форма.Обновить();
	ИначеЕсли ТипЗнч(_Форма) = Тип("УправляемаяФорма") Тогда
		_Форма.ОбновитьОтображениеДанных();
	КонецЕсли;
		//Попытка
		//	Форма = Форма.мСвойстваФормы.КонечнаяФорма; // Для системы 2iS
		//Исключение
		//КонецПопытки;
	//Если Форма.Открыта() Тогда
	//		//Попытка
	//		//	ТестироватьЭлементыФормы(Форма);
	//		//Исключение
	//		//	Ошибка = ИмяОперации + ". " + ИнформацияОбОшибке();
	//		//	Если ТранзакцияАктивна() Тогда
	//		//		ОтменитьТранзакцию();
	//		//	КонецЕсли;
	//		//	ВызватьИсключение Ошибка; //ДобавитьСтрокуРезультата(ИмяОперации, ИнформацияОбОшибке());
	//		//	//НачатьТранзакцию();
	//		//КонецПопытки; 
	//	Форма.Модифицированность = Ложь;
	//	Попытка
	//		Форма.Закрыть();
	//	Исключение
	//		Ошибка = ИмяОперации + ". " + ИнформацияОбОшибке();
	//		Если ТранзакцияАктивна() Тогда
	//			ОтменитьТранзакцию();
	//		КонецЕсли;
	//		//ДобавитьСтрокуРезультата(ИмяОперации, ИнформацияОбОшибке());
	//		НачатьТранзакцию();
	//		Форма.УстановитьДействие("ПередЗакрытием", Неопределено);
	//		Форма.УстановитьДействие("ПриЗакрытии", Неопределено);
	//		Форма.Закрыть();
	//		ВызватьИсключение Ошибка; 			
	//	КонецПопытки; 
	//КонецЕсли;

КонецФункции

//} конец блока работы с управляемыми формами - из "Инструменты разработчика"

Процедура ДобавитьТестДляМетаданного(ВсеТесты, менеджерМетаданного, имяТеста, списокИсключений)
	Для Каждого МетаОбъект Из менеджерМетаданного Цикл
		Если списокИсключений.НайтиПоЗначению(МетаОбъект.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ПравоДоступа("Просмотр", МетаОбъект) Тогда
			МетаФормы = ПолучитьМетаФормыОбъектаДляПроверки(МетаОбъект, мИменаОсновныхФорм);

			Для каждого МетаФорма Из МетаФормы Цикл
				лПараметры = Новый Структура("ИмяТеста,Транзакция,Параметр", имяТеста, Истина, МетаФорма.ПолноеИмя());
				ВсеТесты.Добавить(лПараметры);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСписокИсключений_Отчеты()
	Результат = Новый СписокЗначений;
	
	//Результат.Добавить("Цены");
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокИсключений_Обработки()
	Результат = Новый СписокЗначений;
	
	//Результат.Добавить("Цены");
	
	Возврат Результат;
КонецФункции

Процедура ДобавитьТестДляМетаданного_Справочник(ВсеТесты, менеджерМетаданного, имяТеста, списокИсключений)
	Для Каждого МетаОбъект Из менеджерМетаданного Цикл
		Если списокИсключений.НайтиПоЗначению(МетаОбъект.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		//Если ПравоДоступа("Просмотр", МетаОбъект) Тогда 
		//	МетаФормы = ПолучитьМетаФормыОбъектаДляПроверки(МетаОбъект, мИменаОсновныхФорм_Списки);
		//	Для каждого МетаФорма Из МетаФормы Цикл
		//		Структура = Новый Структура("МетаИмя,МетаФорма_ПолноеИмя", МетаОбъект.Имя, МетаФорма.ПолноеИмя());
		//		лПараметры = Новый Структура("ИмяТеста,Транзакция,Параметр", имяТеста, Истина, Структура);
		//		//лПараметры = Новый Структура("ИмяТеста,Транзакция,Параметр", имяТеста, Истина, МетаОбъект.Имя);
		//		ВсеТесты.Добавить(лПараметры);
		//	КонецЦикла;
		//КонецЕсли;
		
		Если (ПравоДоступа("Просмотр", МетаОбъект) или ПравоДоступа("ИнтерактивноеДобавление", МетаОбъект)) 
			и ПравоДоступа("Добавление", МетаОбъект) 
			//И МетаОбъект.ОсновнаяФормаОбъекта <> Неопределено 
			Тогда
				МетаФормы = ПолучитьМетаФормыОбъектаДляПроверки(МетаОбъект, мИменаОсновныхФорм_Объекты);
				Для каждого МетаФорма Из МетаФормы Цикл
					Структура = Новый Структура("МетаИмя,МетаФорма_ПолноеИмя", МетаОбъект.Имя, МетаФорма.ПолноеИмя());
					лПараметры = Новый Структура("ИмяТеста,Транзакция,Параметр", имяТеста, Истина, Структура);
					//лПараметры = Новый Структура("ИмяТеста,Транзакция,Параметр", имяТеста, Истина, МетаОбъект.Имя);
					ВсеТесты.Добавить(лПараметры);
				КонецЦикла;
				//Структура = Новый Структура("МетаИмя,МетаФорма_ПолноеИмя", МетаОбъект.Имя, МетаФорма.ПолноеИмя());
				//лПараметры = Новый Структура("ИмяТеста,Транзакция,Параметр", имяТеста, Истина, МетаОбъект.Имя);
				////лПараметры = Новый Структура("ИмяТеста,Транзакция,Параметр", имяТеста, Истина, МетаОбъект.Имя);
				//ВсеТесты.Добавить(лПараметры);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура Тест_ОткрытьФормуСуществующегоЭлементаСправочника(_ИДСправочника) Экспорт
	Сообщить("_ИДСправочника = <"+?(_ИДСправочника = Неопределено, "Неопределено", _ИДСправочника)+">"); 
	_элем = Справочники[_ИДСправочника].СоздатьЭлемент();
	_элем.УстановитьНовыйКод();
	_элем.ОбменДанными.Загрузка = Истина;
	_элем.Записать();
	_Форма = _элем.ПолучитьФорму();
	
	_Форма.Открыть();
		юТест.Проверить(_Форма.Открыта(), "_Форма существующего элемента справочника """+_ИДСправочника+""" не открылась, а должна была открыться");
	_Форма.Обновить();
КонецПроцедуры

Процедура Тест_ОткрытьФормуНовогоЭлементаСправочника(_ИДСправочника) Экспорт
	Сообщить("_ИДСправочника = <"+?(_ИДСправочника = Неопределено, "Неопределено", _ИДСправочника)+">"); 
	_элем = Справочники[_ИДСправочника].СоздатьЭлемент();
	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", _элем.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	_Форма = _элем.ПолучитьФорму();
	_Форма.Открыть();
		юТест.Проверить(_Форма.Открыта(), "_Форма нового элемента справочника """+_ИДСправочника+""" не открылась, а должна была открыться");
	_Форма.Обновить();
КонецПроцедуры

Функция ПолучитьСписокИсключений_Справочники_Существующие()
	Результат = Новый СписокЗначений;
	
	Результат.Добавить("ирАлгоритмы");
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокИсключений_Справочники_Новые()
	Результат = Новый СписокЗначений;
	
	Результат.Добавить("ирАлгоритмы");
	
	Возврат Результат;
КонецФункции
