Перем	юТест;
Перем	_ГуидНовогоСправочника;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("Тест_ДолженСоздатьПростойСправочник");
	ВсеТесты.Добавить("Тест_ДолженСоздатьДваПростыхСправочника");
	ВсеТесты.Добавить("Тест_ДолженСоздатьСвязанныеСправочники");
	ВсеТесты.Добавить("Тест_ДолженСоздатьГруппуСправочникаИДочернийЭлемент");
	ВсеТесты.Добавить("Тест_ДолженСоздатьОбъектСДвумяСтрокамиВТабличнойЧасти");
	ВсеТесты.Добавить("Тест_ДолженСоздатьОбъектСЗаполненымРеквизитомТипаПеречисление");
	ВсеТесты.Добавить("Тест_ДолженСоздатьОбъектСЗаполненнымРеквизитомИзПредопределенныхЗначенийСправочника");
	ВсеТесты.Добавить("Тест_ДолженСоздатьДокументСДвумяСтрокамиВТабличнойЧасти");
	ВсеТесты.Добавить("Тест_ДолженСоздатьДвеЗаписиВРегистреСведений");
	ВсеТесты.Добавить("Тест_ДолженСоздатьПользователяИБ_ВКоде");
	ВсеТесты.Добавить("Тест_ДолженСоздатьПользователяИБ_ПоМакету");
	ВсеТесты.Добавить("Тест_ДолженСоздатьЭлементИЗаполнитьРеквизитНайденныйПоКоду");
	ВсеТесты.Добавить("Тест_ДолженСоздатьЭлементИЗаполнитьРеквизитНайденныйПоНаименованию");
	ВсеТесты.Добавить("Тест_ДолженСоздатьЭлементИЗаполнитьРеквизитПоискомПоГУИДу");
	ВсеТесты.Добавить("Тест_ДолженСоздатьПростойСправочникПоискомПоГуидуСсылки");
	ВсеТесты.Добавить("Тест_ДолженНайтиИПерезаполнитьПростойСправочникПоискомПоГуидуСсылки");
	ВсеТесты.Добавить("Тест_ДолженУдалитьСозданныеДанные_ПростойСправочник");
	ВсеТесты.Добавить("Тест_ДолженУдалитьСозданныеДанные_ДваПростыхСправочника");
	ВсеТесты.Добавить("Тест_ДолженПолучитьИсключениеНеверныйРежимПоиска");
	ВсеТесты.Добавить("Тест_ДолженПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуКоду");
	ВсеТесты.Добавить("Тест_ДолженПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуНаименованию");

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();
	
	_ГуидНовогоСправочника = "a72ec81b-d17d-4d2f-9a47-2ffb2e3234c4";
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

Процедура Тест_ДолженСоздатьПростойСправочник() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочника");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные, "Структура");
	юТест.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	юТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	юТест.ПроверитьРавенство("Тестовое наименование", ТестовыеДанные.ПростойСправочник.Наименование);
	юТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	юТест.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево);
КонецПроцедуры

Процедура Тест_ДолженСоздатьДваПростыхСправочника() Экспорт
	Макет = ПолучитьМакет("СозданиеДвухПростыхСправочников");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные, "Структура");
	юТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	юТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	юТест.ПроверитьРавенство("Тестовая группа товаров", ТестовыеДанные.ПростойСправочник.Наименование);
	юТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	юТест.ПроверитьРавенство(Ложь, ТестовыеДанные.ПростойСправочник.РеквизитБулево);
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник2"), "Ожидали, что есть переменная 'ПростойСправочник2'");
	юТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник2, "СправочникСсылка.ПростойСправочник2");
	юТест.ПроверитьРавенство("Тест", ТестовыеДанные.ПростойСправочник2.Наименование);
КонецПроцедуры

Процедура Тест_ДолженСоздатьСвязанныеСправочники() Экспорт
	Макет = ПолучитьМакет("СозданиеСвязанныхСправочников");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные, "Структура");
	юТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура Тест_ДолженСоздатьГруппуСправочникаИДочернийЭлемент() Экспорт
	Макет = ПолучитьМакет("СозданиеГруппыСправочникаИДочернегоЭлемента");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные, "Структура");
	юТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("Группа"), "Ожидали, что есть переменная 'Группа'");
	юТест.ПроверитьИстину(ТестовыеДанные.Группа.ЭтоГруппа, "Ожидали, что созданный элемент является группой");
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("Элемент"), "Ожидали, что есть переменная 'Элемент'");
	юТест.ПроверитьРавенство(ТестовыеДанные.Группа, ТестовыеДанные.Элемент.Родитель);
КонецПроцедуры

Процедура Тест_ДолженСоздатьОбъектСДвумяСтрокамиВТабличнойЧасти() Экспорт
	Макет = ПолучитьМакет("СозданиеОбъектаСДвумяСтрокамиВТабличнойЧасти");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные, "Структура");
	юТест.ПроверитьРавенство(4, ТестовыеДанные.Количество());
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("СправочникСТабЧастью"), "Ожидали, что есть переменная 'СправочникСТабЧастью'");
	юТест.ПроверитьРавенство(2, ТестовыеДанные.СправочникСТабЧастью.Состав.Количество());
	
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.СправочникСТабЧастью.Состав[0].ПростойСправочник);
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник2_1, ТестовыеДанные.СправочникСТабЧастью.Состав[0].ПростойСправочник2);
	юТест.ПроверитьИстину(ТестовыеДанные.СправочникСТабЧастью.Состав[0].РеквизитБулево);
	
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.СправочникСТабЧастью.Состав[1].ПростойСправочник);
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник2_2, ТестовыеДанные.СправочникСТабЧастью.Состав[1].ПростойСправочник2);
	юТест.ПроверитьЛожь(ТестовыеДанные.СправочникСТабЧастью.Состав[1].РеквизитБулево);
КонецПроцедуры

Процедура Тест_ДолженСоздатьОбъектСЗаполненымРеквизитомТипаПеречисление() Экспорт
	Макет = ПолучитьМакет("СозданиеОбъектаСЗаполненымРеквизитомТипаПеречисление");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные, "Структура");
	юТест.ПроверитьРавенство(1, ТестовыеДанные.Количество());
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	юТест.ПроверитьРавенство(Перечисления.Перечисление1.ЗначениеПеречисления1, ТестовыеДанные.ПростойСправочник.РеквизитПеречисление);
КонецПроцедуры

Процедура Тест_ДолженСоздатьОбъектСЗаполненнымРеквизитомИзПредопределенныхЗначенийСправочника() Экспорт
	Макет = ПолучитьМакет("СозданиеОбъектаСЗаполненнымРеквизитомИзПредопределенныхЗначенийСправочника");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные, "Структура");
	юТест.ПроверитьРавенство(1, ТестовыеДанные.Количество());
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("Элемент"), "Ожидали, что есть переменная 'Элемент'");
	юТест.ПроверитьРавенство(Справочники.ПростойСправочник.ПредопределенноеЗначение1, ТестовыеДанные.Элемент.ПростойСправочник);
КонецПроцедуры

Процедура Тест_ДолженСоздатьДокументСДвумяСтрокамиВТабличнойЧасти() Экспорт
	Макет = ПолучитьМакет("СозданиеДокументаСДвумяСтрокамиВТабличнойЧасти");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные, "Структура");
	юТест.ПроверитьРавенство(4, ТестовыеДанные.Количество());
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("Документ"), "Ожидали, что есть переменная 'Документ'");
	юТест.ПроверитьТип(ТестовыеДанные.Документ, "ДокументСсылка.Документ1");
	юТест.ПроверитьРавенство(Дата("20130801"), ТестовыеДанные.Документ.Дата);
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.Документ.ПростойСправочник);
	юТест.ПроверитьРавенство(2, ТестовыеДанные.Документ.Состав.Количество());
	
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, ТестовыеДанные.Документ.Состав[0].ПростойСправочник2);
	юТест.ПроверитьРавенство(150, ТестовыеДанные.Документ.Состав[0].РеквизитЧисло);
	юТест.ПроверитьЛожь(ТестовыеДанные.Документ.Состав[0].РеквизитБулево);
	
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, ТестовыеДанные.Документ.Состав[1].ПростойСправочник2);
	юТест.ПроверитьРавенство(0, ТестовыеДанные.Документ.Состав[1].РеквизитЧисло);
	юТест.ПроверитьИстину(ТестовыеДанные.Документ.Состав[1].РеквизитБулево);
КонецПроцедуры

Процедура Тест_ДолженСоздатьДвеЗаписиВРегистреСведений() Экспорт
	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреСведений");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные, "Структура");
	юТест.ПроверитьРавенство(5, ТестовыеДанные.Количество());
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("ЗаписьРегистра1"), "Ожидали, что есть переменная 'ЗаписьРегистра1'");
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ЗаписьРегистра1.ПростойСправочник);
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, ТестовыеДанные.ЗаписьРегистра1.ПростойСправочник2);
	юТест.ПроверитьРавенство(300, ТестовыеДанные.ЗаписьРегистра1.РесурсЧисло);
	юТест.ПроверитьЛожь(ТестовыеДанные.ЗаписьРегистра1.РесурсБулево);
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("ЗаписьРегистра2"), "Ожидали, что есть переменная 'ЗаписьРегистра2'");
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ЗаписьРегистра2.ПростойСправочник);
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, ТестовыеДанные.ЗаписьРегистра2.ПростойСправочник2);
	юТест.ПроверитьРавенство(400, ТестовыеДанные.ЗаписьРегистра2.РесурсЧисло);
	юТест.ПроверитьИстину(ТестовыеДанные.ЗаписьРегистра2.РесурсБулево);
КонецПроцедуры

Процедура Тест_ДолженСоздатьПользователяИБ_ВКоде() Экспорт
	лИмяПользователя = "ТестИмя";
	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Если лПользователь <> Неопределено Тогда
		лПользователь.Удалить();
	КонецЕсли;
	
	массивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	количествоДо = массивПользователей.Количество();
	
	параметрыПользователя = Новый Структура;
	параметрыПользователя.Вставить("Имя", лИмяПользователя);
	параметрыПользователя.Вставить("ПолноеИмя", лИмяПользователя);
	параметрыПользователя.Вставить("АутентификацияСтандартная", Истина);
	параметрыПользователя.Вставить("ОсновнойИнтерфейс", ""); //Метаданные.Интерфейсы.Администратор);
	//параметрыПользователя.Вставить("Пароль", "пароль");
	параметрыПользователя.Вставить("ПоказыватьВСпискеВыбора", Истина);
	//параметрыПользователя.Вставить("Язык", Метаданные.Языки.Русский);
	массивРолей = Новый Массив;
	массивРолей.Добавить(Метаданные.Роли.Роль1);
	параметрыПользователя.Вставить("Роли", массивРолей);
	
	лПользователь = юТест.СоздатьПользователяИБ(параметрыПользователя);
		юТест.ПроверитьТип(лПользователь, "ПользовательИнформационнойБазы", "лПользователь");
		юТест.ПроверитьИстину(лПользователь.Роли.Содержит(Метаданные.Роли.Роль1), "лПользователь.РолиПользователя.Содержить");
		
	массивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	количествоПосле = массивПользователей.Количество();
		юТест.ПроверитьРавенство(количествоДо + 1, количествоПосле, "количествоДо + 1, количествоПосле");
		
	//лПользователь.Удалить();
КонецПроцедуры

Процедура Тест_ДолженСоздатьПользователяИБ_ПоМакету() Экспорт
	лИмяПользователя = "ТестИмя";
	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Если лПользователь <> Неопределено Тогда
		лПользователь.Удалить();
	КонецЕсли;
	
	массивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	количествоДо = массивПользователей.Количество();	
	
	Макет = ПолучитьМакет("СозданиеОдногоПользователяИБ");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные, "Структура");
	юТест.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("Пользователь1"), "Ожидали, что есть переменная 'Пользователь1'");
	юТест.ПроверитьТип(ТестовыеДанные.Пользователь1, "ПользовательИнформационнойБазы");
	юТест.ПроверитьРавенство(лИмяПользователя, ТестовыеДанные.Пользователь1.Имя);
	юТест.ПроверитьИстину(ТестовыеДанные.Пользователь1.Роли.Содержит(Метаданные.Роли.Роль1), "лПользователь.РолиПользователя.Содержит");
	юТест.ПроверитьИстину(ТестовыеДанные.Пользователь1.Роли.Содержит(Метаданные.Роли.ПолныеПрава), "лПользователь.ПолныеПрава.Содержит");
		
	массивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	количествоПосле = массивПользователей.Количество();
		юТест.ПроверитьРавенство(количествоДо + 1, количествоПосле, "количествоДо + 1, количествоПосле");
		
	лПользователь = ТестовыеДанные.Пользователь1;
	//лПользователь.Удалить();
КонецПроцедуры

Процедура Тест_ДолженСоздатьЭлементИЗаполнитьРеквизитНайденныйПоКоду() Экспорт
	Макет = ПолучитьМакет("СозданиеЭлементаИЗаполнениеРеквизитаПоискомПоКоду");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные, "Структура");
	юТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура Тест_ДолженСоздатьЭлементИЗаполнитьРеквизитНайденныйПоНаименованию() Экспорт
	Макет = ПолучитьМакет("СозданиеЭлементаИЗаполнениеРеквизитаПоискомПоНаименованию");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные, "Структура");
	юТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура Тест_ДолженСоздатьЭлементИЗаполнитьРеквизитПоискомПоГУИДу() Экспорт
	Макет = ПолучитьМакет("СозданиеЭлементаИЗаполнениеРеквизитаПоискомПоГУИДу");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные, "Структура");
	юТест.ПроверитьРавенство(1, ТестовыеДанные.Количество());
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	юТест.ПроверитьРавенство(Справочники.ПростойСправочник.ПредопределенноеЗначение1, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура Тест_ДолженСоздатьПростойСправочникПоискомПоГуидуСсылки() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочникаПоГуидСсылки");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные, "Структура");
	юТест.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	юТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	юТест.ПроверитьРавенство(Новый УникальныйИдентификатор(_ГуидНовогоСправочника), ТестовыеДанные.ПростойСправочник.УникальныйИдентификатор());
	юТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	юТест.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево, "ТестовыеДанные.ПростойСправочник.РеквизитБулево");
	
	юТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитПеречисление, "ПеречислениеСсылка.Перечисление1");
	юТест.ПроверитьРавенство(Перечисления.Перечисление1.ЗначениеПеречисления1, ТестовыеДанные.ПростойСправочник.РеквизитПеречисление, "ТестовыеДанные.ПростойСправочник.РеквизитПеречисление");
КонецПроцедуры

Процедура Тест_ДолженНайтиИПерезаполнитьПростойСправочникПоискомПоГуидуСсылки() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочникаПоГуидСсылки");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	юТест.ПроверитьРавенство(Справочники.ПростойСправочник.ПолучитьСсылку(Новый УникальныйИдентификатор(_ГуидНовогоСправочника)), ТестовыеДанные.ПростойСправочник, "Справочники.ПростойСправочник.ПолучитьСсылку(Новый УникальныйИдентификатор(_ГуидНовогоСправочника)), ТестовыеДанные.ПростойСправочник)");
		//лОбъект = ТестовыеДанные.ПростойСправочник.ПолучитьОбъект();
		//лОбъект.РеквизитБулево = Ложь;
		//лОбъект.Записать();
		//юТест.ПроверитьРавенство(Ложь, ТестовыеДанные.ПростойСправочник.РеквизитБулево);
	
	Макет = ПолучитьМакет("НайтиИПерезаполнитьПростойСправочникПоГуидСсылки");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);

	юТест.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	юТест.ПроверитьРавенство(Новый УникальныйИдентификатор(_ГуидНовогоСправочника), ТестовыеДанные.ПростойСправочник.УникальныйИдентификатор());
	юТест.ПроверитьРавенство(Ложь, ТестовыеДанные.ПростойСправочник.РеквизитБулево, "ТестовыеДанные.ПростойСправочник.РеквизитБулево");
	юТест.ПроверитьРавенство(Перечисления.Перечисление1.ЗначениеПеречисления2, ТестовыеДанные.ПростойСправочник.РеквизитПеречисление, "ТестовыеДанные.ПростойСправочник.РеквизитПеречисление");
КонецПроцедуры

Процедура Тест_ДолженУдалитьСозданныеДанные_ПростойСправочник() Экспорт
	количествоДо = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник");
	
	Макет = ПолучитьМакет("СозданиеПростогоСправочника");

	количествоСозданныхОбъектов = 0;
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет, количествоСозданныхОбъектов);
		юТест.ПроверитьРавенство(количествоСозданныхОбъектов, 1, "количествоСозданныхОбъектов");
	
	количествоУдаленныхОбъектов = юТест.УдалитьСозданныеДанные(тестовыеДанные);
	
	количествоПосле = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник");
		юТест.ПроверитьРавенство(количествоПосле, количествоДо, "количествоПосле, количествоДо");
		
		юТест.ПроверитьРавенство(количествоУдаленныхОбъектов, количествоСозданныхОбъектов, "количествоУдаленныхОбъектов, количествоСозданныхОбъектов");
КонецПроцедуры

Процедура Тест_ДолженУдалитьСозданныеДанные_ДваПростыхСправочника() Экспорт
	количествоДо = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник") + юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник2");
	
	Макет = ПолучитьМакет("СозданиеДвухПростыхСправочников");
	
	количествоСозданныхОбъектов = 0;
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет, количествоСозданныхОбъектов);
		юТест.ПроверитьРавенство(количествоСозданныхОбъектов, 2, "количествоСозданныхОбъектов");
	
	количествоУдаленныхОбъектов = юТест.УдалитьСозданныеДанные(тестовыеДанные);
	
	количествоПосле = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник") + юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник2");
		юТест.ПроверитьРавенство(количествоПосле, количествоДо, "количествоПосле, количествоДо");
		
		юТест.ПроверитьРавенство(количествоУдаленныхОбъектов, количествоСозданныхОбъектов, "количествоУдаленныхОбъектов, количествоСозданныхОбъектов");
КонецПроцедуры
 
// {Пессимистические тесты
Процедура Тест_ДолженПолучитьИсключениеНеверныйРежимПоиска() Экспорт
	Макет = ПолучитьМакет("Тест_ДолженПолучитьИсключениеНеверныйРежимПоиска");
	ТекстИсключения = "";
	ОжидаемоеИсключение = "НеверныйРежимПоиска";
	Попытка
		ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	Исключение
		ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;
	
	юТест.ПроверитьВхождение(ТекстИсключения, ОжидаемоеИсключение, "Ожидали исключение <" + ОжидаемоеИсключение + ">");
КонецПроцедуры

Процедура Тест_ДолженПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуКоду() Экспорт
	Макет = ПолучитьМакет("Тест_ДолженПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуКоду");
	ТекстИсключения = "";
	ОжидаемоеИсключение = "ЗначениеНеНайдено";
	Попытка
		ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	Исключение
		ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;
	
	юТест.ПроверитьВхождение(ТекстИсключения, ОжидаемоеИсключение, "Ожидали исключение <" + ОжидаемоеИсключение + ">");
КонецПроцедуры

Процедура Тест_ДолженПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуНаименованию() Экспорт
	Макет = ПолучитьМакет("Тест_ДолженПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуНаименованию");
	ТекстИсключения = "";
	ОжидаемоеИсключение = "ЗначениеНеНайдено";
	Попытка
		ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	Исключение
		ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;
	
	юТест.ПроверитьВхождение(ТекстИсключения, ОжидаемоеИсключение, "Ожидали исключение <" + ОжидаемоеИсключение + ">");
КонецПроцедуры

// }