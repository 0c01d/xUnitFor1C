//Перем	ЗапускательТестов;
//Перем	АвтоОбъектПриложения1С;
Перем	Коллекция_ДанныхАвтоОбъектовПриложения1С;
Перем	ТекущийПользователь;
Перем	УпавшиеТесты;

Перем	ТестовыеДанные;

Перем ЮТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	//ПутьЗапускателяТестов = ПутьЗапускателяТестов();
	////ПутьТестов = "C:\Projects\GitHub\xUnitFor1C\Тесты\Тест_ПараметрыТестов.epf";
	//ПутьТестов = "C:\Projects\GitHub\xUnitFor1C\Тесты\тесты_ОткрытиеФормКонфигурации.epf";

	//лИмяПользователя = ИмяПользователяПоУмолчанию();
	//УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя);
	//
	//Макет = ПолучитьМакет("СозданиеОдногоПользователяИБ");
	//ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	//Для каждого КлючЗначение Из ТестовыеДанные Цикл
	//	Пользователь = КлючЗначение.Значение;
	//	ПараметрыЗапускаТестовВНовомСеансе = Новый Структура();
	//	ПараметрыЗапускаТестовВНовомСеансе.Вставить("Пользователь", Пользователь);
	//	ПараметрыЗапускаТестовВНовомСеансе.Вставить("ПутьЗапускателяТестов", ПутьЗапускателяТестов);
	//	ПараметрыЗапускаТестовВНовомСеансе.Вставить("ПутьТестов", ПутьТестов);
	//	
	//	ПараметрыТеста = Новый Структура("ПредставлениеТеста,ИмяТеста,Параметр", 
	//		"Тест пользователя "+лИмяПользователя,
	//		"ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application_2",
	//		ПараметрыЗапускаТестовВНовомСеансе);
	//	ВсеТесты.Добавить(ПараметрыТеста);
	//КонецЦикла;
	//УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя);

	ВсеТесты.Добавить("ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application");
	ВсеТесты.Добавить("ТестДолжен_ЗапуститьТестыОткрытияФормКонфигурации_ВОтдельномСеансеПользователя");

	Возврат ВсеТесты;	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	УпавшиеТесты = Новый Массив;
	Коллекция_ДанныхАвтоОбъектовПриложения1С = Новый Массив;
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	ЮТест.УдалитьСозданныеДанные(ТестовыеДанные);
	Для каждого ДанныеАвтоОбъектаПриложения1С Из Коллекция_ДанныхАвтоОбъектовПриложения1С Цикл
		
		ЗавершитьСеансПользователя(ДанныеАвтоОбъектаПриложения1С.АвтоОбъектПриложения1С, ДанныеАвтоОбъектаПриложения1С.ЗапускательТестов);
	КонецЦикла;
	Коллекция_ДанныхАвтоОбъектовПриложения1С.Очистить();

	Коллекция_ДанныхАвтоОбъектовПриложения1С = Неопределено;
	ТекущийПользователь = Неопределено;
	УпавшиеТесты = Неопределено;
	ТестовыеДанные = Неопределено;
КонецПроцедуры

Процедура ЗавершитьСеансПользователя(АвтоОбъектПриложения1С, ЗапускательТестов)
	УпавшиеТесты = Неопределено;
	Если АвтоОбъектПриложения1С <> Неопределено Тогда
		ЗапускательТестов.SetHandlerObject(Неопределено);
		
		ЗапускательТестов = Неопределено;
		АвтоОбъектПриложения1С.ЗавершитьРаботуСистемы(Ложь);
		АвтоОбъектПриложения1С = Неопределено;
	КонецЕсли;
КонецПроцедуры


Процедура ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application() Экспорт
	лИмяПользователя = ИмяПользователяПоУмолчанию();
	УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя);
	
	Макет = ПолучитьМакет("СозданиеОдногоПользователяИБ");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные.Пользователь1, "ПользовательИнформационнойБазы");
	
	ТекущийПользователь = ТестовыеДанные.Пользователь1;
	
	ПутьТестов = ПутьЗапускателяТестов()+"Тесты\Тест_ПараметрыТестов.epf";
	//ПутьТестов = ПутьЗапускателяТестов()+"Тесты\ТестПримерСломаногоТеста.epf";

	УпавшиеТесты = ВыполнитьТестыДляПользователяВОтдельномСеансе(ТекущийПользователь, ПутьТестов);
	
	ДанныеТестовПоПользователям = Новый Соответствие;
	ДанныеТестовПоПользователям.Вставить(ТекущийПользователь, УпавшиеТесты);
	
	ПроверитьПрохождениеТестов(ДанныеТестовПоПользователям);
КонецПроцедуры

Процедура ТестДолжен_ЗапуститьТестыОткрытияФормКонфигурации_ВОтдельномСеансеПользователя() Экспорт
	МассивИменПользователей = МассивИменПользователейПоУмолчанию();
	Для каждого ИмяПользователя Из МассивИменПользователей Цикл
		УдалитьПользователяИБ_ЕслиОнСуществует(ИмяПользователя);
	КонецЦикла;
	
	Макет = ПолучитьМакет("СозданиеНесколькихПользователейИБ");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ПутьТестов = ПутьЗапускателяТестов()+"Тесты\тесты_ОткрытиеФормКонфигурации.epf";
	
	ДанныеТестовПоПользователям = Новый Соответствие;
	Для каждого КлючЗначение Из ТестовыеДанные Цикл
		ТекущийПользователь = КлючЗначение.Значение;
		Если ТипЗнч(ТекущийПользователь) <> Тип("ПользовательИнформационнойБазы") Тогда
			Продолжить;
		КонецЕсли;
		
		УпавшиеТесты = ВыполнитьТестыДляПользователяВОтдельномСеансе(ТекущийПользователь, ПутьТестов);
		
		Если УпавшиеТесты.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ДанныеТестовПоПользователям.Вставить(ТекущийПользователь, УпавшиеТесты);
	КонецЦикла;
	
	ПроверитьПрохождениеТестов(ДанныеТестовПоПользователям);
КонецПроцедуры

Функция ВыполнитьТестыДляПользователяВОтдельномСеансе(ТекущийПользователь, ПутьТестов, ТолстыйКлиент = Истина)
	Если Не ТолстыйКлиент Тогда
		ВызватьИсключение "В режиме Automation тонкого клиента нельзя использовать ВнешниеОбработки. Код AutomationObj.ExternalDataProcessors.Create(ПутьФайла) выдает исключение.";
	КонецЕсли;
	
	УпавшиеТесты = Новый Массив();
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
		
	СтрокаСоединения = СтрокаСоединения + "Usr=""" + ТекущийПользователь.Имя + """;";
		//СтрокаСоединения = СтрокаСоединения + 'Pwd="' + profileRoot.getValue("CmdLine/UserPassword") + '";';
		
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	ИдАвтоОбъектаПриложения1С = "";
	Если Лев(ВерсияПриложения, 3) = "8.2" Тогда
		ИдАвтоОбъектаПриложения1С = "V82";
	ИначеЕсли Лев(ВерсияПриложения, 3) = "8.3" Тогда
		ИдАвтоОбъектаПриложения1С = "V83";
	ИначеЕсли Лев(ВерсияПриложения, 3) = "8.4" Тогда
		ИдАвтоОбъектаПриложения1С = "V84";
	Иначе
		ВызватьИсключение "Версию приложению <"+ВерсияПриложения+"> обрабатывать не умеем";
	КонецЕсли;

	Если Не ТолстыйКлиент Тогда
		ИдАвтоОбъектаПриложения1С = ИдАвтоОбъектаПриложения1С + "C";
	КонецЕсли;
	
	ИдАвтоОбъектаПриложения1С = ИдАвтоОбъектаПриложения1С + ".Application";
	
	АвтоОбъектПриложения1С = new COMObject(ИдАвтоОбъектаПриложения1С);
	
	Успешно = АвтоОбъектПриложения1С.connect(СтрокаСоединения);
		ЮТест.Проверить(Успешно, "АвтоОбъектПриложения1С.connect(СтрокаСоединения)");
	АвтоОбъектПриложения1С.Visible = true;
	
	ЗапускательТестов = АвтоОбъектПриложения1С.ExternalDataProcessors.Create(ЮТест.ИспользуемоеИмяФайла, Ложь);
	
	ДанныеАвтоОбъектовПриложения1С = Новый Структура("АвтоОбъектПриложения1С,ЗапускательТестов", АвтоОбъектПриложения1С, ЗапускательТестов);
	Коллекция_ДанныхАвтоОбъектовПриложения1С.Добавить(ДанныеАвтоОбъектовПриложения1С);
	
	ЗапускательТестов.ЗапретИспользованияИнформатора = Истина;
	ЗапускательТестов.OpenBrowserForm();
	
	ЗапускательТестов.SetHandlerObject(ЭтотОбъект);
	
	ЗапускательТестов.LoadAllTests(ПутьТестов);
	ЗапускательТестов.RunAllTests();
	
	Возврат УпавшиеТесты;
КонецФункции

Процедура ПроверитьПрохождениеТестов(ДанныеТестовПоПользователям)
	ОбщаяСтрокаОписанияУпавшихТестов = ""+Символы.ПС;
	ОбщееКоличествоУпавшихТестов = 0;
	Для каждого КлючЗначение Из ДанныеТестовПоПользователям Цикл
		ТекущийПользователь = КлючЗначение.Ключ;
		//Сообщить(ТекущийПользователь);
		
		УпавшиеТесты = КлючЗначение.Значение;
			ЮТест.ПроверитьТип(УпавшиеТесты, "Массив", "Пользователь <"+ТекущийПользователь.Имя + ": УпавшиеТесты");
		
		ОбщееКоличествоУпавшихТестов = ОбщееКоличествоУпавшихТестов + УпавшиеТесты.Количество();
		СтрокаОписанияУпавшихТестов = ""+Символы.ПС;
		Для каждого СтрокаДереваТестов Из УпавшиеТесты Цикл
			СтрокаОписанияУпавшихТестов = СтрокаОписанияУпавшихТестов + " "+
				//"<"+ТекущийПользователь.Имя + "> : " + СтрокаДереваТестов.Имя +", путь <"+
				": <" + СтрокаДереваТестов.Имя +">, путь <"+
				СтрокаДереваТестов.ПолныйПуть+">" +Символы.ПС;
		КонецЦикла;
		ОбщаяСтрокаОписанияУпавшихТестов = ОбщаяСтрокаОписанияУпавшихТестов + "У пользователя <"+ТекущийПользователь.Имя + "> упали тесты < "+УпавшиеТесты.Количество()+" шт.>:"+
			СтрокаОписанияУпавшихТестов;
	КонецЦикла;
	Если ОбщееКоличествоУпавшихТестов > 0 Тогда
		ВызватьИсключение Символы.ПС+"При тестировании разных сеансов пользователей упали тесты <"+ОбщееКоличествоУпавшихТестов+" шт.>:"+Символы.ПС+
			ОбщаяСтрокаОписанияУпавшихТестов;
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя)

	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Если лПользователь <> Неопределено Тогда
		лПользователь.Удалить();
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиСообщение(Сообщение) Экспорт
	Префикс	= "";
	Если ТекущийПользователь <> Неопределено Тогда
		Префикс = "Сообщение от сеанса <"+ТекущийПользователь.Имя + "> : ";
	КонецЕсли;
	Сообщить(Префикс + Сообщение);
КонецПроцедуры

Процедура TestLoaded(Параметр) Экспорт
	Если ТекущийПользователь <> Неопределено Тогда
		Параметр.Имя = "<"+ТекущийПользователь.Имя + "> : " + Параметр.Имя; // +", путь <"+Параметр.ПолныйПуть+">";
	КонецЕсли;
	//Сообщить("TestLoaded " +Параметр.Имя);
КонецПроцедуры

Процедура TestFailed(Параметр) Экспорт
	//Сообщить("TestFailed " +Параметр.Имя);
	УпавшиеТесты.Добавить(Параметр);
КонецПроцедуры

//Процедура TestPassed(Параметр) Экспорт
//	//Сообщить("TestPassed " +Параметр.Имя);
//КонецПроцедуры

//Процедура TestNotImplemented(Параметр) Экспорт
//	//Сообщить("TestNotImplemented " +Параметр.Имя);
//КонецПроцедуры

//Процедура ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application_2(ПараметрыТеста) Экспорт
//	ВызватьИсключение "Тест размножения тестов из тестового набора пока не реализован";
//КонецПроцедуры

Функция ИмяПользователяПоУмолчанию()
	Возврат "ТестИмя"; // должно совпадать с макетом;
КонецФункции

Функция МассивИменПользователейПоУмолчанию()
	Рез = Новый Массив();
	Рез.Добавить(ИмяПользователяПоУмолчанию());
	Рез.Добавить("ТестИмя2");// должно совпадать с макетом;
	Возврат Рез;
КонецФункции

Функция ПутьЗапускателяТестов()
	ПутьЗапускателяТестов = СтрЗаменить(ЮТест.ИспользуемоеИмяФайла, "UnitTestRunner.epf", "");
	Возврат ПутьЗапускателяТестов;
КонецФункции
