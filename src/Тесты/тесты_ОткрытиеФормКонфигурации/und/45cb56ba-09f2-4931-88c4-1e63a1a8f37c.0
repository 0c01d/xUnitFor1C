{2,
{28,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0},
{0},1,
{17,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{0,0,1},0,1},0,"","",1,
{17,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,0,1}
},"&НаКлиенте
Перем ЮТест;  // для тестирования

&НаКлиенте
Перем ТестируемаяФорма;

//{ основная процедура для юнит-тестирования 1CUnit
&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	СоздатьИменаОсновныхФорм();
	
	ТолькоУправляемыеФормы = Ложь;
	#Если ТонкийКлиент или ВебКлиент Тогда
		ТолькоУправляемыеФормы = Истина;
	#КонецЕсли
	
	Объект.ВыводитьСообщенияВЖурналРегистрации = Истина;
	
	имяТеста = ""Тест_ОткрытьФормуСуществующегоЭлементаСправочника"";
	ПрефиксПредставленияТеста = ""Существующие"";

	CписокИменМетаФорм = СписокИменМетаФормОбъектовСервер(""Метаданные.Справочники"", ТолькоУправляемыеФормы, ИменаОсновныхФорм_Объекты_Сервер()); //Объект.мИменаОсновныхФорм_Объекты);
	ДобавитьТестМетаФормыОбъекты(ВсеТесты, CписокИменМетаФорм, имяТеста, ПрефиксПредставленияТеста);
		
	имяТеста = ""Тест_ОткрытьФормуСуществующегоЭлементаДокумента"";
	ПрефиксПредставленияТеста = ""Существующие"";

	CписокИменМетаФорм = СписокИменМетаФормОбъектовСервер(""Метаданные.Документы"", ТолькоУправляемыеФормы, ИменаОсновныхФорм_Объекты_Сервер()); //Объект.мИменаОсновныхФорм_Объекты);
	ДобавитьТестМетаФормыОбъекты(ВсеТесты, CписокИменМетаФорм, имяТеста, ПрефиксПредставленияТеста);
	
	имяТеста = ""ТестДолжен_ОткрытьФормуПоПолномуИмениФормы"";

	CписокИменМетаФорм = СписокИменМетаФормСервер(""Метаданные.Справочники"", ТолькоУправляемыеФормы, мИменаОсновныхФорм_Списки_Сервер());
	ДобавитьТестМетаФормы(ВсеТесты, CписокИменМетаФорм, имяТеста);
	
	CписокИменМетаФорм = СписокИменМетаФормСервер(""Метаданные.Документы"", ТолькоУправляемыеФормы, мИменаОсновныхФорм_Списки_Сервер());
	ДобавитьТестМетаФормы(ВсеТесты, CписокИменМетаФорм, имяТеста);
	
	CписокИменМетаФорм = СписокИменМетаФормСервер(""Метаданные.Обработки"", ТолькоУправляемыеФормы, мИменаОсновныхФорм_Сервер());
	ДобавитьТестМетаФормы(ВсеТесты, CписокИменМетаФорм, имяТеста);
	
	CписокИменМетаФорм = СписокИменМетаФормСервер(""Метаданные.Отчеты"", ТолькоУправляемыеФормы, мИменаОсновныхФорм_Сервер());
	ДобавитьТестМетаФормы(ВсеТесты, CписокИменМетаФорм, имяТеста);

	Возврат ВсеТесты;
	
КонецФункции
//}

//{ блок юнит-тестов - САМИ ТЕСТЫ

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	//Предупреждение(""Спец.окно для для показа сообщений из тестов. Таймаут 1 секунда"",1); // нужно для показа сообщений из теста, иначе не будут показаны
	
	ВыводитьСообщенияВЖурналРегистрации = Истина;
	CоздаваемыйЭлемент = Неопределено;
	
	ОбновитьПовторноИспользуемыеЗначения();
	//ЮТест.ВывестиСообщение(""Перед запуском теста"");
	НачатьТранзакциюСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	ОтменитьТранзакциюСервер();
	//ЮТест.ВывестиСообщение(""После запуска теста"");
	
	ЗакрытьФорму();
	УдалитьСозданныйОбъект();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НачатьТранзакциюСервер()
	НачатьТранзакцию();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьТранзакциюСервер()
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьСозданныйОбъект()
	Если ЗначениеЗаполнено(CоздаваемыйЭлемент) Тогда
		CозданныйОбъект = CоздаваемыйЭлемент.ПолучитьОбъект();
		CозданныйОбъект.Удалить();
	КонецЕсли;
	CоздаваемыйЭлемент = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	//Если ТипЗнч(ТестируемаяФорма) <> Тип(""Форма"") и ТипЗнч(ТестируемаяФорма) <> Тип(""УправляемаяФорма"") Тогда
	Если ТипЗнч(ТестируемаяФорма) <> Тип(""УправляемаяФорма"") Тогда
		Возврат;
	КонецЕсли; 
	ТестируемаяФорма.Модифицированность = Ложь;
	Если ТестируемаяФорма.Открыта() Тогда
		ТестируемаяФорма.Модифицированность = Ложь;
		//Попытка
			ТестируемаяФорма.Закрыть();
		//Исключение
		//	Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		//	ЗакрытьФормуБезусловноСОтменойТранзакции(ТестируемаяФорма);
		//	//Если ТранзакцияАктивна() Тогда
		//	//	ОтменитьТранзакцию();
		//	//КонецЕсли;
		//	//	//ДобавитьСтрокуРезультата(ИмяОперации, ИнформацияОбОшибке());
		//	//НачатьТранзакцию();
		//	//ТестируемаяФорма.УстановитьДействие(""ПередЗакрытием"", Неопределено);
		//	//ТестируемаяФорма.УстановитьДействие(""ПриЗакрытии"", Неопределено);
		//	//ТестируемаяФорма.Закрыть();
		//	ВызватьИсключение Ошибка; 			
		//КонецПопытки;
	Иначе
		Попытка
			ТестируемаяФорма.Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;
	ТестируемаяФорма = """";

КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуПоПолномуИмениФормы(ПолноеИмяФормы) Экспорт
	ТестироватьФорму(ПолноеИмяФормы, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТестироватьФорму(ПолноеИмяФормы, ПараметрыФормы, Модально = Ложь) Экспорт
	Если Объект.ВыводитьСообщенияВЖурналРегистрации Тогда
		ВыполнитьЗаписьВЖурналРегистрации(ПолноеИмяФормы);
	КонецЕсли;
	
	КлючВременнойФормы = ""908насмь9ыв3245"";
	Если Модально Тогда
		ТестируемаяФорма = ОткрытьФормуМодально(ПолноеИмяФормы, ПараметрыФормы);
	Иначе
		ТестируемаяФорма = ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы,, КлючВременнойФормы);
	КонецЕсли;
	Если ТестируемаяФорма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ТестируемаяФорма.Открыть(); // К сожалению здесь исключения не ловятся http://partners.v8.1c.ru/forum/thread.jsp?id=1080350#1080350
		ЮТест.Проверить(ТестируемаяФорма.Открыта(), ""ТестируемаяФорма """"""+ПолноеИмяФормы+"""""" не открылась, а должна была открыться"");
		
	Если ТипЗнч(ТестируемаяФорма) = Тип(""УправляемаяФорма"") Тогда
		ТестируемаяФорма.ОбновитьОтображениеДанных();
	Иначе
			//Если ЭтоОбычнаяФорма(ТестируемаяФорма) Тогда
		ТестируемаяФорма.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, СсылочныйОбъект)
	ПараметрыФормы = Новый Структура(""Ключ"", СсылочныйОбъект);
	ТестироватьФорму(Мета_ПолноеИмя, ПараметрыФормы);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаписьВЖурналРегистрации(ПолноеИмяФормы)
	ЗаписьЖурналаРегистрации(Объект().Метаданные().Синоним, УровеньЖурналаРегистрации.Информация, , , ""Операция: "" + ПолноеИмяФормы);
КонецПроцедуры

Процедура СоздатьИменаОсновныхФорм()
	ОсновнойОбъект = Объект();
	ОсновнойОбъект.СоздатьИменаОсновныхФорм();
	ЗначениеВРеквизитФормы(ОсновнойОбъект, ""Объект"");
КонецПроцедуры

&НаСервере
Функция ИменаОсновныхФорм_Объекты_Сервер()
	Возврат Объект().мИменаОсновныхФорм_Объекты;
КонецФункции

&НаСервере
Функция мИменаОсновныхФорм_Списки_Сервер()
	Возврат Объект().мИменаОсновныхФорм_Списки;
КонецФункции

&НаСервере
Функция мИменаОсновныхФорм_Сервер()
	Возврат Объект().мИменаОсновныхФорм;
КонецФункции

&НаКлиенте
Процедура ДобавитьТестМетаФормы(ВсеТесты, CписокИменМетаФорм, имяТеста)
	Для каждого Элемент Из CписокИменМетаФорм  Цикл
		МетаФорма_ПолноеИмя = Элемент.Значение;
		ПредставлениеТеста = МетаФорма_ПолноеИмя;
		лПараметры = Новый Структура(""ПредставлениеТеста,ИмяТеста,Транзакция,Параметр"", ПредставлениеТеста, имяТеста, Истина, МетаФорма_ПолноеИмя);
		ВсеТесты.Добавить(лПараметры);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьТестМетаФормыОбъекты(ВсеТесты, CписокИменМетаФорм, имяТеста, ПрефиксПредставленияТеста)
	Для каждого Элемент Из CписокИменМетаФорм  Цикл
		МетаФорма_ПолноеИмя = Элемент.Значение;
		ПредставлениеТеста = ПрефиксПредставленияТеста + "" : "" + МетаФорма_ПолноеИмя;
		
		//Структура = Новый Структура(""МетаФорма_ПолноеИмя"", МетаФорма_ПолноеИмя);
		////Структура = Новый Структура(""МетаИмя,МетаФорма_ПолноеИмя"", МетаОбъект.Имя, МетаФорма_ПолноеИмя);
		//лПараметры = Новый Структура(""ПредставлениеТеста,ИмяТеста,Транзакция,Параметр"", ПредставлениеТеста, имяТеста, Истина, Структура);
		лПараметры = Новый Структура(""ПредставлениеТеста,ИмяТеста,Транзакция,Параметр"", ПредставлениеТеста, имяТеста, Истина, МетаФорма_ПолноеИмя);
		ВсеТесты.Добавить(лПараметры);
	КонецЦикла;
КонецПроцедуры

//&НаСервере
Функция СписокИменМетаФормСервер(ВыражениеВычисленияМенеджераМетаданных, ТолькоУправляемыеФормы, ИменаОсновныхФорм)
	менеджерМетаданного = Неопределено;
	Выполнить(""менеджерМетаданного = ""+ВыражениеВычисленияМенеджераМетаданных);//Метаданные.Обработки;
	ОсновнойОбъект = Объект();
	CписокИменМетаФорм = ПолучитьСписокИменМетаФормПоМенеджеруМетаданных(менеджерМетаданного, ОсновнойОбъект, ТолькоУправляемыеФормы, ОсновнойОбъект.ПолучитьСписокИсключений_Обработки(), ИменаОсновныхФорм); //ОсновнойОбъект.мИменаОсновныхФорм_Списки);
	Возврат CписокИменМетаФорм;
КонецФункции

Функция СписокИменМетаФормОбъектовСервер(ВыражениеВычисленияМенеджераМетаданных, ТолькоУправляемыеФормы, ИменаОсновныхФорм)
	менеджерМетаданного = Неопределено;
	Выполнить(""менеджерМетаданного = ""+ВыражениеВычисленияМенеджераМетаданных);//Метаданные.Обработки;
	ОсновнойОбъект = Объект();
	CписокИменМетаФорм = ПолучитьСписокИменМетаФормПоМенеджеруМетаданных(менеджерМетаданного, ОсновнойОбъект, ТолькоУправляемыеФормы, ОсновнойОбъект.ПолучитьСписокИсключений_Справочники_Существующие(), ИменаОсновныхФорм); //ОсновнойОбъект.мИменаОсновныхФорм_Объекты);
	Возврат CписокИменМетаФорм;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокИменМетаФормПоМенеджеруМетаданных(менеджерМетаданного, ОсновнойОбъект, ТолькоУправляемыеФормы, списокИсключений, ИменаОсновныхФорм)
	CписокИменМетаФорм = Новый СписокЗначений;
	Для Каждого МетаОбъект Из менеджерМетаданного Цикл
		Если МетаОбъект.Имя = ""UnitTestRunner"" Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьИмяМетаФормыДляМетаданного_ОдинОбъект(CписокИменМетаФорм, ОсновнойОбъект, МетаОбъект, ТолькоУправляемыеФормы, списокИсключений, ИменаОсновныхФорм);
	КонецЦикла;
	Возврат CписокИменМетаФорм;
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьИмяМетаФормыДляМетаданного_ОдинОбъект(CписокИменМетаФорм, ОсновнойОбъект, МетаОбъект, ТолькоУправляемыеФормы, списокИсключений, ИменаОсновныхФорм)
	Если списокИсключений.НайтиПоЗначению(МетаОбъект.Имя) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ПравоДоступа(""Просмотр"", МетаОбъект) Тогда
		МетаФормы = ОсновнойОбъект.ПолучитьМетаФормыОбъектаДляПроверки(МетаОбъект, ИменаОсновныхФорм);

		Для каждого МетаФорма Из МетаФормы Цикл
			МетаФорма_ПолноеИмя = МетаФорма.ПолноеИмя();
			//Сообщить(""МетаФорма_ПолноеИмя <""+МетаФорма_ПолноеИмя+""> "");
			
			Если ТолькоУправляемыеФормы Тогда
				//Сообщить(""МетаФорма.ТипФормы <""+МетаФорма.ТипФормы+""> "");
				Если Не ЭтоУправляемаяФорма(МетаФорма) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		
			CписокИменМетаФорм.Добавить(МетаФорма_ПолноеИмя);
			//ПредставлениеТеста = МетаФорма_ПолноеИмя;
			//лПараметры = Новый Структура(""ПредставлениеТеста,ИмяТеста,Транзакция,Параметр"", ПредставлениеТеста, имяТеста, Истина, МетаФорма_ПолноеИмя);
			//ВсеТесты.Добавить(лПараметры);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоУправляемаяФорма(МетаФорма)
	Возврат МетаФорма <> Неопределено И МетаФорма.ТипФормы = Метаданные.СвойстваОбъектов.ТипФормы.Управляемая;
КонецФункции

Функция Объект()
	Возврат РеквизитФормыВЗначение(""Объект"");
КонецФункции

&НаКлиенте
Процедура Тест_ОткрытьФормуСуществующегоЭлементаСправочника(Мета_ПолноеИмя) Экспорт
	Тест_ОткрытьФормуСуществующегоЭлементаСправочникаСервер(Мета_ПолноеИмя);
	ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, CоздаваемыйЭлемент);
КонецПроцедуры

&НаСервере
Процедура Тест_ОткрытьФормуСуществующегоЭлементаСправочникаСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);

	ОсновнойОбъект = Объект();
	CоздаваемыйЭлемент = ОсновнойОбъект.СоздатьЭлементИВернутьСсылку(ИД, ""существующий"");
КонецПроцедуры

&НаКлиенте
Процедура Тест_ОткрытьФормуСуществующегоЭлементаДокумента(Мета_ПолноеИмя) Экспорт
	Док = Тест_ОткрытьФормуСуществующегоЭлементаДокументаСервер(Мета_ПолноеИмя);
	ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, Док);
КонецПроцедуры

&НаСервере
Функция Тест_ОткрытьФормуСуществующегоЭлементаДокументаСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);
	
	ОсновнойОбъект = Объект();
	Док = ОсновнойОбъект.ПолучитьСуществующийДокументОбъектИВернутьСсылку(ИД, Истина, ""Тест_ОткрытьФормуСуществующегоДокумента"");
	Возврат Док;
КонецФункции

Функция ПолучитьВидМетаданного(Мета_ПолноеИмя)
	ИД = Лев(Мета_ПолноеИмя, Найти(Мета_ПолноеИмя, "".Форма."")-1);
	ИД = Сред(ИД, Найти(ИД, ""."") + 1);
	Возврат ИД;
КонецФункции

//} конец блока юнит-тестов
",
{4,2,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",d7763d54-e3e8-4427-b006-786d44023817}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"CоздаваемыйЭлемент",
{1,1,
{"ru","Cоздаваемый элемент"}
},
{"Pattern",
{"#",280f5f0e-9c8a-49cc-bf6d-4d296cc17a63}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0}
}