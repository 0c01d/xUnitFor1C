{2,
{35,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0},
{0},1,
{19,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0},0,"","",1,
{19,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{8,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},1,"",0},"&НаКлиенте
Перем юТест;

&НаКлиенте
Перем массивТестовыхПриложений;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить(""Тест_ГУИ_83"");
	ВсеТесты.Добавить(""Тест_ГУИ_83_ДваПриложения"");
	
	Возврат ВсеТесты;
	
КонецФункции

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	
	юТест.ВывестиСообщение(""Перед запуском теста"");
	массивТестовыхПриложений = Новый Массив;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	
	юТест.ВывестиСообщение(""После запуска теста"");
	ЗавершитьВсеСеансыРаботыСТестовымиПриложениями();
КонецПроцедуры

&НаКлиенте
Процедура Тест_ГУИ_83() Экспорт
	//Предупреждение(массивТестовыхПриложений.Количество(), 1);
	имяПользователя = ""Роль1"";
	Порт = 1577;
	ТаймаутОжиданияПриложенияВСекундах = 20;
	
	тестовоеПриложение = ЗапуститьТестовоеПриложение(имяПользователя, Порт, ТаймаутОжиданияПриложенияВСекундах);
	
	ТестовыйСценарий_25_09_2013(тестовоеПриложение);

КонецПроцедуры

&НаКлиенте
Процедура Тест_ГУИ_83_ДваПриложения() Экспорт
	Предупреждение(массивТестовыхПриложений.Количество(), 1);
	имяПользователя = ""Роль1"";
	Порт = 1577;
	ТаймаутОжиданияПриложенияВСекундах = 20;
	
	//имяПользователя2 = ""Роль2"";
	Порт2 = Порт + 1;
	
	тестовоеПриложение = ЗапуститьТестовоеПриложение(имяПользователя, Порт, ТаймаутОжиданияПриложенияВСекундах);
	тестовоеПриложение2 = ЗапуститьТестовоеПриложение(имяПользователя, Порт2, ТаймаутОжиданияПриложенияВСекундах);
	
	ТестовыйСценарий_25_09_2013(тестовоеПриложение);
	ТестовыйСценарий_25_09_2013(тестовоеПриложение2);
	
КонецПроцедуры

&НаКлиенте
Функция ЗапуститьТестовоеПриложение(ИмяПользователя, Порт, ТаймаутОжиданияПриложенияВСекундах)
	Перем тестовоеПриложение;
	строкаЗапуска = ПолучитьСтрокуЗапуска(ИмяПользователя, Порт);
	//Предупреждение(""строкаЗапуска ""+Символы.ПС+строкаЗапуска, 3);
	//Предупреждение(""Порт ""+Порт);
 	ЗапуститьПриложение(строкаЗапуска);
	тестовоеПриложение = Новый ТестируемоеПриложение(, XMLСтрока(Порт));

	Подключен = Ложь;
	ВремяОкончанияОжидания = ТекущаяДата() + ТаймаутОжиданияПриложенияВСекундах; //60;
	ОписаниеОшибкиСоединения = """";
	Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
		Попытка
			тестовоеПриложение.УстановитьСоединение();
			Подключен = Истина;
			Прервать;
		Исключение
			ОписаниеОшибкиСоединения = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;

	сообщениеОшибки = ""Не смогли установить соединение с тестовым приложением для пользователя ""+ИмяПользователя+"" !"" + Символы.ПС + ОписаниеОшибкиСоединения; 
		//юТест.ПроверитьИстину(Подключен, сообщениеОшибки);
	Если Не Подключен Тогда 
    	тестовоеПриложение = Неопределено;
		ВызватьИсключение сообщениеОшибки;
	КонецЕсли;
	
	массивТестовыхПриложений.Добавить(тестовоеПриложение);

	Возврат тестовоеПриложение;
КонецФункции

&НаКлиенте
Процедура ЗавершитьВсеСеансыРаботыСТестовымиПриложениями()
	Если массивТестовыхПриложений.Количество() <> 0 Тогда
		Для Каждого Подопытный Из массивТестовыхПриложений Цикл
			Подопытный.РазорватьСоединение();
		КонецЦикла;	

		ЗавершитьВсеТестовыеПриложенияПринудительно();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВсеТестовыеПриложенияПринудительно()
		юТест.ПроверитьЗаполненность(массивТестовыхПриложений.Количество(), ""массивТестовыхПриложений.Количество()"");

	Scr = Новый COMОбъект(""MSScriptControl.ScriptControl"");
	Scr.Language = ""vbscript"";
	Scr.AddCode(""
		|Option Explicit
		|
		|Dim objWMIService, objProcess, colProcess
		|
		|Set objWMIService = GetObject(""""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"""") 
		|
		|Set colProcess = objWMIService.ExecQuery(""""Select * from Win32_Process Where (CommandLine Like '%/TESTCLIENT%' And ExecutablePath Like '%1cv8c%')"""")
		|
		|For Each objProcess in colProcess
		|	objProcess.Terminate()
		|Next
		|"");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуЗапуска(ИмяПользователя = """", Порт = """")
		//Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда
		//	ИмяПользователя = ""Администратор"";
		//КонецЕсли;	
	
	Результат = КаталогПрограммы() + ""1cv8c.exe ENTERPRISE "" +
		""/IBConnectionString"""""" + СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """""""", """""""""""") + """""""" +
		""/N"""""" + ИмяПользователя + """""""" + 
		"" /TESTCLIENT -TPort"" + XMLСтрока(Порт);

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ТестовыйСценарий_25_09_2013(ТестовоеПриложение)

	ОкноПриложенияОсновноеВыполнитьКоманду(ТестовоеПриложение);
	ОкноПриложенияПоказатьГУИДЗакрыть(ТестовоеПриложение);
	ОкноПриложенияОсновноеВыполнитьКоманду1(ТестовоеПриложение);
	ОкноПриложенияПоказатьГУИДЗакрыть1(ТестовоеПриложение);
	ОкноПриложенияОсновноеФормаПростойСправочникАктивизировать(ТестовоеПриложение);

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияОсновноеВыполнитьКоманду(ТестовоеПриложение)
	
	ОкноПриложенияОсновное = Неопределено;
	КлиентсткиеОкнаТестируемогоПриложения = ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();
	Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл
		Если ТестируемоеОкно.Основное Тогда
			ОкноПриложенияОсновное = ТестируемоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОкноПриложенияОсновное.ВыполнитьКоманду(""e1cib/command/Обработка.ПоказатьГУИД.Команда.Открыть"");

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияПоказатьГУИДЗакрыть(ТестовоеПриложение)

	ОкноПриложенияПоказатьГУИД = ТестовоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения""), ""Показать ГУИД"", , 30);
	ОкноПриложенияПоказатьГУИД.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияОсновноеВыполнитьКоманду1(ТестовоеПриложение)

	
	ОкноПриложенияОсновное = Неопределено;
	КлиентсткиеОкнаТестируемогоПриложения = ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();
	Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл
		Если ТестируемоеОкно.Основное Тогда
			ОкноПриложенияОсновное = ТестируемоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОкноПриложенияОсновное.ВыполнитьКоманду(""e1cib/command/Справочник.ПростойСправочник.Команда.ОткрытьСписок"");

	ОкноПриложенияОсновное.ВыполнитьКоманду(""e1cib/command/Обработка.ПоказатьГУИД.Команда.Открыть"");

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияПоказатьГУИДЗакрыть1(ТестовоеПриложение)

	ОкноПриложенияПоказатьГУИД = ТестовоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения""), ""Показать ГУИД"", , 30);
	ОкноПриложенияПоказатьГУИД.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияОсновноеФормаПростойСправочникАктивизировать(ТестовоеПриложение)

	
	ОкноПриложенияОсновное = Неопределено;
	КлиентсткиеОкнаТестируемогоПриложения = ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();
	Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл
		Если ТестируемоеОкно.Основное Тогда
			ОкноПриложенияОсновное = ТестируемоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОкноПриложенияОсновноеФормаПростойСправочник = ОкноПриложенияОсновное.НайтиОбъект(Тип(""ТестируемаяФорма""), ""Простой справочник"");
	ОкноПриложенияОсновноеФормаПростойСправочник.Активизировать();

КонецПроцедуры







",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",d4e55e33-fb7f-484e-bcf7-2a6d67753130}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0}
}