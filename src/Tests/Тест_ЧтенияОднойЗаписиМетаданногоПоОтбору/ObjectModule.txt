Перем юТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	//мПараметров = Новый Массив;
	//мПараметров.Добавить("РегистрСведений.ШтатноеРасписаниеРозницыПлан");
	мПараметров = ПолучитьОбъектыПроверки();
	Параметры = Новый Структура("ПредставлениеТеста, ИмяТеста,Транзакция,Параметр", "Чтение одной записи метаданного", "ТестДолжен_ПрочитатьОднуЗаписьМетаданного", Истина, мПараметров);
	ВсеТесты.Добавить(Параметры);
	
	Возврат ВсеТесты;
	
КонецФункции

Процедура ТестДолжен_ПрочитатьОднуЗаписьМетаданного(Парам) Экспорт

	Сообщить("Парам теста <"+Парам+">");
	юТест.ПроверитьЗаполненность(Парам, "ТестДолжен_ПрочитатьОднуЗаписьМетаданного(Парам)");
	юТест.ПроверитьТип(Парам, "Массив", "ТестДолжен_ПрочитатьОднуЗаписьМетаданного(Парам) параметр должен быть массив");
	
	Для Каждого Эл Из Парам Цикл
		Сообщить(Эл);
	КонецЦикла;
	
	Для Каждого Эл Из Парам Цикл
		юТест.ПроверитьВхождение(Эл, ".", "ТестДолжен_ПрочитатьОднуЗаписьМетаданного(Парам) искали разделитель точку");
	КонецЦикла;
	
	Для Каждого Эл Из Парам Цикл
		мМетаданного = юТест.РазложитьСтрокуВМассивПодстрок(Эл, ".");
		Результат = ПолучитьЭлементыМетаданногоПоОтбору(мМетаданного[0],мМетаданного[1],0);
		//юТест.ПроверитьЗаполненность(Результат,"ТестДолжен_ПрочитатьОднуЗапистьМетаданного(Парам) хотели получить одну запись "+Эл);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОбъектыПроверки()
	мПараметров = Новый Массив;
		
	Если РольДоступна(Метаданные.Роли.Отчет_УтвержденноеШтатноеРасписание) Тогда
		мПараметров.Добавить("РегистрСведений.ШтатноеРасписаниеРозницыПлан");
		мПараметров.Добавить("Справочник.ВидКлассификатораДолжностей");
		мПараметров.Добавить("Справочник.КлассификаторДолжностей");
		мПараметров.Добавить("Справочник.ДолжностиОрганизаций");
		мПараметров.Добавить("Справочник.ПаспортаТТ");
		мПараметров.Добавить("Справочник.МестаХранения");
		мПараметров.Добавить("Документ.ИзменениеШтатногоРасписанияРозницы");
		мПараметров.Добавить("Справочник.СостоянияТТ");
	КонецЕсли;
	Если РольДоступна(Метаданные.Роли.Отчеты_ТабелиИЯвки) Тогда
		мПараметров.Добавить("РегистрСведений.ТабельУчетаРабочегоВремени");
		мПараметров.Добавить("Справочник.ПаспортаТТ");
		мПараметров.Добавить("Справочник.МестаХранения");
		мПараметров.Добавить("Справочник.Регионы");
		мПараметров.Добавить("Справочник.ФизическиеЛица");
		мПараметров.Добавить("Справочник.СотрудникиОрганизаций");
		мПараметров.Добавить("Справочник.Организации");
		мПараметров.Добавить("Справочник.ПодразделенияОрганизаций");
		мПараметров.Добавить("Справочник.ДолжностиОрганизаций");
		мПараметров.Добавить("Справочник.ВидыГрафиковРаботы");
		мПараметров.Добавить("Документ.ПриходУходСотрудников");
	КонецЕсли;
	Если РольДоступна(Метаданные.Роли.Отчеты_РТТ) Тогда
		мПараметров.Добавить("РегистрСведений.АттестацияИОРТТ");
		мПараметров.Добавить("Справочник.ФизическиеЛица");
		мПараметров.Добавить("Справочник.ДолжностиОрганизаций");
		мПараметров.Добавить("РегистрСведений.РаботникиОрганизаций");
		мПараметров.Добавить("Справочник.МестаХранения");
		мПараметров.Добавить("Справочник.ПаспортаТТ");
		мПараметров.Добавить("РегистрСведений.ИОРТТ");
		мПараметров.Добавить("Справочник.ПричиныИзмененияСостоянияЗУП");
		мПараметров.Добавить("Справочник.ПользователиАД");
		мПараметров.Добавить("Документ.АттестацияНаИОРТТ");
		мПараметров.Добавить("Документ.ИзменениеПолномочийИОРТТ");
		мПараметров.Добавить("Перечисление.ОперацииУправленияПолномочиями");
		мПараметров.Добавить("Документ.КорректировкаИзмененийИОРТТ");
		мПараметров.Добавить("Документ.КорректировкаКадровыхПереводов");
		мПараметров.Добавить("Документ.ПереводСотрудника");
		мПараметров.Добавить("Документ.КадровоеПеремещение");
		мПараметров.Добавить("Справочник.ПаспортаТТДляКадровыхПеремещений");
		мПараметров.Добавить("Справочник.ГрафикиРаботыДолжностей");
		мПараметров.Добавить("Справочник.ВидыГрафиковРаботы");
		мПараметров.Добавить("Документ.КПО");
		мПараметров.Добавить("РегистрСведений.ТабельУчетаРабочегоВремени");
	КонецЕсли;
	Если РольДоступна(Метаданные.Роли.Отчет_Мошенничества) Тогда
		мПараметров.Добавить("Справочник.ФизическиеЛица");
		мПараметров.Добавить("Справочник.ПаспортаТТ");
		мПараметров.Добавить("Справочник.Регионы");
		мПараметров.Добавить("РегистрСведений.ОснованияУвольненийСотрудниковТТ");
		мПараметров.Добавить("Документ.ПриходУходСотрудников");
		мПараметров.Добавить("РегистрСведений.ДиректораПоТорговымОперациямТТ");
		мПараметров.Добавить("РегистрСведений.ОперативныеМенеджерыТТ");
		мПараметров.Добавить("РегистрСведений.УправляющиеМенеджерыТТ");
	КонецЕсли;
	Если РольДоступна(Метаданные.Роли.Отчет_ИтоговыеУдержания) Тогда
		мПараметров.Добавить("Документ.УдержанияВЗарплату");
		мПараметров.Добавить("Справочник.ФизическиеЛица");
		мПараметров.Добавить("Справочник.МестаХранения");
		мПараметров.Добавить("Справочник.ПаспортаТТ");
		мПараметров.Добавить("Справочник.Организации");
		мПараметров.Добавить("Справочник.ВидыУдержанийЗП");
		мПараметров.Добавить("Справочник.КлассификаторИтоговыхУдержаний");
		мПараметров.Добавить("Справочник.ПользователиАД");
		мПараметров.Добавить("Документ.Удержания");
		мПараметров.Добавить("Справочник.ВидыРасчетаЗУП");
		мПараметров.Добавить("Справочник.Регионы");
		мПараметров.Добавить("Справочник.ПодразделенияОрганизаций");
	КонецЕсли;
	Если мПараметров.Количество()=0 Тогда
		мПараметров.Добавить("Справочник.ФизическиеЛица");
	КонецЕсли;
	Возврат мПараметров;
КонецФункции

Функция ПолучитьЭлементыМетаданногоПоОтбору(типМетаданного, видМетаданного, Количество=1,структураОтбора = Неопределено) Экспорт
	юТест.ПроверитьЗаполненность(типМетаданного, "типМетаданного");
	юТест.ПроверитьЗаполненность(видМетаданного, "видМетаданного");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ "+Количество+"
	|	*
	|ИЗ
	|	"+типМетаданного+"."+видМетаданного+" КАК Таб
	|ГДЕ
	|	Истина
	|";
		
	Если ЗначениеЗаполнено(структураОтбора) Тогда
		Для каждого ключЗначение Из структураОтбора Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Таб."+имяРеквизита+" = &"+имяРеквизита+" ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат Неопределено;
	//КонецЕсли; 
	ТЗ = РезультатЗапроса.Выгрузить();
	
	Возврат ТЗ;
КонецФункции