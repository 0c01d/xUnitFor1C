Перем юТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт 
	
	юТест = ЮнитТестирование; 
	
	ВсеТесты = Новый Массив; 
	ВсеТесты.Добавить("Тест_Проверить_ТочкуМаршрута_ОдинБП"); 
	ВсеТесты.Добавить("Тест_Проверить_ТочкуМаршрута_ДваБП"); 
	
	Возврат ВсеТесты; 
	
КонецФункции 

Процедура ПередЗапускомТеста() Экспорт 
	//Размещение = "C:\1С базы\Белгипрозем 2015\Тесты\xUnitFor1C\Разрабатываемые\СозданиеЭлементовСправочников.epf";
	//ВнОбр = ВнешниеОбработки.Создать(Размещение);
	
	//юТест.ВывестиСообщение("Перед запуском теста"); 
	НачатьТранзакцию();
КонецПроцедуры 

Процедура ПослеЗапускаТеста() Экспорт 
	
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	//юТест.ВывестиСообщение("После запуска теста"); 
	
КонецПроцедуры 

Процедура Тест_Проверить_ТочкуМаршрута_ОдинБП() Экспорт
	
	ТестовыеДанные = ЮТест.СоздатьДанныеПоМакетам(ЭтотОбъект, "ТестовыеДанные");
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(5, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	// Проверим точку маршрута в задаче
	Есть = ТестовыеДанные.Задача1БП1.ТочкаМаршрута;
	Надо = БизнесПроцессы.БизнесПроцесс1.ТочкиМаршрута.Действие1;
	ЮТест.ПроверитьРавенство(Есть, Надо, "Точка маршрута 1 БП");
	
КонецПроцедуры

Процедура Тест_Проверить_ТочкуМаршрута_ДваБП() Экспорт
	
	ТестовыеДанные = ЮТест.СоздатьДанныеПоМакетам(ЭтотОбъект, "ТестовыеДанные");
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(5, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	// Проверим точку маршрута в задаче
	Есть = ТестовыеДанные.Задача1БП2.ТочкаМаршрута;
	Надо = БизнесПроцессы.БизнесПроцесс2.ТочкиМаршрута.Действие1;
	ЮТест.ПроверитьРавенство(Есть, Надо, "ТочкаМаршрута");
	
КонецПроцедуры

