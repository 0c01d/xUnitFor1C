
//{ основная процедура для юнит-тестирования xUnitFor1C
Перем ЮТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_ОбработатьПустойПараметрЗапуска");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьТиповыеПараметрыЗапуска");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьТиповыеПараметрыЗапуска_АнглийскиеКоманды");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьПараметрыЗапускаБезКомандВыполнитьИлиЗагрузить");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьПараметрыЗапускаБезКомандВыполнитьИлиЗагрузить_АнглийскиеКоманды");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска_АнглийскиеКоманды");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска_ЕстьПробелыСпередиИСзадиКоманды");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапускаДляВстроенныхТестов");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапускаДляВстроенныхТестов_АнглийскиеКоманды");

	Возврат ВсеТесты;
	
КонецФункции
//}

//{ блок юнит-тестов - сами тесты

Процедура ПередЗапускомТеста() Экспорт
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
КонецПроцедуры

Процедура ТестДолжен_ОбработатьПустойПараметрЗапуска() Экспорт
	СтрокаПараметров = "";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска, Неопределено, "ПараметрыЗапуска");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьТиповыеПараметрыЗапуска() Экспорт
	СтрокаПараметров = "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "E:\ТестыИМ\Тесты", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "", "ПараметрыЗапуска.ПутьОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Ложь, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "", "ПараметрыЗапуска.ПутьКодаВозврата");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьТиповыеПараметрыЗапуска_АнглийскиеКоманды() Экспорт
	СтрокаПараметров = "xddRun;E:\ТестыИМ\Тесты;xddShutdown";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "E:\ТестыИМ\Тесты", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "", "ПараметрыЗапуска.ПутьОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Ложь, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "", "ПараметрыЗапуска.ПутьКодаВозврата");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьПараметрыЗапускаБезКомандВыполнитьИлиЗагрузить() Экспорт
	СтрокаПараметров = "E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска, Неопределено, "ПараметрыЗапуска");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьПараметрыЗапускаБезКомандВыполнитьИлиЗагрузить_АнглийскиеКоманды() Экспорт
	СтрокаПараметров = "E:\ТестыИМ\Тесты;xddShutdown";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска, Неопределено, "ПараметрыЗапуска");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска() Экспорт
	СтрокаПараметров = "Тесты_Команда_Тестировать;E:\Путь с пробелом\Tests;ЗавершитьРаботуПослеТестирования;Тесты_Команда_ФорматОтчета;xml;Тесты_Команда_КаталогОтчетов;E:\Путь с пробелом\testReport;Тесты_Путь_КЛогам;E:\f1.log";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "E:\Путь с пробелом\Tests", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "xml", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "E:\Путь с пробелом\testReport\", "ПараметрыЗапуска.ПутьОтчета");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Ложь, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "E:\f1.log", "ПараметрыЗапуска.ПутьКодаВозврата");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска_АнглийскиеКоманды() Экспорт
	СтрокаПараметров = "xddRun;E:\Путь с пробелом\Tests;xddShutdown;xddReportFormat;xml;xddReportPath;E:\Путь с пробелом\testReport;xddExitCodePath;E:\f1.log";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "E:\Путь с пробелом\Tests", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "xml", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "E:\Путь с пробелом\testReport\", "ПараметрыЗапуска.ПутьОтчета");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Ложь, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "E:\f1.log", "ПараметрыЗапуска.ПутьКодаВозврата");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска_ЕстьПробелыСпередиИСзадиКоманды() Экспорт
	СтрокаПараметров = " Тесты_Команда_Тестировать ; E:\Путь с пробелом\Tests ; ЗавершитьРаботуПослеТестирования ; Тесты_Команда_ФорматОтчета ; xml ; Тесты_Команда_КаталогОтчетов ; E:\Путь с пробелом\testReport ; Тесты_Путь_КЛогам ; E:\f1.log ";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "E:\Путь с пробелом\Tests", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "xml", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "E:\Путь с пробелом\testReport\", "ПараметрыЗапуска.ПутьОтчета");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Ложь, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "E:\f1.log", "ПараметрыЗапуска.ПутьКодаВозврата");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапускаДляВстроенныхТестов() Экспорт
	СтрокаПараметров = "ЭтоТестИзКонфигурации;Тесты_Команда_Тестировать;Подсистема.Тестирование;ЗавершитьРаботуПослеТестирования;Тесты_Команда_ФорматОтчета;xml;Тесты_Команда_КаталогОтчетов;E:\Путь с пробелом\testReport;Тесты_Путь_КЛогам;E:\f1.log";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "Подсистема.Тестирование", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "xml", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "E:\Путь с пробелом\testReport\", "ПараметрыЗапуска.ПутьОтчета");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Истина, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "E:\f1.log", "ПараметрыЗапуска.ПутьКодаВозврата");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапускаДляВстроенныхТестов_АнглийскиеКоманды() Экспорт
	СтрокаПараметров = "xddConfig;xddRun;Подсистема.Тестирование;xddShutdown;xddReportFormat;xml;xddReportPath;E:\Путь с пробелом\testReport;xddExitCodePath;E:\f1.log";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "Подсистема.Тестирование", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "xml", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "E:\Путь с пробелом\testReport\", "ПараметрыЗапуска.ПутьОтчета");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Истина, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "E:\f1.log", "ПараметрыЗапуска.ПутьКодаВозврата");
КонецПроцедуры

//} 

// Пример строки запуска для внешних файлов - "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования"
//	"C:\Program Files (x86)\1cv82\8.2.18.96\bin\1cv8c.exe" /DisableStartupMessages /Execute E:\ТестыИМ\xddTestRunner.epf /S "as-msk-a6122\im_test" /Out "E:\ТестыИМ\Тесты\log.txt"  /C "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования" /LogUI
//
// Пример строки запуска для внутренний тестов-обработок - "ЭтоТестИзКонфигурации;Тесты_Команда_Тестировать;Подсистемы.Тестирование;ЗавершитьРаботуПослеТестирования"
//	"C:\Program Files (x86)\1cv82\8.2.18.96\bin\1cv8c.exe" /DisableStartupMessages /Execute E:\ТестыИМ\xddTestRunner.epf /S "as-msk-a6122\im_test" /Out "E:\ТестыИМ\Тесты\log.txt"  /C "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования" /LogUI
Функция РазобратьПараметрыЗапуска(СтрокаПараметровЗапуска) Экспорт
	РезСтруктураПараметров = СоздатьСтруктуруПараметровЗапуска();
	КоллекцияКомандЗапуска = СоздатьКоллекциюКомандЗапуска();
	
	//файлЛога = Новый ТекстовыйДокумент;
	путьКТестам = "";
	естьКоманда_Загрузить = Ложь;
	естьКоманда_ВыполнитьТестирование = Ложь;
	естьПутьККаталогуОтчетов = Ложь;
	лЗавершитьРаботуПослеТестирования = Ложь;
	ПутьКФайлуЛога = "";
	ТипОтчетаОТестировании = "";
	ПутьОтчетаТестирования = "";
	
	Если ПустаяСтрока(СтрокаПараметровЗапуска) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	параметрыЗапуска = ПолучитьМассивПараметровЗапуска(СтрокаПараметровЗапуска);
	мЭтоВнутренняяОбработка	= Ложь;
	
	МаксимальныйИндекс = параметрыЗапуска.ВГраница();
		
	Для Номер = 0 По МаксимальныйИндекс Цикл
		ЭлементМассива = параметрыЗапуска.Получить(Номер);
		
		лКомандаЗапуска = НРег(СокрЛП(ЭлементМассива));
		НомерМеньшеМаксимальногоИндекса = Номер < МаксимальныйИндекс;
		
		Если НайтиКоманду(КоллекцияКомандЗапуска.Выполнить, лКомандаЗапуска) И НомерМеньшеМаксимальногоИндекса Тогда
		//Если лКомандаЗапуска = НРег("Тесты_Команда_Тестировать") И НомерМеньшеМаксимальногоИндекса Тогда
			естьКоманда_ВыполнитьТестирование = Истина;
			
			Если естьКоманда_ВыполнитьТестирование Тогда
				путьКТестам = СокрЛП(ПараметрыЗапуска[Номер+1]);
				естьКоманда_Загрузить = Истина;
				Продолжить;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НайтиКоманду(КоллекцияКомандЗапуска.Загрузить, лКомандаЗапуска) И НомерМеньшеМаксимальногоИндекса Тогда 
		//Если (лКомандаЗапуска = НРег("Тесты_Команда_Загрузить") И НомерМеньшеМаксимальногоИндекса) Тогда 
			естьКоманда_Загрузить = Истина;
			Если естьКоманда_Загрузить Тогда
				путьКТестам = СокрЛП(ПараметрыЗапуска[Номер+1]);
				Продолжить;
			КонецЕсли;
		КонецЕсли;		
		//Сообщить("путьКТестам = <"+?(путьКТестам = Неопределено, "Неопределено", путьКТестам)+">"); 
		
		Если НайтиКоманду(КоллекцияКомандЗапуска.ОстановитьСистему, лКомандаЗапуска) Тогда
		//Если НРег(ЭлементМассива) = НРег("ЗавершитьРаботуПослеТестирования") Тогда
			лЗавершитьРаботуПослеТестирования = Истина;
		КонецЕсли;
		
		Если НайтиКоманду(КоллекцияКомандЗапуска.ПутьОтчета, лКомандаЗапуска) И НомерМеньшеМаксимальногоИндекса Тогда
		//Если лКомандаЗапуска = НРег("Тесты_Команда_КаталогОтчетов") И НомерМеньшеМаксимальногоИндекса Тогда
			ПутьОтчетаТестирования = СокрЛП(ПараметрыЗапуска[Номер+1]);
		КонецЕсли;
		
		Если НайтиКоманду(КоллекцияКомандЗапуска.ФорматОтчета, лКомандаЗапуска) И НомерМеньшеМаксимальногоИндекса Тогда
		//Если лКомандаЗапуска = НРег("Тесты_Команда_ФорматОтчета") И НомерМеньшеМаксимальногоИндекса Тогда
			ТипОтчетаОТестировании = СокрЛП(ПараметрыЗапуска[Номер+1]);
		КонецЕсли;
		
		Если НайтиКоманду(КоллекцияКомандЗапуска.ПутьКодаВозврата, лКомандаЗапуска) И НомерМеньшеМаксимальногоИндекса Тогда
		//Если (НРег(лКомандаЗапуска) = Нрег("out") ИЛИ НРег(лКомандаЗапуска) = Нрег("Тесты_Путь_КЛогам"))
			//И НомерМеньшеМаксимальногоИндекса Тогда
			
			ПутьКФайлуЛога = СокрЛП(ПараметрыЗапуска[Номер+1]);
		КонецЕсли;
		
		Если НайтиКоманду(КоллекцияКомандЗапуска.ВстроенныеТесты, лКомандаЗапуска) Тогда
		//Если лКомандаЗапуска = НРег("ЭтоТестИзКонфигурации") Тогда
			мЭтоВнутренняяОбработка	= Истина;
		КонецЕсли;		
		
	КонецЦикла;
    
	Если Не естьКоманда_Загрузить Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезСтруктураПараметров.ПутьТестов = путьКТестам;
	
	РезСтруктураПараметров.Загрузить = естьКоманда_Загрузить;
	РезСтруктураПараметров.Выполнить = естьКоманда_ВыполнитьТестирование;
	
	РезСтруктураПараметров.ФорматОтчета = ТипОтчетаОТестировании;
	РезСтруктураПараметров.ПутьКодаВозврата = ПутьКФайлуЛога;

	РезСтруктураПараметров.ОстановитьСистему = лЗавершитьРаботуПослеТестирования;
	РезСтруктураПараметров.ВстроенныеТесты = мЭтоВнутренняяОбработка;
	
	Если НЕ ПустаяСтрока(путьКТестам) И ПустаяСтрока(ПутьОтчетаТестирования) Тогда
		файл = Новый Файл(путьКТестам);
		Если файл.Существует() Тогда
			Если файл.ЭтоКаталог() Тогда
				ПутьОтчетаТестирования = путьКТестам + "\";
			Иначе
				ПутьОтчетаТестирования = файл.Путь + "\";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда 
		Если Не Прав(ПутьОтчетаТестирования,1) = "\" Тогда 
			ПутьОтчетаТестирования = ПутьОтчетаТестирования+"\";
		КонецЕсли;
	КонецЕсли;
	РезСтруктураПараметров.ПутьОтчета = ПутьОтчетаТестирования;
	
	//ЭтаФорма.ЗавершитьРаботуПослеТестирования = лЗавершитьРаботуПослеТестирования;	

	Возврат РезСтруктураПараметров;		
КонецФункции

Функция ПолучитьМассивПараметровЗапуска(СтрокаПараметровЗапуска)

	Если ПустаяСтрока(СтрокаПараметровЗапуска) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = РазложитьСтрокуВМассивПодстрок(СтрокаПараметровЗапуска, ";");
		//ПервыйПараметр = Врег(ПараметрыЗапуска[0]);
	
		//Отказ = ОбщегоНазначенияКлиентПереопределяемый.ОбработатьПараметрыЗапуска(
		//	ПервыйПараметр, ПараметрыЗапуска) Или Отказ;
	
	Возврат ПараметрыЗапуска;
	
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
// Общий модуль СтроковыеФункцииКлиентСервер.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
//&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция СоздатьСтруктуруПараметровЗапуска()
//Тесты_Команда_Тестировать = xddRun
//Тесты_Команда_Загрузить = xddLoad
//ЗавершитьРаботуПослеТестирования = xddShutdown
//Тесты_Команда_КаталогОтчетов = xddReportPath
//Тесты_Команда_ФорматОтчета = xddReportFormat
//Тесты_Путь_КЛогам = xddExitCodePath
//ЭтоТестИзКонфигурации = xddConfig (в дальнейшем эта команда будет убрана за ненужностью)	
	Рез = Новый Структура;
	Рез.Вставить("ПутьТестов", Ложь);
	Рез.Вставить("Выполнить", Ложь);
	Рез.Вставить("Загрузить", Ложь);
	Рез.Вставить("ОстановитьСистему", Ложь);
	Рез.Вставить("ВстроенныеТесты", Ложь);
	Рез.Вставить("ПутьОтчета", "");
	Рез.Вставить("ФорматОтчета", "");
	Рез.Вставить("ПутьКодаВозврата", "");
	Возврат Рез;
КонецФункции

Функция СоздатьКоллекциюКомандЗапуска()
	Рез = СоздатьСтруктуруПараметровЗапуска();
	Рез.Вставить("Выполнить", Новый Структура("Р,А", "Тесты_Команда_Тестировать","xddRun"));
	Рез.Вставить("Загрузить", Новый Структура("Р,А", "Тесты_Команда_Загрузить","xddLoad"));
	Рез.Вставить("ОстановитьСистему", Новый Структура("Р,А", "ЗавершитьРаботуПослеТестирования","xddShutdown"));
	Рез.Вставить("ВстроенныеТесты", Новый Структура("Р,А", "ЭтоТестИзКонфигурации","xddConfig"));
	Рез.Вставить("ПутьОтчета", Новый Структура("Р,А", "Тесты_Команда_КаталогОтчетов","xddReportPath"));
	Рез.Вставить("ФорматОтчета", Новый Структура("Р,А", "Тесты_Команда_ФорматОтчета","xddReportFormat"));
	Рез.Вставить("ПутьКодаВозврата", Новый Структура("Р,А", "Тесты_Путь_КЛогам","xddExitCodePath"));
	Возврат Рез;
КонецФункции

Функция НайтиКоманду(КоллекцияКоманды, КомандаЗапускаНРег)
	Для каждого КлючЗначение Из КоллекцияКоманды Цикл
		Если НРег(КлючЗначение.Значение) = КомандаЗапускаНРег Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции
