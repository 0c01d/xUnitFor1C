&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем ЗагрузчикФайла;
&НаКлиенте
Перем ВременныеФайлы;

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокТестов() Экспорт
	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить("ТестДолжен_Загрузить_ОдинФайл");
	ВсеТесты.Добавить("ТестДолжен_Загрузить_ДваФайла");
	
	Возврат ВсеТесты;
КонецФункции

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	ВременныеФайлы = Новый Массив;
	ЗагрузчикФайла = КонтекстЯдра.Плагин("ЗагрузчикФайла");
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	ЗагрузчикФайла = Неопределено;
	УдалитьВременныеФайлы();
КонецПроцедуры

// { Helpers
&НаКлиенте
Функция НовыйВременныйФайл(Расширение) Экспорт
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ВременныйФайл = Новый Файл(ИмяВременногоФайла);
	ВременныеФайлы.Добавить(ВременныйФайл);
	
	Возврат ВременныйФайл;
КонецФункции

&НаКлиенте
Процедура УдалитьВременныеФайлы()
	Для каждого ВременныйФайл Из ВременныеФайлы Цикл
		Попытка
			УдалитьФайлы(ВременныйФайл.ПолноеИмя);
		Исключение
			Сообщить("Не удален временный файл: " + ВременныйФайл.ПолноеИмя + "
			|-" + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	ВременныеФайлы.Очистить();
КонецПроцедуры
// } Helpers

// { Loader interface
&НаКлиенте
Процедура ТестДолжен_Загрузить_ОдинФайл() Экспорт
	ФайлСТестами = НовыйВременныйФайл(".epf");
	ПолучитьМакет_НаСервере("ТестовыйНаборДляЗагрузчикаФС").Записать(ФайлСТестами.ПолноеИмя);
	
	ДеревоТестов = ЗагрузчикФайла.Загрузить(КонтекстЯдра, ФайлСТестами.ПолноеИмя);
	
	Утверждения.ПроверитьТип(ДеревоТестов, "Структура", "ДеревоТестов");
	Утверждения.ПроверитьРавенство(ДеревоТестов.Строки.Количество(), 1, "Узлы верхнего уровня");
	Контейнер = ДеревоТестов.Строки[0];
	ПроверитьКонтейнер(Контейнер, ФайлСТестами);
КонецПроцедуры

&НаСервере
Функция ПолучитьМакет_НаСервере(ИмяМакета)
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	Макет = ОбъектНаСервере.ПолучитьМакет("ТестовыйНаборДляЗагрузчикаФС");
	
	Возврат Макет;
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтейнер(Контейнер, ФайлСТестами)
	ТипыУзловДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов").Объект.ТипыУзловДереваТестов;
	Утверждения.ПроверитьРавенство(Контейнер.Тип, ТипыУзловДереваТестов.Контейнер, "Контейнер.Тип");
	Утверждения.ПроверитьРавенство(Контейнер.Имя, ФайлСТестами.ИмяБезРасширения, "Контейнер.Имя");
	Утверждения.ПроверитьТип(Контейнер.Строки, "Массив", "Контейнер.Строки");
	Утверждения.ПроверитьРавенство(Контейнер.Строки.Количество(), 3, "Контейнер.Строки.Количество()");
	
	Элемент1 = Контейнер.Строки[0];
	Утверждения.ПроверитьРавенство(Элемент1.Тип, ТипыУзловДереваТестов.Элемент, "Элемент1.Тип");
	Утверждения.ПроверитьРавенство(Элемент1.Путь, ФайлСТестами.ПолноеИмя, "Элемент1.Путь");
	Утверждения.ПроверитьРавенство(Элемент1.ИмяМетода, "УспешныйТест", "Элемент1.ИмяМетода");
	
	Элемент3 = Контейнер.Строки[2];
	Утверждения.ПроверитьРавенство(Элемент3.Тип, ТипыУзловДереваТестов.Элемент, "Элемент3.Тип");
	Утверждения.ПроверитьРавенство(Элемент3.Путь, ФайлСТестами.ПолноеИмя, "Элемент3.Путь");
	Утверждения.ПроверитьРавенство(Элемент3.ИмяМетода, "НесуществующийТест", "Элемент3.ИмяМетода");
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_Загрузить_ДваФайла() Экспорт
	ФайлСТестами1 = НовыйВременныйФайл(".epf");
	ПолучитьМакет_НаСервере("ТестовыйНаборДляЗагрузчикаФС").Записать(ФайлСТестами1.ПолноеИмя);
	
	ФайлСТестами2 = НовыйВременныйФайл(".epf");
	ПолучитьМакет_НаСервере("ТестовыйНаборДляЗагрузчикаФС").Записать(ФайлСТестами2.ПолноеИмя);
	
	ПутьКНесколькимФайлам = ФайлСТестами1.ПолноеИмя + Символы.ПС + ФайлСТестами2.ПолноеИмя;
	
	ДеревоТестов = ЗагрузчикФайла.Загрузить(КонтекстЯдра, ПутьКНесколькимФайлам);
	
	Утверждения.ПроверитьТип(ДеревоТестов, "Структура", "ДеревоТестов");
	Утверждения.ПроверитьРавенство(ДеревоТестов.Строки.Количество(), 2, "Узлы верхнего уровня");
	
	Контейнер = ДеревоТестов.Строки[0];
	ПроверитьКонтейнер(Контейнер, ФайлСТестами1);
	
	Контейнер = ДеревоТестов.Строки[1];
	ПроверитьКонтейнер(Контейнер, ФайлСТестами2);
КонецПроцедуры
// } Loader interface
