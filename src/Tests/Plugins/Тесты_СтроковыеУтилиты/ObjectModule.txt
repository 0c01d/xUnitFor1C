Перем КонтекстЯдра;
Перем Ожидаем;
Перем СтроковыеУтилиты;

//{ интерфейс тестирования

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	СтроковыеУтилиты = КонтекстЯдра.Плагин("СтроковыеУтилиты");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	НаборТестов.НачатьГруппу("Функции парсинга текста и подстановки параметров", Ложь);
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ВставитьПараметрыВСтроку", , "Проверка работы функции ВставитьПараметрыВСтроку");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ИзвлечьТекстИзHTML", , "Проверка работы функции ИзвлечьТекстИзHTML");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_НайтиСимволСКонца", , "Проверка работы функции НайтиСимволСКонца");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтроку", , "Проверка работы функции ПодставитьПараметрыВСтроку");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм", , "Проверка работы функции ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтрокуИзМассива", , "Проверка работы функции ПодставитьПараметрыВСтрокуИзМассива");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПолучитьПараметрыИзСтроки", , "Проверка работы функции ПолучитьПараметрыИзСтроки");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_РазложитьСтрокуВМассивПодстрок", , "Проверка работы функции РазложитьСтрокуВМассивПодстрок");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_РазложитьСтрокуВМассивСлов", , "Проверка работы функции РазложитьСтрокуВМассивСлов");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_СтрокаИзМассиваПодстрок", , "Проверка работы функции СтрокаИзМассиваПодстрок");
	
	НаборТестов.НачатьГруппу("Функции преобразования текста и символов", Ложь);
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ДополнитьСтроку", , "Проверка работы функции ДополнитьСтроку");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ЗаменитьОдниСимволыДругими", , "Проверка работы функции ЗаменитьОдниСимволыДругими");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПреобразоватьЦифруВРимскуюНотацию", , "Проверка работы функции ПреобразоватьЦифруВРимскуюНотацию");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПреобразоватьЧислоВРимскуюНотацию", , "Проверка работы функции ПреобразоватьЧислоВРимскуюНотацию");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПреобразоватьЧислоВАрабскуюНотацию", , "Проверка работы функции ПреобразоватьЧислоВАрабскуюНотацию");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_СократитьДвойныеКавычки", , "Проверка работы функции СократитьДвойныеКавычки");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_СтрокаВЧисло", , "Проверка работы функции СтрокаВЧисло");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_СтрокаЛатиницей", , "Проверка работы функции СтрокаЛатиницей");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_СформироватьСтрокуСимволов", , "Проверка работы функции СформироватьСтрокуСимволов");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_УдалитьПовторяющиесяСимволы", , "Проверка работы функции УдалитьПовторяющиесяСимволы");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_УдалитьПоследнийСимволВСтроке", , "Проверка работы функции УдалитьПоследнийСимволВСтроке");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ФорматированнаяСтрока", , "Проверка работы функции ФорматированнаяСтрока");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ЧислоЦифрамиПредметИсчисленияПрописью", , "Проверка работы функции ЧислоЦифрамиПредметИсчисленияПрописью");
	
	НаборТестов.НачатьГруппу("Функции проверки на соответствие критериям", Ложь);
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ТолькоКириллицаВСтроке", , "Проверка работы функции ТолькоКириллицаВСтроке");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ТолькоЛатиницаВСтроке", , "Проверка работы функции ТолькоЛатиницаВСтроке");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ТолькоЦифрыВСтроке", , "Проверка работы функции ТолькоЦифрыВСтроке");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ЭтоРазделительСлов", , "Проверка работы функции ЭтоРазделительСлов");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ЭтоУникальныйИдентификатор", , "Проверка работы функции ЭтоУникальныйИдентификатор");
	
КонецПроцедуры

//}


//{ блок юнит-тестов - сами тесты

Процедура ТестДолжен_ПроверитьРаботуФункции_ВставитьПараметрыВСтроку() Экспорт

	// Функция должна возвратить массив из 5 элементов, три из которых - пустые.
	РезультатПодстановки = СтроковыеУтилиты.ВставитьПараметрыВСтроку(
		"Здравствуй, [Имя] [Фамилия].", Новый Структура("Фамилия,Имя", "Пупкин", "Вася"));
	
	Ожидаем.Что(РезультатПодстановки).Равно("Здравствуй, Вася Пупкин.");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ИзвлечьТекстИзHTML() Экспорт

	// Результат должен быть от тегов и возвращать неформатированный текст.
	ТекстHTML = 
	"<html>
	|	<body>
	|    	<script type=""text/javascript"">document.write('Hello, World!');</script>
	|		<div><b><u>Неформатированный текст.</u></b></div>
	|	</body>
	|</html>";
	
	РезультатИзвлечения = СтроковыеУтилиты.ИзвлечьТекстИзHTML(ТекстHTML);	
	Ожидаем.Что(РезультатИзвлечения).Равно("Неформатированный текст.");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_НайтиСимволСКонца() Экспорт

	СтрокаСимволов = "й1ц2_й1ц2";
	
	// Функция должна вернуть позицию символа в строке.
	ПозицияСимвола = СтроковыеУтилиты.НайтиСимволСКонца(СтрокаСимволов, "ц");	
	Ожидаем.Что(ПозицияСимвола).Равно(8);
	
	// Функция должна вернуть 0, если строка не позицию символа в строке.
	ПозицияСимвола = СтроковыеУтилиты.НайтиСимволСКонца(СтрокаСимволов, "я");	
	Ожидаем.Что(ПозицияСимвола).Равно(0);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтроку() Экспорт

	РезультатПодстановки = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1 пошел в %2", "Вася", "Зоопарк");
	Ожидаем.Что(РезультатПодстановки).Равно("Вася пошел в Зоопарк");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм() Экспорт

	РезультатПодстановки = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1 пошел в %2", "%username%", "Зоопарк");
	Ожидаем.Что(РезультатПодстановки).Равно("%username% пошел в Зоопарк");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтрокуИзМассива() Экспорт

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("Вася");
	МассивПараметров.Добавить("Зоопарк");

	РезультатПодстановки = СтроковыеУтилиты.ПодставитьПараметрыВСтрокуИзМассива("%1 пошел в %2", МассивПараметров);
	Ожидаем.Что(РезультатПодстановки).Равно("Вася пошел в Зоопарк");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_ПолучитьПараметрыИзСтроки() Экспорт

	ПроверяемыеПараметры = СтроковыеУтилиты.ПолучитьПараметрыИзСтроки("File=""c:\InfoBases\Trade""; Usr=""Director"";");
	Ожидаем.Что(ПроверяемыеПараметры).ИмеетТип("Структура")
		.Что(ПроверяемыеПараметры.Свойство("File")).ЭтоИстина()
		.Что(ПроверяемыеПараметры.File).Равно("c:\InfoBases\Trade");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_РазложитьСтрокуВМассивПодстрок() Экспорт

	// Функция должна вернуть массив из 5 элементов, три из которых - пустые.
	МассивСтрок = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",");
	Ожидаем.Что(МассивСтрок, "Утверждение 1").ИмеетТип("Массив").ИмеетДлину(5);
	
	// Функция должна вернуть массив из двух элементов.
	МассивСтрок = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина);
	Ожидаем.Что(МассивСтрок, "Утверждение 2").ИмеетТип("Массив").ИмеетДлину(2);
	
	// Функция должна вернуть пустой массив.
	МассивСтрок = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок("");
	Ожидаем.Что(МассивСтрок, "Утверждение 3").ИмеетТип("Массив").ИмеетДлину(0);
	
	// Функция должна вернуть массив с одним пустым элементом.
	МассивСтрок = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок("",, Ложь);
	Ожидаем.Что(МассивСтрок, "Утверждение 4").ИмеетТип("Массив").ИмеетДлину(1);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_РазложитьСтрокуВМассивСлов() Экспорт

	// Функция должна вернуть массив значений: "один", "два2_", "три".
	МассивСлов = СтроковыеУтилиты.РазложитьСтрокуВМассивСлов("один-@#два2_!три");
	Ожидаем.Что(МассивСлов, "Утверждение 1").ИмеетТип("Массив").ИмеетДлину(3);
	Ожидаем.Что(МассивСлов[0], "Утверждение 1, слово 1").Равно("один");
	Ожидаем.Что(МассивСлов[1], "Утверждение 1, слово 2").Равно("два2_");
	
	// Функция должна вернуть массив значений: "один-", "два2", "три".
	МассивСлов = СтроковыеУтилиты.РазложитьСтрокуВМассивСлов("один-@#два2_!три", "#@!_");
	Ожидаем.Что(МассивСлов, "Утверждение 2").ИмеетТип("Массив").ИмеетДлину(3);
	Ожидаем.Что(МассивСлов[0], "Утверждение 2, слово 1").Равно("один-");
	Ожидаем.Что(МассивСлов[1], "Утверждение 2, слово 2").Равно("два2");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуФункции_СтрокаИзМассиваПодстрок() Экспорт

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("Вася");
	МассивСтрок.Добавить("пошел в");
	МассивСтрок.Добавить("Зоопарк.");
	
	// Функция должна объединить строки из массива в строку с разделителями
	РезультатСоединения = СтроковыеУтилиты.СтрокаИзМассиваПодстрок(МассивСтрок, " ");
	Ожидаем.Что(РезультатСоединения).Равно("Вася пошел в Зоопарк.");
	
КонецПроцедуры

//}
