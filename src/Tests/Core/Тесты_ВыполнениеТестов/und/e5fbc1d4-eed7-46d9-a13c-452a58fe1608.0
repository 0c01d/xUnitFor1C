{2,
{36,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0},
{0},1,
{19,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0},0,"","",1,
{19,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{8,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},1,"",0,0},"&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;

&НаКлиенте
Перем ЭтоЗначениеЗаполняетсяПередЗапускомТеста;
&НаКлиенте
Перем ЭтоЗначениеЗаполняетсяПослеЗапускаТеста;
&НаКлиенте
Перем ТекстИсключенияПадающегоТеста;

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин(""УтвержденияBDD"");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокТестов() Экспорт
	ВсеТесты = Новый Массив;
	
	// Выполнение тестов
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьВызов_ПередЗапускомТеста"");
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьРезультатТестированияУспешныйМетода"");
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьРезультатТестированияПадающегоМетода"");
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьРезультатТестированияОтсутствующегоМетода"");
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьВызов_ПослеЗапускаТеста"");
	
	// Фильтрация
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьВыборочныйЗапускТестов_ФильтрЭлементов"");
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьВыборочныйЗапускТестов_ФильтрКонтейнеров"");
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьВыборочныйЗапускТестов_СмешанныйФильтр"");
	
	// Статистика
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьВРезультатеТестирования_ЗаполнениеСтатистики"");
	
	// Тесты с параметрами
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьВыполнениеТеста_ОдинПараметр"");
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьВыполнениеТеста_НесколькоПараметров"");
	
	// Выполнение тестов в случайном порядке
	ВсеТесты.Добавить(""ТестДолжен_Проверить_ЧтоПоУмолчанию_ТестыВыполняютсяВСлучайномПорядке"");
	ВсеТесты.Добавить(""ТестДолжен_Проверить_ЧтоТестыВыполняютсяСтрогоПоПорядку"");
	
	Возврат ВсеТесты;
КонецФункции

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	ЭтоЗначениеЗаполняетсяПередЗапускомТеста = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	ЭтоЗначениеЗаполняетсяПослеЗапускаТеста = Истина;
КонецПроцедуры

// { Выполнение тестов
&НаКлиенте
Процедура ТестДолжен_ПроверитьВызов_ПередЗапускомТеста() Экспорт
	Ожидаем.Что(ЭтоЗначениеЗаполняетсяПередЗапускомТеста).ЭтоИстина();
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРезультатТестированияУспешныйМетода() Экспорт
	ДанныеУспешногоТеста = КонтекстЯдра.Плагин(""ПостроительДереваТестов"").СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	РезультатТестирования = КонтекстЯдра.ВыполнитьТестовыйМетодНаКлиенте(ЭтаФорма, ДанныеУспешногоТеста);
	
	Ожидаем.Что(РезультатТестирования, ""РезультатТестирования"").ИмеетТип(""Структура"");
	Ожидаем.Что(РезультатТестирования.Путь, ""РезультатТестирования.Путь"").Равно(ДанныеУспешногоТеста.Путь);
	Ожидаем.Что(РезультатТестирования.ИмяМетода, ""РезультатТестирования.ИмяМетода"").Равно(ДанныеУспешногоТеста.ИмяМетода);
	Ожидаем.Что(РезультатТестирования.Состояние, ""РезультатТестирования.Состояние"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТестирования.Сообщение, ""РезультатТестирования.Сообщение"").Равно("""");
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРезультатТестированияПадающегоМетода() Экспорт
	ТекстИсключенияПадающегоТеста = ""КАБУМ!!!"";
	ДанныеПадающегоТеста = КонтекстЯдра.Плагин(""ПостроительДереваТестов"").СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""ПадающийМетод"");
	РезультатТестирования = КонтекстЯдра.ВыполнитьТестовыйМетодНаКлиенте(ЭтаФорма, ДанныеПадающегоТеста);
	
	Ожидаем.Что(РезультатТестирования, ""РезультатТестирования"").ИмеетТип(""Структура"");
	Ожидаем.Что(РезультатТестирования.Путь, ""РезультатТестирования.Путь"").Равно(ДанныеПадающегоТеста.Путь);
	Ожидаем.Что(РезультатТестирования.ИмяМетода, ""РезультатТестирования.ИмяМетода"").Равно(ДанныеПадающегоТеста.ИмяМетода);
	Ожидаем.Что(РезультатТестирования.Состояние, ""РезультатТестирования.Состояние"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Сломан);
	Ожидаем.Что(РезультатТестирования.Сообщение, ""РезультатТестирования.Сообщение"").Содержит(ТекстИсключенияПадающегоТеста);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРезультатТестированияОтсутствующегоМетода() Экспорт
	ДанныеОтсутствующегоТеста = КонтекстЯдра.Плагин(""ПостроительДереваТестов"").СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""ОтсутствующийМетод"");
	РезультатТестирования = КонтекстЯдра.ВыполнитьТестовыйМетодНаКлиенте(ЭтаФорма, ДанныеОтсутствующегоТеста);
	
	Ожидаем.Что(РезультатТестирования, ""РезультатТестирования"").ИмеетТип(""Структура"");
	Ожидаем.Что(РезультатТестирования.Путь, ""РезультатТестирования.Путь"").Равно(ДанныеОтсутствующегоТеста.Путь);
	Ожидаем.Что(РезультатТестирования.ИмяМетода, ""РезультатТестирования.ИмяМетода"").Равно(ДанныеОтсутствующегоТеста.ИмяМетода);
	Ожидаем.Что(РезультатТестирования.Состояние, ""РезультатТестирования.Состояние"").Равно(КонтекстЯдра.Объект.СостоянияТестов.НеРеализован);
	Ожидаем.Что(РезультатТестирования.Сообщение, ""РезультатТестирования.Сообщение"").Содержит(ДанныеОтсутствующегоТеста.ИмяМетода);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьВызов_ПослеЗапускаТеста() Экспорт
	ДанныеУспешногоТеста = КонтекстЯдра.Плагин(""ПостроительДереваТестов"").СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	РезультатТестирования = КонтекстЯдра.ВыполнитьТестовыйМетодНаКлиенте(ЭтаФорма, ДанныеУспешногоТеста);
	
	Ожидаем.Что(ЭтоЗначениеЗаполняетсяПослеЗапускаТеста).ЭтоИстина();
КонецПроцедуры
// } Выполнение тестов

// { Фильтрация
&НаКлиенте
Процедура ТестДолжен_ПроверитьВыборочныйЗапускТестов_ФильтрЭлементов() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин(""ПостроительДереваТестов"");
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	Элемент3 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер(""Контейнер"");
	Контейнер.Строки.Добавить(Элемент1);
	Контейнер.Строки.Добавить(Элемент2);
	Контейнер.Строки.Добавить(Элемент3);
	
	Фильтр = Новый Массив;
	Фильтр.Добавить(Элемент2.Ключ);
	Фильтр.Добавить(Элемент3.Ключ);
	
	Ожидаем.Что(КонтекстЯдра.ПолучитьКоличествоТестовыхМетодов(Контейнер, Фильтр), ""Общее количество тестовых методов"").Равно(Фильтр.Количество());
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Контейнер, Фильтр);
	
	Ожидаем.Что(РезультатТестирования.Состояние, ""Контейнер"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТестирования.Строки.Количество(), ""Количество тестовых методов"").Равно(Фильтр.Количество());
	
	РезультатТеста_Элемент1 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Элемент1.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент1, ""РезультатТеста_Элемент1"").ЭтоНеопределено();
	
	РезультатТеста_Элемент2 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Элемент2.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент2.Ключ, ""Тест2.Ключ"").Равно(Элемент2.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент2.Состояние, ""Тест2 Пройден"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
	
	РезультатТеста_Элемент3 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Элемент3.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент3.Ключ, ""Тест3.Ключ"").Равно(Элемент3.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент3.Состояние, ""Тест3 Пройден"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьВыборочныйЗапускТестов_ФильтрКонтейнеров() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин(""ПостроительДереваТестов"");
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	Элемент3 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	
	Контейнер1 = ПостроительДереваТестов.СоздатьКонтейнер(""Контейнер1"");
	Контейнер1.Строки.Добавить(Элемент1);
	
	Контейнер2 = ПостроительДереваТестов.СоздатьКонтейнер(""Контейнер2"");
	Контейнер2.Строки.Добавить(Элемент2);
	
	Контейнер3 = ПостроительДереваТестов.СоздатьКонтейнер(""Контейнер3"");
	Контейнер3.Строки.Добавить(Элемент3);
	
	Корень = ПостроительДереваТестов.СоздатьКонтейнер(""Корень"");
	Корень.Строки.Добавить(Контейнер1);
	Корень.Строки.Добавить(Контейнер2);
	Корень.Строки.Добавить(Контейнер3);
	
	Фильтр = Новый Массив;
	Фильтр.Добавить(Контейнер2.Ключ);
	Фильтр.Добавить(Контейнер3.Ключ);
	
	Ожидаем.Что(КонтекстЯдра.ПолучитьКоличествоТестовыхМетодов(Корень, Фильтр), ""Общее количество тестовых методов"").Равно(2);
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Корень, Фильтр);
	
	Ожидаем.Что(РезультатТестирования.Ключ, ""Корень.Ключ"").Равно(Корень.Ключ);
	Ожидаем.Что(РезультатТестирования.Состояние, ""Корень.Состояние"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТестирования.Строки.Количество(), ""Количество дочерних узлов"").Равно(Фильтр.Количество());
	
	РезультатТеста_Контейнер1 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Контейнер1.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер1, ""РезультатТеста_Контейнер1"").ЭтоНеопределено();
	
	РезультатТеста_Контейнер2 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Контейнер2.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер2.Ключ, ""Контейнер2.Ключ"").Равно(Контейнер2.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер2.Состояние, ""Контейнер2.Состояние"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТеста_Контейнер2.Строки[0].Ключ, ""Контейнер2.Элемент2.Ключ"").Равно(Элемент2.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер2.Строки[0].Состояние, ""Контейнер2.Элемент2.Состояние"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
	
	РезультатТеста_Контейнер3 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Контейнер3.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер3.Ключ, ""Контейнер3.Ключ"").Равно(Контейнер3.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер3.Состояние, ""Контейнер2.Состояние"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТеста_Контейнер3.Строки[0].Ключ, ""Контейнер3.Элемент3.Ключ"").Равно(Элемент3.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер3.Строки[0].Состояние, ""Контейнер3.Элемент3.Состояние"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьВыборочныйЗапускТестов_СмешанныйФильтр() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин(""ПостроительДереваТестов"");
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	Элемент3 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	
	Контейнер1 = ПостроительДереваТестов.СоздатьКонтейнер(""Контейнер1"");
	Контейнер1.Строки.Добавить(Элемент1);
	Контейнер1.Строки.Добавить(Элемент2);
	
	Контейнер2 = ПостроительДереваТестов.СоздатьКонтейнер(""Контейнер2"");
	Контейнер2.Строки.Добавить(Элемент3);
	
	Корень = ПостроительДереваТестов.СоздатьКонтейнер(""Корень"");
	Корень.Строки.Добавить(Контейнер1);
	Корень.Строки.Добавить(Контейнер2);
	
	Фильтр = Новый Массив;
	Фильтр.Добавить(Элемент2.Ключ);
	Фильтр.Добавить(Контейнер2.Ключ);
	
	Ожидаем.Что(КонтекстЯдра.ПолучитьКоличествоТестовыхМетодов(Корень, Фильтр), ""Общее количество тестовых методов"").Равно(2);
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Корень, Фильтр);
	
	Ожидаем.Что(РезультатТестирования.Ключ, ""Корень.Ключ"").Равно(Корень.Ключ);
	Ожидаем.Что(РезультатТестирования.Состояние, ""Корень.Состояние"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТестирования.Строки.Количество(), ""Количество дочерних узлов"").Равно(2);
	
	РезультатТеста_Контейнер1 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Контейнер1.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер1.Ключ, ""Контейнер1.Ключ"").Равно(Контейнер1.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер1.Состояние, ""Контейнер1.Состояние"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТеста_Контейнер1.Строки.Количество(), ""Контейнер1 количество дочерних узлов"").Равно(1);
	РезультатТеста_Элемент1 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТеста_Контейнер1, Элемент1.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент1, ""РезультатТеста_Элемент1"").ЭтоНеопределено();
	РезультатТеста_Элемент2 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТеста_Контейнер1, Элемент2.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент2.Ключ, ""Контейнер1.Элемент2.Ключ"").Равно(Элемент2.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент2.Состояние, ""Контейнер1.Элемент2.Состояние"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
	
	РезультатТеста_Контейнер2 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Контейнер2.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер2.Ключ, ""Контейнер2.Ключ"").Равно(Контейнер2.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер2.Состояние, ""Контейнер2.Состояние"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
	РезультатТеста_Элемент3 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТеста_Контейнер2, Элемент3.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент3.Ключ, ""Контейнер2.Элемент3.Ключ"").Равно(Элемент3.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент3.Состояние, ""Контейнер2.Элемент3.Состояние"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
КонецПроцедуры
// } Фильтрация

// { Статистика
&НаКлиенте
Процедура ТестДолжен_ПроверитьВРезультатеТестирования_ЗаполнениеСтатистики() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин(""ПостроительДереваТестов"");
	УспешныйЭлемент = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	ПадающийЭлемент = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""ПадающийМетод"");
	ОтсутствующийЭлемент = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""ОтсутствующийМетод"");
	
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер(""Контейнер"");
	Контейнер.Строки.Добавить(УспешныйЭлемент);
	Контейнер.Строки.Добавить(ПадающийЭлемент);
	Контейнер.Строки.Добавить(ОтсутствующийЭлемент);
	
	Ожидаем.Что(КонтекстЯдра.ПолучитьКоличествоТестовыхМетодов(Контейнер), ""Общее количество тестовых методов"").Равно(Контейнер.Строки.Количество());
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Контейнер);
	
	Ожидаем.Что(РезультатТестирования.КоличествоТестов).Равно(Контейнер.Строки.Количество());
	Ожидаем.Что(РезультатТестирования.КоличествоСломаныхТестов).Равно(1);
	Ожидаем.Что(РезультатТестирования.КоличествоНеРеализованныхТестов).Равно(1);
	Ожидаем.Что(РезультатТестирования.ВремяВыполнения).Существует();
КонецПроцедуры
// } Статистика

// { Тесты с параметрами
&НаКлиенте
Процедура ТестДолжен_ПроверитьВыполнениеТеста_ОдинПараметр() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин(""ПостроительДереваТестов"");
	
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""ТестСложенияСОднимПараметром"");
	Элемент1.Параметры.Добавить(Новый Структура(""Значение1, Значение2, Результат"", 1, 5, 6));
	
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""ТестСложенияСОднимПараметром"");
	Элемент2.Параметры.Добавить(Новый Структура(""Значение1, Значение2, Результат"", ""Раз"", ""-Два"", ""Раз-Два""));
	
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер(""Контейнер"");
	Контейнер.Строки.Добавить(Элемент1);
	Контейнер.Строки.Добавить(Элемент2);
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Контейнер);
	
	Ожидаем.Что(РезультатТестирования.Состояние, ""Состояние всех результатов тестирования"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТестирования.КоличествоТестов).Равно(Контейнер.Строки.Количество());
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьВыполнениеТеста_НесколькоПараметров() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин(""ПостроительДереваТестов"");
	
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""ТестСложенияСНесколькимиПараметрами"");
	Элемент1.Параметры.Добавить(1);
	Элемент1.Параметры.Добавить(5);
	Элемент1.Параметры.Добавить(6);
	
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""ТестСложенияСНесколькимиПараметрами"");
	Элемент2.Параметры.Добавить(""Раз"");
	Элемент2.Параметры.Добавить(""-Два"");
	Элемент2.Параметры.Добавить(""Раз-Два"");
	
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер(""Контейнер"");
	Контейнер.Строки.Добавить(Элемент1);
	Контейнер.Строки.Добавить(Элемент2);
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Контейнер);
	
	Ожидаем.Что(РезультатТестирования.Состояние, ""Состояние всех результатов тестирования"").Равно(КонтекстЯдра.Объект.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТестирования.КоличествоТестов).Равно(Контейнер.Строки.Количество());
КонецПроцедуры
// } Тесты с параметрами

// { Выполнение тестов в случайном порядке
&НаКлиенте
Процедура ТестДолжен_Проверить_ЧтоПоУмолчанию_ТестыВыполняютсяВСлучайномПорядке() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин(""ПостроительДереваТестов"");
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	Элемент3 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер(""Контейнер"");
	Контейнер.Строки.Добавить(Элемент1);
	Контейнер.Строки.Добавить(Элемент2);
	Контейнер.Строки.Добавить(Элемент3);
	
	МаксимальноеКоличествоПопыток = 100;
	Для Сч = 1 По МаксимальноеКоличествоПопыток Цикл
		РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Контейнер);
		Если РезультатТестирования.Строки[0].Ключ <> Элемент1.Ключ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Ожидаем.Что(Сч, ""Порядок в результатах тестирования должен отличаться от порядка в дереве тестов"").Меньше(МаксимальноеКоличествоПопыток);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_Проверить_ЧтоТестыВыполняютсяСтрогоПоПорядку() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин(""ПостроительДереваТестов"");
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	Элемент3 = ПостроительДереваТестов.СоздатьЭлемент(ПолучитьИспользуемоеИмяФайла(), ""УспешныйМетод"");
	
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер(""Контейнер"");
	Контейнер.СлучайныйПорядокВыполнения = Ложь;
	Контейнер.Строки.Добавить(Элемент1);
	Контейнер.Строки.Добавить(Элемент2);
	Контейнер.Строки.Добавить(Элемент3);
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Контейнер);
	
	Ожидаем.Что(РезультатТестирования.Строки[0].Ключ, ""Элемент1"").Равно(Элемент1.Ключ);
	Ожидаем.Что(РезультатТестирования.Строки[1].Ключ, ""Элемент2"").Равно(Элемент2.Ключ);
	Ожидаем.Что(РезультатТестирования.Строки[2].Ключ, ""Элемент3"").Равно(Элемент3.Ключ);
КонецПроцедуры
// } Выполнение тестов в случайном порядке

// Методы нужные для тестов
&НаКлиенте
Функция ЗагрузчикЗаглушка()
	Возврат ЭтаФорма;
КонецФункции

&НаКлиенте
Функция ПолучитьКонтекстПоПути(КонтекстЯдра, Путь) Экспорт
	Возврат ЭтаФорма;
КонецФункции

&НаКлиенте
Процедура УспешныйМетод() Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ПадающийМетод() Экспорт
	ВызватьИсключение ТекстИсключенияПадающегоТеста;
КонецПроцедуры

&НаКлиенте
Процедура ТестСложенияСОднимПараметром(Параметры) Экспорт
	Ожидаем.Что(Параметры.Значение1 + Параметры.Значение2).Равно(Параметры.Результат);
КонецПроцедуры

&НаКлиенте
Процедура ТестСложенияСНесколькимиПараметрами(Слагаемое1, Слагаемое2, Результат) Экспорт
	Ожидаем.Что(Слагаемое1 + Слагаемое2).Равно(Результат);
КонецПроцедуры

// { Helpers
&НаСервере
Функция ПолучитьИспользуемоеИмяФайла()
	ОбъектНаСервере = РеквизитФормыВЗначение(""Объект"");
	
	Возврат ОбъектНаСервере.ИспользуемоеИмяФайла;
КонецФункции
// } Helpers
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",a1dae8d7-6476-46f6-a931-9ebaa399f991}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0}
}