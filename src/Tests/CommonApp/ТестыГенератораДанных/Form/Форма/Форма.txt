&НаКлиенте
Перем ЮТест;  // для тестирования

//{ основная процедура для юнит-тестирования xUnitFor1C
&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮТест = ЮнитТестирование;
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_ПодключитьЮТестИзТестаМодуляФормыВТестеМодуляОбработки");

	Возврат ВсеТесты;	
КонецФункции
//}

//{ блок юнит-тестов - сами тесты

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПодключитьЮТестИзТестаМодуляФормыВТестеМодуляОбработки() Экспорт
	путьФайл_юТест = ЮТест.МетаданныеИмя();
	//Сообщить("путьФайл_юТест = <"+?(путьФайл_юТест = Неопределено, "Неопределено", путьФайл_юТест)+">");
	//Файл_ЮТест = Новый Файл(путьФайл_юТест);
	//
	//Сообщить("ТипЗнч(ЮТест.Объект) = <"+?(ТипЗнч(ЮТест.Объект) = Неопределено, "Неопределено", ТипЗнч(ЮТест.Объект))+">");
	
	ОбработатьОбъектФормыЮТестНаСервере(путьФайл_юТест);
	
	ЮТест.ПроверитьРавенство(1, ТестовыеДанныеУФ.Количество(), "ТестовыеДанныеУФ.Количество()");
	Строка = ТестовыеДанныеУФ[0];
	ЮТест.ПроверитьРавенство("ПользовательИнформационнойБазы", Строка.Ключ, "Строка.Ключ УФ");
	ЮТест.ПроверитьРавенство("ТестИмя", СокрЛП(Строка.Значение[0]), "Строка.Значение УФ");
КонецПроцедуры

&НаСервере
Процедура ОбработатьОбъектФормыЮТестНаСервере(Знач ЮТестПуть)
	
	ЮТест = ВнешниеОбработки.Создать(ЮТестПуть);
	//Сообщить("ТипЗнч(ЮТестОбъект) = <"+?(ТипЗнч(ЮТестОбъект) = Неопределено, "Неопределено", ТипЗнч(ЮТестОбъект))+">");
	//ЮТестОбъект.Проверить(Ложь, "специально передали Ложь");
	
	ИмяМакета = "СозданиеОдногоПользователяИБ";
	//ИмяМакета = "СозданиеОдногоПользователяИБ_УФ";
	
	ОсновнойОбъект = Объект();
	МассивИменПользователей = МассивИменПользователейПоУмолчанию();
	Для каждого ИмяПользователя Из МассивИменПользователей Цикл
		УдалитьПользователяИБ_ЕслиОнСуществует(ИмяПользователя);
	КонецЦикла;
	
	Макет = ОсновнойОбъект.ПолучитьМакет(ИмяМакета);
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени("ТестИмя");
	ЮТест.ПроверитьНеравенство(лПользователь, Неопределено, "лПользователь");
	
	юТест.УдалитьСозданныеДанные(ТестовыеДанные);
	
	ТестовыеДанныеУФ.Очистить();
	ЮТест.ПроверитьРавенство(0, ТестовыеДанныеУФ.Количество(), "ТестовыеДанныеУФ.Количество()");

	ТестовыеДанныеДляУФ = Новый ТаблицаЗначений;
	Колонка = ТестовыеДанныеДляУФ.Колонки.Добавить("Ключ");
	Колонка = ТестовыеДанныеДляУФ.Колонки.Добавить("Значение");
	//Строка = ТестовыеДанныеДляУФ.Добавить();
	//Строка.Значение = 1;
	//ТестовыеДанныеДляУФСписок = Новый СписокЗначений;
	//ТестовыеДанныеДляУФ.Добавить(1);
	
	//ТестовыеДанныеУФСписок.Очистить();
	Для каждого ключЗначение Из ТестовыеДанные Цикл
		СписокВрем = Новый СписокЗначений;
		Строка = ТестовыеДанныеДляУФ.Добавить();
		Если ТипЗнч(ключЗначение.Значение) = Тип("ПользовательИнформационнойБазы") Тогда
			//описаниеПользователяИБ = Новый Структура("ПользовательИнформационнойБазы", ключЗначение.Значение.Имя);
			//описаниеПользователяИБ = Новый СписокЗначений;
			//описаниеПользователяИБ.Добавить("ПользовательИнформационнойБазы", );
			СписокВрем.Добавить(ключЗначение.Значение.Имя);
			//ТестовыеДанныеДляУФСписок.Добавить(описаниеПользователяИБ, ключЗначение.Ключ);
			////ТестовыеДанныеДляУФСписок.Вставить(ключЗначение.Ключ, описаниеПользователяИБ);
			
			//Строка = ТестовыеДанныеДляУФ.Добавить();
			Строка.Ключ = "ПользовательИнформационнойБазы"; //ключЗначение.Ключ;
			Строка.Значение = СписокВрем; //ключЗначение.Значение.Имя;
		Иначе
			//ТестовыеДанныеДляУФСписок.Добавить(ключЗначение.Значение, ключЗначение.Ключ);
			////ТестовыеДанныеДляУФ.Вставить(ключЗначение.Ключ, ключЗначение.Значение);
			//Строка = ТестовыеДанныеДляУФ.Добавить();
			Строка.Ключ = ключЗначение.Ключ;
			СписокВрем.Добавить(ключЗначение.Значение);
			//Строка.Значение = ключЗначение.Значение;
		КонецЕсли;
		Строка.Значение = СписокВрем; //ключЗначение.Значение.Имя;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ТестовыеДанныеДляУФ, ТестовыеДанныеУФ);
	//Сообщить("ТипЗнч(ТестовыеДанныеУФСписок) = <"+?(ТипЗнч(ТестовыеДанныеУФСписок) = Неопределено, "Неопределено", ТипЗнч(ТестовыеДанныеУФСписок))+">"); 
	//ЗначениеВДанныеФормы(ТестовыеДанныеДляУФСписок, ТестовыеДанныеУФСписок);
	
	ЮТест.ПроверитьРавенство(1, ТестовыеДанныеУФ.Количество(), "ТестовыеДанныеУФ.Количество()");
	Строка = ТестовыеДанныеУФ[0];
	ЮТест.ПроверитьРавенство("ПользовательИнформационнойБазы", Строка.Ключ, "Строка.Ключ");
	ЮТест.ПроверитьРавенство("ТестИмя", СокрЛП(Строка.Значение[0]), "Строка.Значение");
КонецПроцедуры

Функция МассивИменПользователейПоУмолчанию()
	Рез = Новый Массив();
	Рез.Добавить("ТестИмя");
	//Рез.Добавить("ТестИмя2");// должно совпадать с макетом;
	Возврат Рез;
КонецФункции

&НаСервере
Функция Объект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

Процедура УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя) Экспорт

	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Если лПользователь <> Неопределено Тогда
		лПользователь.Удалить();
	КонецЕсли;

КонецПроцедуры


//} конец блока юнит-тестов
