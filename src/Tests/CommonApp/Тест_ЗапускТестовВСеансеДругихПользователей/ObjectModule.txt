Перем	Коллекция_ДанныхАвтоОбъектовПриложения1С;
Перем	ТекущийПользователь;
Перем	УпавшиеТесты;
Перем	КоличествоЗагруженныхТестов;

Перем	ТестовыеДанные;

Перем ЮТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
		//ПутьЗапускателяТестов = ПутьЗапускателяТестов();
		////ПутьТестов = "C:\Projects\GitHub\xUnitFor1C\Tests\CommonApp\Тест_ПараметрыТестов.epf";
		//ПутьТестов = "C:\Projects\GitHub\xUnitFor1C\Tests\CommonApp\тесты_ОткрытиеФормКонфигурации.epf";

		//лИмяПользователя = ИмяПользователяПоУмолчанию();
		//УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя);
		//
		//Макет = ПолучитьМакет("СозданиеОдногоПользователяИБ");
		//ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
		//Для каждого КлючЗначение Из ТестовыеДанные Цикл
		//	Пользователь = КлючЗначение.Значение;
		//	ПараметрыЗапускаТестовВНовомСеансе = Новый Структура();
		//	ПараметрыЗапускаТестовВНовомСеансе.Вставить("Пользователь", Пользователь);
		//	ПараметрыЗапускаТестовВНовомСеансе.Вставить("ПутьЗапускателяТестов", ПутьЗапускателяТестов);
		//	ПараметрыЗапускаТестовВНовомСеансе.Вставить("ПутьТестов", ПутьТестов);
		//	
		//	ПараметрыТеста = Новый Структура("ПредставлениеТеста,ИмяТеста,Параметр", 
		//		"Тест пользователя "+лИмяПользователя,
		//		"ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application_2",
		//		ПараметрыЗапускаТестовВНовомСеансе);
		//	ВсеТесты.Добавить(ПараметрыТеста);
		//КонецЦикла;
		//УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя);

	Настройка = Новый Структура("ИмяМакета,ЗапускатьТолстыйКлиент", "СозданиеОдногоПользователяИБ", Истина);
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application", 
		"Запустить тесты в отдельном сеансе пользователя (Обычное приложение)", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
	
	Настройка = Новый Структура("ИмяМакета,ЗапускатьТолстыйКлиент", "СозданиеОдногоПользователяИБ_УФ", Истина);
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application", 
		"Запустить тесты в отдельном сеансе пользователя (Упр.приложение толстый клиент)", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
	
	Настройка = Новый Структура("ИмяМакета,ЗапускатьТолстыйКлиент", "СозданиеОдногоПользователяИБ_УФ", Ложь);
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application", 
		"Запустить тесты в отдельном сеансе пользователя (тонкий клиент Упр.приложение)", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ТестДолжен_ЗапуститьТестыОткрытияФормКонфигурации_ВОтдельномСеансеПользователя", 
		"Запустить тесты открытия всех форм конфигурации в отдельном сеансе пользователя (Обычное приложение)", "СозданиеНесколькихПользователейИБ");
	ВсеТесты.Добавить(ПараметрыТеста);

	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ТестДолжен_ЗапуститьТестыОткрытияФормКонфигурации_ВОтдельномСеансеПользователя", 
		"Запустить тесты открытия всех форм конфигурации в отдельном сеансе пользователя (Упр.приложение толстый клиент)", "СозданиеНесколькихПользователейИБ_УФ");
	ВсеТесты.Добавить(ПараметрыТеста);
	
	Возврат ВсеТесты;	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	УпавшиеТесты = Неопределено;
	КоличествоЗагруженныхТестов = 0;
	Коллекция_ДанныхАвтоОбъектовПриложения1С = Новый Массив;
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	ЮТест.УдалитьСозданныеДанные(ТестовыеДанные);
	УпавшиеТесты = Неопределено;
	Для каждого ДанныеАвтоОбъектаПриложения1С Из Коллекция_ДанныхАвтоОбъектовПриложения1С Цикл
		
		ЗавершитьСеансПользователя(ДанныеАвтоОбъектаПриложения1С.АвтоОбъектПриложения1С, ДанныеАвтоОбъектаПриложения1С.ЗапускательТестов);
		
	КонецЦикла;
	
	Коллекция_ДанныхАвтоОбъектовПриложения1С.Очистить();
	Коллекция_ДанныхАвтоОбъектовПриложения1С = Неопределено;
	ТекущийПользователь = Неопределено;
	ТестовыеДанные = Неопределено;
	КоличествоЗагруженныхТестов = 0;
КонецПроцедуры

Процедура ЗавершитьСеансПользователя(АвтоОбъектПриложения1С, ЗапускательТестов)
	Если ЗапускательТестов <> Неопределено Тогда
		ЗапускательТестов.SetHandlerObject(Неопределено);
		
		ЗапускательТестов = Неопределено;
	КонецЕсли;
	Если АвтоОбъектПриложения1С <> Неопределено Тогда
		АвтоОбъектПриложения1С.ЗавершитьРаботуСистемы(Ложь);
		АвтоОбъектПриложения1С = Неопределено;
	КонецЕсли;
КонецПроцедуры


Процедура ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application(Настройка) Экспорт
	ИмяМакета = Настройка.ИмяМакета;
	ЗапускатьТолстыйКлиент = Настройка.ЗапускатьТолстыйКлиент;
	
	лИмяПользователя = ИмяПользователяПоУмолчанию();
	УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя);
	
	Макет = ПолучитьМакет(ИмяМакета); //"СозданиеОдногоПользователяИБ");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	юТест.ПроверитьТип(ТестовыеДанные.Пользователь1, "ПользовательИнформационнойБазы");
	
	ТекущийПользователь = ТестовыеДанные.Пользователь1;
	
	Если ЗапускатьТолстыйКлиент Тогда
		ПутьТестов = ПутьЗапускателяТестов()+"Tests\CommonApp\Тест_ПараметрыТестов.epf";
	Иначе
		ПутьТестов = ПутьЗапускателяТестов()+"Tests\ManagedApp\Тест_ПараметрыТестов.epf";		
	КонецЕсли;
	//ПутьТестов = ПутьЗапускателяТестов()+"Tests\CommonApp\ТестПримерСломаногоТеста.epf";

	ДанныеТестирования = ВыполнитьТестыДляПользователяВОтдельномСеансе(ТекущийПользователь, ПутьТестов, ЗапускатьТолстыйКлиент);
	МассивУпавшихТестов = ДанныеТестирования.МассивУпавшихТестов;
		
	ДанныеТестовПоПользователям = Новый Соответствие;
	ДанныеТестовПоПользователям.Вставить(ТекущийПользователь, ДанныеТестирования);
	
	ПроверитьПрохождениеТестов(ДанныеТестовПоПользователям);
КонецПроцедуры

Процедура ТестДолжен_ЗапуститьТестыОткрытияФормКонфигурации_ВОтдельномСеансеПользователя(ИмяМакета) Экспорт
	МассивИменПользователей = МассивИменПользователейПоУмолчанию();
	Для каждого ИмяПользователя Из МассивИменПользователей Цикл
		УдалитьПользователяИБ_ЕслиОнСуществует(ИмяПользователя);
	КонецЦикла;
	
	Макет = ПолучитьМакет(ИмяМакета); //"СозданиеНесколькихПользователейИБ");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ПутьТестов = ПутьЗапускателяТестов()+"Tests\CommonApp\тесты_ОткрытиеФормКонфигурации.epf";
	
	ДанныеТестовПоПользователям = Новый Соответствие;
	Для каждого КлючЗначение Из ТестовыеДанные Цикл
		ТекущийПользователь = КлючЗначение.Значение;
		Если ТипЗнч(ТекущийПользователь) <> Тип("ПользовательИнформационнойБазы") Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеТестирования = ВыполнитьТестыДляПользователяВОтдельномСеансе(ТекущийПользователь, ПутьТестов);
		МассивУпавшихТестов = ДанныеТестирования.МассивУпавшихТестов;
		
		Если ДанныеТестирования.КоличествоЗагруженныхТестов <> 0 И МассивУпавшихТестов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ДанныеТестовПоПользователям.Вставить(ТекущийПользователь, ДанныеТестирования);
	КонецЦикла;
	
	ПроверитьПрохождениеТестов(ДанныеТестовПоПользователям);
КонецПроцедуры

Функция ВыполнитьТестыДляПользователяВОтдельномСеансе(ТекущийПользователь, ПутьТестов, ТолстыйКлиент = Истина)
	//Если Не ТолстыйКлиент Тогда
	//	ВызватьИсключение "В режиме Automation тонкого клиента нельзя использовать ВнешниеОбработки. Код AutomationObj.ExternalDataProcessors.Create(ПутьФайла) выдает исключение.";
	//КонецЕсли;
	
	УпавшиеТесты = Новый Массив();
	КоличествоЗагруженныхТестов = 0;
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
		
	СтрокаСоединения = СтрокаСоединения + "Usr=""" + ТекущийПользователь.Имя + """;";
		
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	ИдАвтоОбъектаПриложения1С = "";
	Если Лев(ВерсияПриложения, 3) = "8.2" Тогда
		ИдАвтоОбъектаПриложения1С = "V82";
	ИначеЕсли Лев(ВерсияПриложения, 3) = "8.3" Тогда
		ИдАвтоОбъектаПриложения1С = "V83";
	ИначеЕсли Лев(ВерсияПриложения, 3) = "8.4" Тогда
		ИдАвтоОбъектаПриложения1С = "V84";
	Иначе
		ВызватьИсключение "Версию приложению <"+ВерсияПриложения+"> обрабатывать не умеем";
	КонецЕсли;

	Если Не ТолстыйКлиент Тогда
		ИдАвтоОбъектаПриложения1С = ИдАвтоОбъектаПриложения1С + "C";
	КонецЕсли;
	
	ИдАвтоОбъектаПриложения1С = ИдАвтоОбъектаПриложения1С + ".Application";
	
	АвтоОбъектПриложения1С = new COMObject(ИдАвтоОбъектаПриложения1С);
	
	Успешно = АвтоОбъектПриложения1С.connect(СтрокаСоединения);
		ЮТест.Проверить(Успешно, "АвтоОбъектПриложения1С.connect(СтрокаСоединения)");
	АвтоОбъектПриложения1С.Visible = true;
	
	ДанныеАвтоОбъектовПриложения1С = Новый Структура("АвтоОбъектПриложения1С,ЗапускательТестов", АвтоОбъектПриложения1С, Неопределено);
	Коллекция_ДанныхАвтоОбъектовПриложения1С.Добавить(ДанныеАвтоОбъектовПриложения1С);
	
	ИспользуемоеИмяФайлаЗапускателяТестов = ЮТест.ИспользуемоеИмяФайла;
	//ИспользуемоеИмяФайлаЗапускателяТестов = "C:\Projects\GitHub\xUnitFor1C\xddTestRunner.epf"; //ЮТест.ИспользуемоеИмяФайла
	Если ТолстыйКлиент Тогда
		ЗапускательТестов = АвтоОбъектПриложения1С.ExternalDataProcessors.Create(ИспользуемоеИмяФайлаЗапускателяТестов, Ложь);
		
		//ДанныеАвтоОбъектовПриложения1С.Вставить("ЗапускательТестов", ЗапускательТестов);
		
		ЗапускательТестов.ЗапретИспользованияИнформатора = Истина;
		ЗапускательТестов.SetHandlerObject(ЭтотОбъект);
		ЗапускательТестов.OpenBrowserForm();
		
		//ЗапускательТестов.SetHandlerObject(ЭтотОбъект);
		
		ЗапускательТестов.LoadAllTests(ПутьТестов);

		//Если КоличествоЗагруженныхТестов <> 0 Тогда
		//	ЗапускательТестов.RunAllTests();
		//КонецЕсли;
	Иначе
		//Сообщить("ЮТест.ИспользуемоеИмяФайла = "+ЮТест.ИспользуемоеИмяФайла);
		//ИспользуемоеИмяФайла = "C:\Projects\GitHub\xUnitFor1C\xddTestRunner.epf"; //ЮТест.ИспользуемоеИмяФайла
		
		ИдОбработки_юТест = "xddTestRunner";
		ЗапускательТестов = АвтоОбъектПриложения1С.ОбщийМодульКлиент.ПодключитьНаСервереВнешнююОбработкуОтКлиента(ИспользуемоеИмяФайлаЗапускателяТестов, ИдОбработки_юТест);
			//ЗапускательТестов = АвтоОбъектПриложения1С.ExternalDataProcessors.Create(ЮТест.ИспользуемоеИмяФайла, Ложь);
		//Сообщить(ЗапускательТестов);
		//Сообщить("Тип ЗапускательТестов "+ТипЗнч(ЗапускательТестов));
		
		ЗапускательТестов = АвтоОбъектПриложения1С.ПолучитьФорму("ВнешняяОбработка."+ИдОбработки_юТест+".Форма.УправляемаяФорма");
		//Сообщить("2 Тип ЗапускательТестов "+ТипЗнч(ЗапускательТестов));
		//Сообщить(ЗапускательТестов);
		
		//ДанныеАвтоОбъектовПриложения1С.Вставить("ЗапускательТестов", ЗапускательТестов);
		
		ЗапускательТестов.Пути.Очистить();
		ЗапускательТестов.Пути.Добавить(ПутьТестов);
		
		ЗапускательТестов.ЗапретИспользованияИнформатора = Истина;
		ЗапускательТестов.SetHandlerObject(ЭтотОбъект);
		ЗапускательТестов.OpenBrowserForm(); //ЗапускательТестов.Открыть();
		
		//ЗапускательТестов.LoadAllTests(ПутьТестов);

		////Сообщить("КоличествоЗагруженныхТестов = "+КоличествоЗагруженныхТестов);
		//Если КоличествоЗагруженныхТестов <> 0 Тогда
		//	ЗапускательТестов.RunAllTests();
		//КонецЕсли;
	КонецЕсли;
	ДанныеАвтоОбъектовПриложения1С.Вставить("ЗапускательТестов", ЗапускательТестов);
	
	Если КоличествоЗагруженныхТестов <> 0 Тогда
		ЗапускательТестов.RunAllTests();
	КонецЕсли;
	
	Рез = Новый Структура("МассивУпавшихТестов,КоличествоЗагруженныхТестов", УпавшиеТесты, КоличествоЗагруженныхТестов);
	УпавшиеТесты = Неопределено; // чтоб освободить глобальную переменную
	КоличествоЗагруженныхТестов = 0;
	Возврат Рез;
КонецФункции

Процедура ПроверитьПрохождениеТестов(ДанныеТестовПоПользователям)
	ОбщаяСтрокаОписанияУпавшихТестов = ""+Символы.ПС;
	ОбщееКоличествоУпавшихТестов = 0;
	ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты = 0;
	Для каждого КлючЗначение Из ДанныеТестовПоПользователям Цикл
		ТекущийПользователь = КлючЗначение.Ключ;
		//Сообщить(ТекущийПользователь);
		
		ДанныеТестирования = КлючЗначение.Значение;
		МассивУпавшихТестов = ДанныеТестирования.МассивУпавшихТестов;
			ЮТест.ПроверитьТип(МассивУпавшихТестов, "Массив", "Пользователь <"+ТекущийПользователь.Имя + ": МассивУпавшихТестов");
			
		СтрокаОписанияУпавшихТестов = ""+Символы.ПС;
		
		КоличествоЗагруженныхТестов = ДанныеТестирования.КоличествоЗагруженныхТестов;
		Если КоличествоЗагруженныхТестов = 0 Тогда
			ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты = ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты + 1;
			ОбщаяСтрокаОписанияУпавшихТестов = ОбщаяСтрокаОписанияУпавшихТестов + "У пользователя <"+ТекущийПользователь.Имя + "> не загрузились тесты!"+
				СтрокаОписанияУпавшихТестов;
				Продолжить;
		КонецЕсли;

		ОбщееКоличествоУпавшихТестов = ОбщееКоличествоУпавшихТестов + МассивУпавшихТестов.Количество();
		Для каждого СтрокаДереваТестов Из МассивУпавшихТестов Цикл
			СтрокаОписанияУпавшихТестов = СтрокаОписанияУпавшихТестов + " "+
				//"<"+ТекущийПользователь.Имя + "> : " + СтрокаДереваТестов.Имя +", путь <"+
				": <" + СтрокаДереваТестов.Имя +">, путь <"+
				СтрокаДереваТестов.ПолныйПуть+">" +Символы.ПС;
		КонецЦикла;
		ОбщаяСтрокаОписанияУпавшихТестов = ОбщаяСтрокаОписанияУпавшихТестов + "У пользователя <"+ТекущийПользователь.Имя + "> упали тесты < "+МассивУпавшихТестов.Количество()+" шт.>:"+
			СтрокаОписанияУпавшихТестов;
	КонецЦикла;
	//Если ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты > 0 Тогда
	//	ВызватьИсключение Символы.ПС+"При тестировании разных сеансов пользователей вообще не удалось загрузить тесты. Всего <"+ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты+" пользователей>:"+Символы.ПС+
	//		ОбщаяСтрокаОписанияУпавшихТестов;
	//КонецЕсли;
	Если ОбщееКоличествоУпавшихТестов > 0 Тогда
		ВызватьИсключение Символы.ПС+"При тестировании разных сеансов пользователей упали тесты <"+ОбщееКоличествоУпавшихТестов+" шт.>:"+Символы.ПС+
			ОбщаяСтрокаОписанияУпавшихТестов;
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя) Экспорт

	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Если лПользователь <> Неопределено Тогда
		лПользователь.Удалить();
	КонецЕсли;

КонецПроцедуры

// { обработчики событий xUnitFor1C

Процедура ВывестиСообщение(Сообщение) Экспорт
	Префикс	= "";
	Если ТекущийПользователь <> Неопределено Тогда
		Префикс = "Сообщение от сеанса <"+ТекущийПользователь.Имя + "> : ";
	КонецЕсли;
	Сообщить(Префикс + Сообщение);
КонецПроцедуры

Процедура TestLoaded(Параметр) Экспорт
	Если ТекущийПользователь <> Неопределено Тогда
		Параметр.Имя = "<"+ТекущийПользователь.Имя + "> : " + Параметр.Имя; // +", путь <"+Параметр.ПолныйПуть+">";
	КонецЕсли;
	КоличествоЗагруженныхТестов = КоличествоЗагруженныхТестов + 1;
	//Сообщить("TestLoaded " +Параметр.Имя);
КонецПроцедуры

Процедура TestFailed(Параметр) Экспорт
	//Сообщить("TestFailed " +Параметр.Имя);
	УпавшиеТесты.Добавить(Параметр);
КонецПроцедуры

//Процедура TestPassed(Параметр) Экспорт
//	//Сообщить("TestPassed " +Параметр.Имя);
//КонецПроцедуры

//Процедура TestNotImplemented(Параметр) Экспорт
//	//Сообщить("TestNotImplemented " +Параметр.Имя);
//КонецПроцедуры

// }

Функция ИмяПользователяПоУмолчанию()
	Возврат "ТестИмя"; // должно совпадать с макетом;
КонецФункции

Функция МассивИменПользователейПоУмолчанию()
	Рез = Новый Массив();
	Рез.Добавить(ИмяПользователяПоУмолчанию());
	Рез.Добавить("ТестИмя2");// должно совпадать с макетом;
	Возврат Рез;
КонецФункции

Функция ПутьЗапускателяТестов()
	ПутьЗапускателяТестов = СтрЗаменить(ЮТест.ИспользуемоеИмяФайла, "xddTestRunner.epf", "");
	Возврат ПутьЗапускателяТестов;
КонецФункции
