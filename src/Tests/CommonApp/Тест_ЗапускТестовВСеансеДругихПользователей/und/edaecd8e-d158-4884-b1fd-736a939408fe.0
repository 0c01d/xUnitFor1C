{2,
{28,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0},
{0},1,
{17,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{0,0,1},0,1},0,"","",1,
{17,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,0,1}
},"&НаКлиенте
Перем	УпавшиеТесты;

&НаКлиенте
Перем	ТекущийПользователь;

&НаКлиенте
Перем _тестируем; // для тестирования

&НаКлиенте
Перем юТест;  // для тестирования

//{ основная процедура для юнит-тестирования 1CUnit
&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	Настройка = Новый Структура(""ИмяМакета,ЗапускатьТолстыйКлиент"", ""СозданиеОдногоПользователяИБ_УФ"", Ложь);
	ПараметрыТеста = Новый Структура(""ИмяТеста,ПредставлениеТеста,Параметр"", ""ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application"", 
		""1 Запустить тесты в отдельном сеансе пользователя (тонкий клиент Упр.приложение)"", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
	
	Возврат ВсеТесты;	
КонецФункции
//}

//{ БЛОК ЮНИТ-ТЕСТОВ - сами тесты

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	_тестируем = Истина;
	
	ОбновитьПовторноИспользуемыеЗначения();
	//юТест.ВывестиСообщение(""Перед запуском теста"");
	//НачатьТранзакцию();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	//Если ТранзакцияАктивна() Тогда
	//	ОтменитьТранзакцию();
	//КонецЕсли;
	//юТест.ВывестиСообщение(""После запуска теста"");
	
	_тестируем = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ЗапуститьТестыВОтдельномСеансеПользователяЧерезV82_Application(Настройка) Экспорт
	ИмяМакета = Настройка.ИмяМакета;
	ЗапускатьТолстыйКлиент = Настройка.ЗапускатьТолстыйКлиент;
	
	лИмяПользователя = ИмяПользователяПоУмолчанию();
	УдалитьПользователяИБ_ЕслиОнСуществуетСервер(лИмяПользователя);
	
	Макет = ПолучитьМакетСервер(ИмяМакета);
	юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	//ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	//юТест.ПроверитьТип(ТестовыеДанные.Пользователь1, ""ПользовательИнформационнойБазы"");
	
	ТекущийПользователь = Новый Структура(""Имя"", ИмяПользователяПоУмолчанию()); //ТестовыеДанные.Пользователь1;
	
	ПутьТестов = ПутьЗапускателяТестов()+""Tests\ManagedApp\Тест_ПараметрыТестов.epf"";
	//ПутьТестов = ПутьЗапускателяТестов()+""Tests\CommonApp\ТестПримерСломаногоТеста.epf"";

	ДанныеТестирования = ВыполнитьТестыДляПользователяВОтдельномСеансе(ТекущийПользователь, ПутьТестов, ЗапускатьТолстыйКлиент);
	МассивУпавшихТестов = ДанныеТестирования.МассивУпавшихТестов;
		
	ДанныеТестовПоПользователям = Новый Соответствие;
	ДанныеТестовПоПользователям.Вставить(ТекущийПользователь, ДанныеТестирования);
	
	ПроверитьПрохождениеТестов(ДанныеТестовПоПользователям);
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьТестыДляПользователяВОтдельномСеансе(ТекущийПользователь, ПутьТестов, ТолстыйКлиент = Истина)
	//Если Не ТолстыйКлиент Тогда
	//	ВызватьИсключение ""В режиме Automation тонкого клиента нельзя использовать ВнешниеОбработки. Код AutomationObj.ExternalDataProcessors.Create(ПутьФайла) выдает исключение."";
	//КонецЕсли;
	
	УпавшиеТесты = Новый Массив();
	КоличествоЗагруженныхТестов = 0;
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
		
	СтрокаСоединения = СтрокаСоединения + ""Usr="""""" + ТекущийПользователь.Имя + """""";Pwd=;"";
		
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	ИдАвтоОбъектаПриложения1С = """";
	Если Лев(ВерсияПриложения, 3) = ""8.2"" Тогда
		ИдАвтоОбъектаПриложения1С = ""V82"";
	ИначеЕсли Лев(ВерсияПриложения, 3) = ""8.3"" Тогда
		ИдАвтоОбъектаПриложения1С = ""V83"";
	ИначеЕсли Лев(ВерсияПриложения, 3) = ""8.4"" Тогда
		ИдАвтоОбъектаПриложения1С = ""V84"";
	Иначе
		ВызватьИсключение ""Версию приложению <""+ВерсияПриложения+""> обрабатывать не умеем"";
	КонецЕсли;

	Если Не ТолстыйКлиент Тогда
		ИдАвтоОбъектаПриложения1С = ИдАвтоОбъектаПриложения1С + ""C"";
	КонецЕсли;
	
	ИдАвтоОбъектаПриложения1С = ИдАвтоОбъектаПриложения1С + "".Application"";
	
	АвтоОбъектПриложения1С = new COMObject(ИдАвтоОбъектаПриложения1С);
	
	Успешно = АвтоОбъектПриложения1С.connect(СтрокаСоединения);
		ЮТест.Проверить(Успешно, ""АвтоОбъектПриложения1С.connect(СтрокаСоединения)"");
	АвтоОбъектПриложения1С.Visible = true;
	
	ДанныеАвтоОбъектовПриложения1С = Новый Структура(""АвтоОбъектПриложения1С,ЗапускательТестов"", АвтоОбъектПриложения1С, Неопределено);
	//Коллекция_ДанныхАвтоОбъектовПриложения1С.Добавить(ДанныеАвтоОбъектовПриложения1С);
	
	//Если ТолстыйКлиент Тогда
	//	ЗапускательТестов = АвтоОбъектПриложения1С.ExternalDataProcessors.Create(ЮТест.ИспользуемоеИмяФайла, Ложь);
	//	
	//	ДанныеАвтоОбъектовПриложения1С.Вставить(""ЗапускательТестов"", ЗапускательТестов);
	//	
	//	ЗапускательТестов.ЗапретИспользованияИнформатора = Истина;
	//	ЗапускательТестов.OpenBrowserForm();
	//	
	//	ЗапускательТестов.SetHandlerObject(ЭтотОбъект);
	//	
	//	ЗапускательТестов.LoadAllTests(ПутьТестов);

	//	Если КоличествоЗагруженныхТестов <> 0 Тогда
	//		ЗапускательТестов.RunAllTests();
	//	КонецЕсли;
	//Иначе // тонкий клиент
	
		//Сообщить(""ЮТест.ИспользуемоеИмяФайла = ""+ЮТест.ИспользуемоеИмяФайла);
		ИспользуемоеИмяФайла = ""C:\Projects\GitHub\xUnitFor1C\xddTestRunner.epf""; //ЮТест.ИспользуемоеИмяФайла
		
		ИдОбработки_юТест = ""xddTestRunner"";
		ЗапускательТестов = АвтоОбъектПриложения1С.ОбщийМодульКлиент.ПодключитьНаСервереВнешнююОбработкуОтКлиента(ИспользуемоеИмяФайла, ИдОбработки_юТест);
			//ЗапускательТестов = АвтоОбъектПриложения1С.ExternalDataProcessors.Create(ЮТест.ИспользуемоеИмяФайла, Ложь);
		//Сообщить(ЗапускательТестов);
		//Сообщить(""Тип ЗапускательТестов ""+ТипЗнч(ЗапускательТестов));
		
		ЗапускательТестов = АвтоОбъектПриложения1С.ПолучитьФорму(""ВнешняяОбработка.""+ИдОбработки_юТест+"".Форма.УправляемаяФорма"");
		//Сообщить(""2 Тип ЗапускательТестов ""+ТипЗнч(ЗапускательТестов));
		//Сообщить(ЗапускательТестов);
		
		ДанныеАвтоОбъектовПриложения1С.Вставить(""ЗапускательТестов"", ЗапускательТестов);
		
		//ЗапускательТестов.Объект.ЗапретИспользованияИнформатора = Истина;
		ЗапускательТестов.Пути.Очистить();
		ЗапускательТестов.Пути.Добавить(ПутьТестов);
		
		ЗапускательТестов.SetHandlerObject(ЭтаФорма);
		
		ЗапускательТестов.Открыть(); //ЗапускательТестов.OpenBrowserForm();
		
		//ЗапускательТестов.LoadAllTests(ПутьТестов);

		//Сообщить(""КоличествоЗагруженныхТестов = ""+КоличествоЗагруженныхТестов);
		Если КоличествоЗагруженныхТестов <> 0 Тогда
			ЗапускательТестов.RunAllTests();
		КонецЕсли;
	//КонецЕсли;
	
	//Сообщить(КоличествоЗагруженныхТестов);
	
	Рез = Новый Структура(""МассивУпавшихТестов,КоличествоЗагруженныхТестов"", УпавшиеТесты, КоличествоЗагруженныхТестов);
	УпавшиеТесты = Неопределено; // чтоб освободить глобальную переменную
	КоличествоЗагруженныхТестов = 0;
	Возврат Рез;
КонецФункции

// { обработчики событий xUnitFor1C

&НаКлиенте
Процедура ВывестиСообщение(Сообщение) Экспорт
	Префикс	= """";
	Если ТекущийПользователь <> Неопределено Тогда
		Префикс = ""Сообщение от сеанса <""+ТекущийПользователь.Имя + ""> : "";
	КонецЕсли;
	Сообщить(Префикс + Сообщение);
КонецПроцедуры

&НаКлиенте
Процедура TestLoaded(Параметр) Экспорт
	//Сообщить(""TestLoaded "" +Параметр.Имя);
	Если ТекущийПользователь <> Неопределено Тогда
		Параметр.Имя = ""<""+ТекущийПользователь.Имя + ""> : "" + Параметр.Имя; // +"", путь <""+Параметр.ПолныйПуть+"">"";
	КонецЕсли;
	КоличествоЗагруженныхТестов = КоличествоЗагруженныхТестов + 1;
	//Сообщить(""TestLoaded "" +Параметр.Имя);
КонецПроцедуры

&НаКлиенте
Процедура TestFailed(Параметр) Экспорт
	//Сообщить(""TestFailed "" +Параметр.Имя);
	УпавшиеТесты.Добавить(Параметр);
КонецПроцедуры

//&НаКлиенте
//Процедура TestPassed(Параметр) Экспорт
//	Сообщить(""TestPassed "" +Параметр.Имя);
//КонецПроцедуры

//&НаКлиенте
//Процедура TestNotImplemented(Параметр) Экспорт
//	Сообщить(""TestNotImplemented "" +Параметр.Имя);
//КонецПроцедуры

// }

&НаКлиенте
Процедура ПроверитьПрохождениеТестов(ДанныеТестовПоПользователям)
	ОбщаяСтрокаОписанияУпавшихТестов = """"+Символы.ПС;
	ОбщееКоличествоУпавшихТестов = 0;
	ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты = 0;
	Для каждого КлючЗначение Из ДанныеТестовПоПользователям Цикл
		ТекущийПользователь = КлючЗначение.Ключ;
		//Сообщить(ТекущийПользователь);
		
		ДанныеТестирования = КлючЗначение.Значение;
		МассивУпавшихТестов = ДанныеТестирования.МассивУпавшихТестов;
			ЮТест.ПроверитьТип(МассивУпавшихТестов, ""Массив"", ""Пользователь <""+ТекущийПользователь.Имя + "": МассивУпавшихТестов"");
			
		СтрокаОписанияУпавшихТестов = """"+Символы.ПС;
		
		КоличествоЗагруженныхТестов = ДанныеТестирования.КоличествоЗагруженныхТестов;
		Если КоличествоЗагруженныхТестов = 0 Тогда
			ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты = ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты + 1;
			ОбщаяСтрокаОписанияУпавшихТестов = ОбщаяСтрокаОписанияУпавшихТестов + ""У пользователя <""+ТекущийПользователь.Имя + ""> не загрузились тесты!""+
				СтрокаОписанияУпавшихТестов;
				Продолжить;
		КонецЕсли;

		ОбщееКоличествоУпавшихТестов = ОбщееКоличествоУпавшихТестов + МассивУпавшихТестов.Количество();
		Для каждого СтрокаДереваТестов Из МассивУпавшихТестов Цикл
			СтрокаОписанияУпавшихТестов = СтрокаОписанияУпавшихТестов + "" ""+
				//""<""+ТекущийПользователь.Имя + ""> : "" + СтрокаДереваТестов.Имя +"", путь <""+
				"": <"" + СтрокаДереваТестов.Имя +"">, путь <""+
				СтрокаДереваТестов.ПолныйПуть+"">"" +Символы.ПС;
		КонецЦикла;
		ОбщаяСтрокаОписанияУпавшихТестов = ОбщаяСтрокаОписанияУпавшихТестов + ""У пользователя <""+ТекущийПользователь.Имя + ""> упали тесты < ""+МассивУпавшихТестов.Количество()+"" шт.>:""+
			СтрокаОписанияУпавшихТестов;
	КонецЦикла;
	//Если ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты > 0 Тогда
	//	ВызватьИсключение Символы.ПС+""При тестировании разных сеансов пользователей вообще не удалось загрузить тесты. Всего <""+ОбщееКоличествоПользователейУКоторыхНеЗагрузилисьТесты+"" пользователей>:""+Символы.ПС+
	//		ОбщаяСтрокаОписанияУпавшихТестов;
	//КонецЕсли;
	Если ОбщееКоличествоУпавшихТестов > 0 Тогда
		ВызватьИсключение Символы.ПС+""При тестировании разных сеансов пользователей упали тесты <""+ОбщееКоличествоУпавшихТестов+"" шт.>:""+Символы.ПС+
			ОбщаяСтрокаОписанияУпавшихТестов;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьПользователяИБ_ЕслиОнСуществуетСервер(лИмяПользователя)
	Объект().УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя);
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетСервер(ИмяМакета)
	Возврат Объект().ПолучитьМакет(ИмяМакета); //""СозданиеОдногоПользователяИБ"");
КонецФункции

&НаСервере
Функция Объект()
	Возврат РеквизитФормыВЗначение(""Объект"");
КонецФункции

Функция ИмяПользователяПоУмолчанию()
	Возврат ""ТестИмя""; // должно совпадать с макетом;
КонецФункции

Функция ПутьЗапускателяТестов()
	//ПутьЗапускателяТестов = СтрЗаменить(ЮТест.ИспользуемоеИмяФайла, ""xddTestRunner.epf"", """");
	ПутьЗапускателяТестов = ""C:\Projects\GitHub\xUnitFor1C\"";
	Возврат ПутьЗапускателяТестов;
КонецФункции

_тестируем = Ложь;

//} КОНЕЦ БЛОКА ЮНИТ-ТЕСТОВ
",
{4,2,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",f5c382c7-4ddf-4d48-9acd-6889965b8283}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"КоличествоЗагруженныхТестов",
{1,1,
{"ru","Количество загруженных тестов"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0}
}