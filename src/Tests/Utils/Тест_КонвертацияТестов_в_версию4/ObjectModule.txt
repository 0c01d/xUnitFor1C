Перем КонтекстЯдра;
Перем Ожидаем;

Перем Конвертер;

//{ интерфейс тестирования

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	НаборТестов.Добавить("ТестДолжен_ПолучитьУтилитуКонвертации", , "Получить утилиту конвертации");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоТекстНеМеняетсяЕслиВТекстеНетПолучитьСписокТестов", , "Проверить, что текст не меняется, если в тексте нет ""ПолучитьСписокТестов""");
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьПолучениеИмениПараметра_КонтекстЯдраИзОписанияМетода_ПолучитьСписокТестов", , "Получить имя параметра ""Контекст ядра"" из описания метода ""ПолучитьСписокТестов""");
	НаборТестов.Добавить("ТестДолжен_ПроверитьПолучениеТела_КонтекстЯдраИзОписанияМетода_ПолучитьСписокТестов", , "Получить тело из описания метода ""ПолучитьСписокТестов""");
	НаборТестов.Добавить("ТестДолжен_ПроверитьПолучениеИмениГлобальнойПеременнойКонтекстаЯдра", , "Получить имя глобальной переменной контекста ядра");
	НаборТестов.Добавить("ТестДолжен_ПроверитьПолучениеКоллекцииТестов", , "Получить коллекцию тестов");
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьКонвертацию", , "Проверить конвертацию простейшего базового теста");
	НаборТестов.Добавить("ТестДолжен_ПроверитьКонвертациюКогда2Теста", , "Проверить конвертацию, когда определено 2 теста");
	НаборТестов.Добавить("ТестДолжен_ПроверитьКонвертациюКогда2ТестаИКодВокруг", , "Проверить конвертацию, когда определено 2 теста и есть код вокруг них");
КонецПроцедуры

//}


//{ блок юнит-тестов - сами тесты

Процедура ПередЗапускомТеста() Экспорт
	Конвертер = ВнешниеОбработки.Создать(ПутьКонвертера(), Ложь);
	Конвертер.Инициализация(КонтекстЯдра);
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Конвертер = Неопределено;
КонецПроцедуры

Процедура ТестДолжен_ПолучитьУтилитуКонвертации() Экспорт
	Ожидаем.Что(Конвертер, "Ожидали конвертера не равен Неопределено, а получили другое").ЭтоНе().Равно(Неопределено);
	//Ожидаем.Что(Конвертер, "Ожидали тип конвертера ""Внешняя обработка"", а получили другое").ИмеетТип("ВнешняяОбработка");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоТекстНеМеняетсяЕслиВТекстеНетПолучитьСписокТестов() Экспорт
	ИсходныйТекст = "Какой-то текст";
	
	ТекстРезультата = Конвертер.ПреобразоватьТекст(ИсходныйТекст);
	Ожидаем.Что(ТекстРезультата, "Ожидали, что текст результата будет равен образцу, а это не так").Равно("");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеИмениПараметра_КонтекстЯдраИзОписанияМетода_ПолучитьСписокТестов() Экспорт
	ИсходныйТекст = ПолучитьМакет("БазовыйТест_v3").ПолучитьТекст();
	
	ОписаниеМетода = Конвертер.ПолучитьОписаниеМетода_ПолучитьСписокТестов(ИсходныйТекст);
	
	Ожидаем.Что(ОписаниеМетода.ИмяПараметра_КонтекстЯдра, "Ожидали, что ОписаниеМетода.ИмяПараметра_КонтекстЯдра равен образцу, а это не так").Равно("ЮнитТестирование1");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеТела_КонтекстЯдраИзОписанияМетода_ПолучитьСписокТестов() Экспорт
	ИсходныйТекст = ПолучитьМакет("БазовыйТест_v3").ПолучитьТекст();
	
	ОписаниеМетода = Конвертер.ПолучитьОписаниеМетода_ПолучитьСписокТестов(ИсходныйТекст);
	
	Образец = "	юТест1 = ЮнитТестирование1;
	|	ВсеТесты1 = Новый Массив;
	|	ВсеТесты1.Добавить(""Тест_ДваПлюсДва"");
	|	Возврат ВсеТесты1;";
		
	Ожидаем.Что(ОписаниеМетода.ТелоМетода, "Ожидали, что тело метода равно образцу, а это не так").Равно(Образец);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеИмениГлобальнойПеременнойКонтекстаЯдра() Экспорт
	ИсходныйТекст = ПолучитьМакет("БазовыйТест_v3").ПолучитьТекст();
	
	ОписаниеМетода = Конвертер.ПолучитьОписаниеМетода_ПолучитьСписокТестов(ИсходныйТекст);
	
	ОписаниеГлобальнойПеременнойКонтекстаЯдра = ОписаниеМетода.ОписаниеГлобальнойПеременнойКонтекстаЯдра;
	ИмяГлобальнойПеременнойКонтекстаЯдра = ОписаниеГлобальнойПеременнойКонтекстаЯдра.Имя;
	
	Ожидаем.Что(ИмяГлобальнойПеременнойКонтекстаЯдра, "Ожидали, что ИмяГлобальнойПеременнойКонтекстаЯдра равно образцу, а это не так").Равно("юТест1");
	
	ТекстОписания = Сред(ИсходныйТекст, ОписаниеГлобальнойПеременнойКонтекстаЯдра.НачалоОписания, ОписаниеГлобальнойПеременнойКонтекстаЯдра.КонецОписания);
	Ожидаем.Что(ОписаниеГлобальнойПеременнойКонтекстаЯдра.НачалоОписания, "Ожидали, что ОписаниеГлобальнойПеременнойКонтекстаЯдра.КонецОписания равно образцу, а это не так").Равно(0);
	Ожидаем.Что(ОписаниеГлобальнойПеременнойКонтекстаЯдра.КонецОписания, "Ожидали, что ОписаниеГлобальнойПеременнойКонтекстаЯдра.КонецОписания равно образцу, а это не так").Равно(13);
	Ожидаем.Что(ТекстОписания, "Ожидали, что ТекстОписания ГлобальнойПеременнойКонтекстаЯдра равно образцу, а это не так").Равно("Перем юТест1;");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеКоллекцииТестов() Экспорт
	ИсходныйТекст = ПолучитьМакет("БазовыйТест_v3").ПолучитьТекст();
	
	ОписаниеМетода = Конвертер.ПолучитьОписаниеМетода_ПолучитьСписокТестов(ИсходныйТекст);
	
	КоллекцияТестов = ОписаниеМетода.КоллекцияТестов;
	
	Ожидаем.Что(КоллекцияТестов.Количество(), "Ожидали, что КоллекцияТестов.Количество() равно образцу, а это не так").Равно(1);
	Ожидаем.Что(КоллекцияТестов[0], "Ожидали, что имя добавляемого теста равно образцу, а это не так").Равно("Тест_ДваПлюсДва");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьКонвертацию() Экспорт
	
	ИсходныйТекст = ПолучитьМакет("БазовыйТест_v3").ПолучитьТекст();
	ОбразецРезультата = ПолучитьМакет("БазовыйТест_v3_Результат").ПолучитьТекст();
	
	ТекстРезультата = Конвертер.ПреобразоватьТекст(ИсходныйТекст);
	
	ПоказатьНепустойЛогКонвертера();
	
	СравнитьДлинныеСтроки(ОбразецРезультата, ТекстРезультата);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьКонвертациюКогда2Теста() Экспорт
	
	ИсходныйТекст = ПолучитьМакет("БазовыйТест_v3_ДваТеста").ПолучитьТекст();
	ОбразецРезультата = ПолучитьМакет("БазовыйТест_v3_ДваТеста_Результат").ПолучитьТекст();
	
	ТекстРезультата = Конвертер.ПреобразоватьТекст(ИсходныйТекст);
	
	ПоказатьНепустойЛогКонвертера();
	
	СравнитьДлинныеСтроки(ОбразецРезультата, ТекстРезультата);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьКонвертациюКогда2ТестаИКодВокруг() Экспорт
	//Конвертер.ВключитьЛог(Истина);
	
	ИсходныйТекст = ПолучитьМакет("БазовыйТест_v3_ДваТеста_ИКодВокруг").ПолучитьТекст();
	ОбразецРезультата = ПолучитьМакет("БазовыйТест_v3_ДваТеста_ИКодВокруг_Результат").ПолучитьТекст();
	
	ТекстРезультата = Конвертер.ПреобразоватьТекст(ИсходныйТекст);
	
	ПоказатьНепустойЛогКонвертера();
	
	СравнитьДлинныеСтроки(ОбразецРезультата, ТекстРезультата);
КонецПроцедуры

Процедура СравнитьДлинныеСтроки(Образец, Значение)
	Для к = 1 По Мин(СтрЧислоСтрок(Значение), СтрЧислоСтрок(Образец))  Цикл
		Ожидаем.Что(СтрПолучитьСтроку(Значение, к), "Ожидали, что СтрПолучитьСтроку(текст результата, "+к+") будет равен образцу, а это не так").Равно(СтрПолучитьСтроку(Образец, к));
	КонецЦикла;
	Ожидаем.Что(СтрЧислоСтрок(Значение), "Ожидали, что СтрЧислоСтрок(текст результата) будет равен образцу, а это не так").Равно(СтрЧислоСтрок(Образец));
	Ожидаем.Что(Значение, "Ожидали, что текст результата будет равен образцу, а это не так").Равно(Образец);
	Ожидаем.Что(СтрДлина(Значение), "Ожидали, что СтрДлина(текст результата) будет равен образцу, а это не так").Равно(СтрДлина(Образец));
КонецПроцедуры

Процедура ПоказатьНепустойЛогКонвертера()
	Лог = Конвертер.ПолучитьЛог();
	Если Не ПустаяСтрока(Лог) Тогда
		Сообщить("Лог <" + Символы.ПС + Лог + Символы.ПС + ">");
	КонецЕсли;
КонецПроцедуры

Функция КаталогПроекта()
	Файл = Новый Файл(ИспользуемоеИмяФайла);
	Возврат Файл.Путь + "\..\..\";
КонецФункции

Функция ПутьКонвертера()
	Возврат КаталогПроекта() + "\utils\xddTestsConvertIntoRebornFormat.epf";
КонецФункции

//} 