Перем КонтекстЯдра;
Перем Ожидаем;

Перем Конвертер;

//{ интерфейс тестирования

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	НаборТестов.Добавить("ТестДолжен_ПолучитьУтилитуКонвертации", , "Получить утилиту конвертации");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоТекстНеМеняетсяЕслиВТекстеНетПолучитьСписокТестов", , "Проверить, что текст не меняется, если в тексте нет ""ПолучитьСписокТестов""");
	НаборТестов.Добавить("ТестДолжен_ПроверитьКонвертациюПростейшегоБазовогоТеста", , "Проверить конвертацию простейшего базового теста");
КонецПроцедуры

//}


//{ блок юнит-тестов - сами тесты

Процедура ПередЗапускомТеста() Экспорт
	Конвертер = ВнешниеОбработки.Создать(ПутьКонвертера(), Ложь);
	Конвертер.Инициализация(КонтекстЯдра);
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
КонецПроцедуры

Процедура ТестДолжен_ПолучитьУтилитуКонвертации() Экспорт
	Ожидаем.Что(Конвертер, "Ожидали конвертера не равен Неопределено, а получили другое").ЭтоНе().Равно(Неопределено);
	//Ожидаем.Что(Конвертер, "Ожидали тип конвертера ""Внешняя обработка"", а получили другое").ИмеетТип("ВнешняяОбработка");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоТекстНеМеняетсяЕслиВТекстеНетПолучитьСписокТестов() Экспорт
	ИсходныйТекст = "Какой-то текст";
	
	ТекстРезультата = Конвертер.ПреобразоватьТекст(ИсходныйТекст);
	Ожидаем.Что(ТекстРезультата, "Ожидали, что текст результата будет равен образцу, а это не так").Равно("");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьКонвертациюПростейшегоБазовогоТеста() Экспорт
	ИсходныйТекст = ПолучитьМакет("БазовыйТест_v3").ПолучитьТекст();
	ОбразецРезультата = ПолучитьМакет("БазовыйТест_v3_Результат").ПолучитьТекст();
	
	Лог = "";
	
	ТекстРезультата = Конвертер.ПреобразоватьТекст(ИсходныйТекст, Лог);
	
	Сообщить("Лог <" + Символы.ПС + Лог + Символы.ПС + ">");
	
	Ожидаем.Что(ТекстРезультата, "Ожидали, что текст результата будет равен образцу, а это не так").Равно(ОбразецРезультата);
КонецПроцедуры

Функция КаталогПроекта()
	Файл = Новый Файл(ИспользуемоеИмяФайла);
	Возврат Файл.Путь + "\..\..\";
КонецФункции

Функция ПутьКонвертера()
	Возврат КаталогПроекта() + "\utils\xddTestsConvertIntoRebornFormat.epf";
КонецФункции

//} 