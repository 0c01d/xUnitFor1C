Перем КонтекстЯдра;
Перем Ожидаем;
Перем ВременныеФайлы;
Перем КомандныйФайл;

Перем Конвертер;

//{ интерфейс тестирования

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	ВременныеФайлы = КонтекстЯдра.Плагин("ВременныеФайлы");
	КомандныйФайл = КонтекстЯдра.Плагин("КомандныйФайл");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	НаборТестов.НачатьГруппу("Проверка преобразования текстов", Ложь);
	НаборТестов.Добавить("ТестДолжен_ПолучитьУтилитуКонвертации", , "Получить утилиту конвертации");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоТекстНеМеняетсяЕслиВТекстеНетПолучитьСписокТестов", , "Проверить, что текст не меняется, если в тексте нет ""ПолучитьСписокТестов""");
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьПолучениеИмениПараметра_КонтекстЯдраИзОписанияМетода_ПолучитьСписокТестов", , "Получить имя параметра ""Контекст ядра"" из описания метода ""ПолучитьСписокТестов""");
	НаборТестов.Добавить("ТестДолжен_ПроверитьПолучениеТела_КонтекстЯдраИзОписанияМетода_ПолучитьСписокТестов", , "Получить тело из описания метода ""ПолучитьСписокТестов""");
	НаборТестов.Добавить("ТестДолжен_ПроверитьПолучениеИмениГлобальнойПеременнойКонтекстаЯдра", , "Получить имя глобальной переменной контекста ядра");
	НаборТестов.Добавить("ТестДолжен_ПроверитьПолучениеКоллекцииТестов", , "Получить коллекцию тестов");
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьКонвертацию", НаборТестов.ПараметрыТеста("БазовыйТест_v3", "БазовыйТест_v3_Результат", Истина, Ложь), "Проверить конвертацию простейшего базового теста");
	НаборТестов.Добавить("ТестДолжен_ПроверитьКонвертацию", НаборТестов.ПараметрыТеста("БазовыйТест_v3_ДваТеста", "БазовыйТест_v3_ДваТеста_Результат", Истина, Ложь), "Проверить конвертацию, когда определено 2 теста");
	НаборТестов.Добавить("ТестДолжен_ПроверитьКонвертацию", НаборТестов.ПараметрыТеста("БазовыйТест_v3_ДваТеста_ИКодВокруг", "БазовыйТест_v3_ДваТеста_ИКодВокруг_Результат", Истина, Ложь), "Проверить конвертацию, когда определено 2 теста и есть код вокруг них");

	НаборТестов.Добавить("ТестДолжен_ПроверитьКонвертацию", НаборТестов.ПараметрыТеста("БазовыйТест_v3_УФ", "БазовыйТест_v3_УФ_Результат", Ложь, Ложь), "Проверить конвертацию простейшего базового теста (УФ)");
	НаборТестов.Добавить("ТестДолжен_ПроверитьКонвертацию", НаборТестов.ПараметрыТеста("БазовыйТест_v3_УФ_ДвеКавычки", "БазовыйТест_v3_УФ_ДвеКавычки_Результат", Ложь, Истина), "Проверить конвертацию простейшего базового теста (УФ), когда две двойные кавычки (бывают внутри декодированного файла)");
	НаборТестов.Добавить("ТестДолжен_ПроверитьКонвертациюУФКогда2Теста", НаборТестов.ПараметрыТеста("БазовыйТест_v3_УФ", "БазовыйТест_v3_УФ_Результат", Ложь, Ложь), "Проверить конвертацию, когда определено 2 теста (УФ)");
	НаборТестов.Добавить("ТестДолжен_ПроверитьКонвертациюУФКогда2ТестаИКодВокруг", НаборТестов.ПараметрыТеста("БазовыйТест_v3_УФ", "БазовыйТест_v3_УФ_Результат", Ложь, Ложь), "Проверить конвертацию, когда определено 2 теста и есть код вокруг них (УФ)");
	
	НаборТестов.НачатьГруппу("Преобразование файла с одним тестом ОФ", Истина);
	//НаборТестов.Добавить("ТестДолжен_ВыполнитьИнициализацию", , "Инициализация");
	НаборТестов.Добавить("ТестДолжен_ПодготовитьВременныйКаталогДляСборкиРазборки", , "Подготовить временный каталог");
	НаборТестов.Добавить("ТестДолжен_ПолучитьФайлТестаИзМакета", НаборТестов.ПараметрыТеста("ФайлСОднимТестом"), "Получить файл теста из макета ""ФайлСОднимТестом"" ");
	НаборТестов.Добавить("ТестДолжен_УбедитьсяЧтоФайлТестаСоСтарымAPI", , "Убедиться, что файл теста со старым API");
	НаборТестов.Добавить("ТестДолжен_ПреобразоватьФайл", , "Преобразовать полученный файл");
	//НаборТестов.Добавить("ТестДолжен_ПолучитьУтилитуСборкиРазборки", , "Получить утилиту сборки/разборки");
	//НаборТестов.Добавить("ТестДолжен_РазобратьФайлТестаНаИсходники", , "Разобрать файл теста на исходники");
	//НаборТестов.Добавить("ТестДолжен_НайтиФайлМодуляТестаВИсходниках", , "Найти файл модуля теста в исходниках");
	//НаборТестов.Добавить("ТестДолжен_ПолучитьИсходныйТекстМодуляТеста", , "Получить исходный текст модуля");
	//НаборТестов.Добавить("ТестДолжен_ПреобразоватьТекстМодуляТестаВФормат_v4_reborn", , "Преобразовать текст модуля в формат v4-reborn");
	//НаборТестов.Добавить("ТестДолжен_ЗаписатьНовыйТекстМодуляТестаВИсходникМодуляФайлТеста", , "Записать новый текст модуля в исходник модуля теста");
	//НаборТестов.Добавить("ТестДолжен_СобратьФайлТеста", , "Собрать файл теста");
	НаборТестов.Добавить("ТестДолжен_ПроверитьНаличиеИсходнойКопииФайлаТеста", , "Проверить наличие исходной копии файла теста");
	НаборТестов.Добавить("ТестДолжен_ВыполнитьТестированиеПолученногоТестаСНовымAPI", , "Выполнить тестирование полученного теста");
	НаборТестов.Добавить("ТестДолжен_УдалитьВременныеФайлы", , "Удалить временные файлы");
	
	НаборТестов.НачатьГруппу("Преобразование файла с одним тестом УФ", Истина);
	НаборТестов.Добавить("ТестДолжен_ПодготовитьВременныйКаталогДляСборкиРазборки", , "Подготовить временный каталог");
	НаборТестов.Добавить("ТестДолжен_ПолучитьФайлТестаИзМакета", НаборТестов.ПараметрыТеста("ФайлСОднимТестомУФ"), "Получить файл теста из макета ""ФайлСОднимТестом"" ");
	НаборТестов.Добавить("ТестДолжен_УбедитьсяЧтоФайлТестаСоСтарымAPI", , "Убедиться, что файл теста со старым API");
	НаборТестов.Добавить("ТестДолжен_ПреобразоватьФайл", , "Преобразовать полученный файл");
	НаборТестов.Добавить("ТестДолжен_ПроверитьНаличиеИсходнойКопииФайлаТеста", , "Проверить наличие исходной копии файла теста");
	НаборТестов.Добавить("ТестДолжен_ВыполнитьТестированиеПолученногоТестаСНовымAPI", , "Выполнить тестирование полученного теста");
	НаборТестов.Добавить("ТестДолжен_УдалитьВременныеФайлы", , "Удалить временные файлы");
КонецПроцедуры

//}


//{ блок юнит-тестов - сами тесты

Процедура ПередЗапускомТеста() Экспорт
//Процедура ТестДолжен_ВыполнитьИнициализацию() Экспорт
	Конвертер = ВнешниеОбработки.Создать(ПутьКонвертера(), Ложь);
	Конвертер.Инициализация();
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	//Конвертер = Неопределено;
	//ВременныеФайлы.Удалить();
КонецПроцедуры

Процедура ТестДолжен_УдалитьВременныеФайлы() Экспорт
	Конвертер = Неопределено;
	ВременныеФайлы.Удалить();
КонецПроцедуры

Процедура ТестДолжен_ПодготовитьВременныйКаталогДляСборкиРазборки() Экспорт
	//ИмяКаталогаСборки = ПолучитьИмяВременногоФайла();
	//ВременныеФайлы.СоздатьКаталог_(ИмяКаталогаСборки);
	ИмяКаталогаСборки = ВременныеФайлы.СоздатьКаталог_();
	КонтекстЯдра.СохранитьКонтекст(Новый Структура("ИмяКаталогаСборки", ИмяКаталогаСборки));
КонецПроцедуры

Процедура ТестДолжен_ПолучитьФайлТестаИзМакета(ИмяМакета) Экспорт
	МакетФайлаТеста = ПолучитьМакет(ИмяМакета); //МакетФайлаТеста = Новый ДвоичныеДанные;
	
	Контекст = КонтекстЯдра.ПолучитьКонтекст();
	ФайлТеста = Новый Файл(Контекст.ИмяКаталогаСборки+"\fixture.epf");
	
	//Контекст.Вставить("ПутьФайлаТеста", ФайлТеста.ПолноеИмя);
	Контекст.Вставить("ФайлТеста", ФайлТеста);
	
	МакетФайлаТеста.Записать(Контекст.ФайлТеста.ПолноеИмя);
	//МакетФайлаТеста.Записать(Контекст.ПутьФайлаТеста);
	
	КонтекстЯдра.СохранитьКонтекст(Контекст);
КонецПроцедуры

Процедура ТестДолжен_ПреобразоватьФайл() Экспорт
	//КонечныйФайл = Новый Файл(ВременныеФайлы.НовоеИмяФайла("epf"));
	Контекст = КонтекстЯдра.ПолучитьКонтекст();
	Конвертер.ПреобразоватьФайл(Контекст.ФайлТеста, Истина);
	//Ожидаем.Что(КонечныйФайл.Существует(), "конечный файл должен существовать, а его нет").ЭтоИстина();
КонецПроцедуры

Процедура ТестДолжен_ПроверитьНаличиеИсходнойКопииФайлаТеста() Экспорт
	Контекст = КонтекстЯдра.ПолучитьКонтекст();
	ФайлТеста = Контекст.ФайлТеста;
	ФайлКопии = Новый Файл(ФайлТеста.Путь+"/"+ФайлТеста.ИмяБезРасширения +".orig.epf");
	Ожидаем.Что(ФайлКопии.Существует(), "не удалось сделать копию-файла для файла "+ФайлТеста.ПолноеИмя).ЭтоИстина();
КонецПроцедуры

Процедура ТестДолжен_УбедитьсяЧтоФайлТестаСоСтарымAPI() Экспорт
	Контекст = КонтекстЯдра.ПолучитьКонтекст();
	ФайлТеста = Контекст.ФайлТеста;
	ЗагрузчикФайла = КонтекстЯдра.Плагин("ЗагрузчикФайла");
	
	//ФайлКонтекстаЯдра = Новый Файл(КонтекстЯдра.ИспользуемоеИмяФайла);
	ФайлОбработкиСНовымAPI = Новый Файл(ФайлТеста.ПолноеИмя); //ФайлКонтекстаЯдра.Путь + "\Tests\Plugins\Тесты_ЗагрузчикФайла_НовыйAPIОбъявленияТестов.epf");
	Попытка
		ДеревоТестов = ЗагрузчикФайла.Загрузить(КонтекстЯдра, ФайлОбработкиСНовымAPI.ПолноеИмя);	
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщить(ТекстОшибки);
		Если НайтиФайлы(ТекстОшибки, "Старый формат тестов в обработке тестов") = 0 Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;			
	КонецПопытки;
	
КонецПроцедуры

Процедура ТестДолжен_ВыполнитьТестированиеПолученногоТестаСНовымAPI() Экспорт
	Контекст = КонтекстЯдра.ПолучитьКонтекст();
	ФайлТеста = Контекст.ФайлТеста;
	ЗагрузчикФайла = КонтекстЯдра.Плагин("ЗагрузчикФайла");
	
	ФайлОбработкиСНовымAPI = Новый Файл(ФайлТеста.ПолноеИмя);
	ДеревоТестов = ЗагрузчикФайла.Загрузить(КонтекстЯдра, ФайлОбработкиСНовымAPI.ПолноеИмя);
	
	ТестыОбработкиСНовымAPI = ДеревоТестов.Строки[0];
	
	Ожидаем.Что(ТестыОбработкиСНовымAPI.СлучайныйПорядокВыполнения, "ТестыОбработкиСНовымAPI порядок выполнения").ЭтоИстина();
	Ожидаем.Что(ТестыОбработкиСНовымAPI.Строки, "ТестыОбработкиСНовымAPI количество дочерних узлов").ИмеетДлину(1);
	
	Элемент1 = ТестыОбработкиСНовымAPI.Строки[0];
	Ожидаем.Что(Элемент1.Тип, "Элемент1.Тип").Равно(КонтекстЯдра.ТипыУзловДереваТестов.Элемент);
	Ожидаем.Что(Элемент1.Путь, "Элемент1.Путь").Равно(ФайлОбработкиСНовымAPI.ПолноеИмя);
	Ожидаем.Что(Элемент1.ИмяМетода, "Элемент1.ИмяМетода").Равно("Тест_ДваПлюсДва");
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикФайла, ДеревоТестов);
	
	Ожидаем.Что(РезультатТестирования.Состояние, "Состояние всех результатов тестирования").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТестирования.КоличествоТестов, "Количество тестов по результатам тестирования").Равно(ДеревоТестов.Строки.Количество());
КонецПроцедуры

//{ Закомментировано_УДАЛИТЬ()

//Процедура ТестДолжен_ПолучитьУтилитуСборкиРазборки() Экспорт
//	МакетУтилиты = ПолучитьМакет("v8unpack"); //МакетУтилиты = Новый ДвоичныеДанные;
//	
//	Контекст = КонтекстЯдра.ПолучитьКонтекст();
//	Файл = Новый Файл(Контекст.ИмяКаталогаСборки+"\v8unpack.exe");
//	ДобавитьВКонтекст("ФайлУтилиты", Файл);
//	
//	МакетУтилиты.Записать(Файл.ПолноеИмя);
//КонецПроцедуры

//Процедура ТестДолжен_РазобратьФайлТестаНаИсходники() Экспорт
//	МассивФайловМодулей = Новый Массив;
//	
//	Контекст = КонтекстЯдра.ПолучитьКонтекст();
//	ИмяКаталогаИсходниковФайла = Контекст.ФайлТеста.ИмяБезРасширения;
//	
//	Файл = КомандныйФайл.Открыть(ВременныеФайлы.НовоеИмяФайла("bat"));
//	КомандныйФайл.Добавить("cd /d " + Контекст.ИмяКаталогаСборки);
//	КомандныйФайл.Добавить(Контекст.ФайлУтилиты.Имя + " -unpack " + Контекст.ФайлТеста.Имя + " " + ИмяКаталогаИсходниковФайла + " > "+ИмяКаталогаИсходниковФайла+".unpack.log");
//	КодВозврата = КомандныйФайл.ВыполнитьКоманду();
//	Ожидаем.Что(КодВозврата, "КодВозврата").Равно(0);
//	
//	Файлы = НайтиФайлы(Контекст.ИмяКаталогаСборки+"/"+ИмяКаталогаИсходниковФайла, "*.0.data");
//	Ожидаем.Что(Файлы.Количество(), "Должны быть файлы, а их нет").Больше(0);
//	Для Каждого БинарныйФайл Из Файлы Цикл
//		Сообщить(БинарныйФайл.ПолноеИмя);
//		ИмяФайлаИсходников = БинарныйФайл.Имя + ".txt";
//		
//		Файл = КомандныйФайл.Открыть(ВременныеФайлы.НовоеИмяФайла("bat"));
//		КомандныйФайл.Добавить("cd /d " + БинарныйФайл.Путь);
//		КомандныйФайл.Добавить(Контекст.ФайлУтилиты.Имя + " -undeflate " + БинарныйФайл.Имя + " " + ИмяФайлаИсходников + " > "+БинарныйФайл.ИмяБезРасширения+".unpack.log");
//		КодВозврата = КомандныйФайл.ВыполнитьКоманду();
//		Ожидаем.Что(КодВозврата, "КодВозврата "+БинарныйФайл.Имя).Равно(0);
//		
//		Файл = КомандныйФайл.Открыть(ВременныеФайлы.НовоеИмяФайла("bat"));
//		КомандныйФайл.Добавить("cd /d " + БинарныйФайл.Путь);
//		КомандныйФайл.Добавить(Контекст.ФайлУтилиты.Имя + " -unpack " + ИмяФайлаИсходников + " " + БинарныйФайл.ИмяБезРасширения + " > "+БинарныйФайл.ИмяБезРасширения+".unpack.log");
//		КодВозврата = КомандныйФайл.ВыполнитьКоманду();
//		Если КодВозврата = 4294967245 Тогда //UnpackToFolder. This is not V8 file!
//			МассивФайловМодулей.Добавить(Новый Файл(БинарныйФайл.Путь +"/"+ИмяФайлаИсходников));
//			Продолжить;
//		ИначеЕсли КодВозврата = 0 Тогда
//			МассивФайловМодулей.Добавить(Новый Файл(БинарныйФайл.Путь +"/"+БинарныйФайл.ИмяБезРасширения+"/text.data"));
//			Продолжить;
//		КонецЕсли;
//		Ожидаем.Что(КодВозврата, "КодВозврата "+БинарныйФайл.Имя).Равно(0);
//	КонецЦикла;
//	Для Каждого Файл Из МассивФайловМодулей Цикл
//		Сообщить(Файл.ПолноеИмя);
//	КонецЦикла;
//	ДобавитьВКонтекст("МассивФайловМодулей", МассивФайловМодулей);
//	
//	//КомандныйФайл.Добавить("FOR /F %%I IN (*.0.data) DO (");
//	//КомандныйФайл.Добавить("  " + Контекст.ПутьУтилиты + " -undeflate %%I ~nx%I");
//	//КомандныйФайл.Добавить("  " + Контекст.ПутьУтилиты + " -unpack %%I ~nx%I");
//	//КомандныйФайл.Добавить(")");
//	//разборка
//	//@echo off
//	//v8unpack.exe  -unpack ШаблонТестаУФ.epf .\ШаблонТестаУФ
//	//v8unpack.exe -undeflate .\ШаблонТестаУФ\727eda5f-558c-428b-86d2-3421c52f4c50.0.data .\ШаблонТестаУФ\Module.txt
//	//v8unpack.exe -unpack .\ШаблонТестаУФ\Module.txt .\ШаблонТестаУФ\Module

//	//v8unpack.exe -undeflate .\ШаблонТестаУФ\ba335523-e6ff-4049-91a9-5f97f7ab0a0b.0.data .\ШаблонТестаУФ\UF.txt
//	//rem v8unpack.exe -unpack .\ШаблонТестаУФ\UF.txt .\ШаблонТеста\UF

//	//rem chcp 65001 >nul
//	//type .\ШаблонТестаУФ\Module\text.data
//	//rem type .\ШаблонТестаУФ\UF.txt
//	
//	//сборка 
//	//rem @echo off
//	//v8unpack.exe -pack .\ШаблонТеста\Module .\ШаблонТеста\NewModule.txt 
//	//v8unpack.exe -deflate .\ШаблонТеста\NewModule.txt .\ШаблонТеста\727eda5f-558c-428b-86d2-3421c52f4c50.0.data 
//	//v8unpack.exe  -pack .\ШаблонТеста ШаблонТеста2.epf 

//	//rem chcp 65001 >nul
//	//rem type .\ШаблонТеста\Module\text.data	
//	
//	//ВызватьИсключение "Не реализован";
//КонецПроцедуры
//}


Процедура ТестДолжен_ПолучитьУтилитуКонвертации() Экспорт
	Ожидаем.Что(Конвертер, "Ожидали конвертер не равен Неопределено, а получили другое").ЭтоНе().Равно(Неопределено);
	//Ожидаем.Что(Конвертер, "Ожидали тип конвертера ""Внешняя обработка"", а получили другое").ИмеетТип("ВнешняяОбработка");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоТекстНеМеняетсяЕслиВТекстеНетПолучитьСписокТестов() Экспорт
	ИсходныйТекст = "Какой-то текст";
	
	ТекстРезультата = Конвертер.ПреобразоватьТекст(ИсходныйТекст, Истина, Ложь);
	Ожидаем.Что(ТекстРезультата, "Ожидали, что текст результата будет равен образцу, а это не так").Равно("");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеИмениПараметра_КонтекстЯдраИзОписанияМетода_ПолучитьСписокТестов() Экспорт
	ИсходныйТекст = ПолучитьМакет("БазовыйТест_v3").ПолучитьТекст();
	
	ОписаниеМетода = Конвертер.ПолучитьОписаниеМетода_ПолучитьСписокТестов(ИсходныйТекст);
	
	Ожидаем.Что(ОписаниеМетода.ИмяПараметра_КонтекстЯдра, "Ожидали, что ОписаниеМетода.ИмяПараметра_КонтекстЯдра равен образцу, а это не так").Равно("ЮнитТестирование1");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеТела_КонтекстЯдраИзОписанияМетода_ПолучитьСписокТестов() Экспорт
	ИсходныйТекст = ПолучитьМакет("БазовыйТест_v3").ПолучитьТекст();
	
	ОписаниеМетода = Конвертер.ПолучитьОписаниеМетода_ПолучитьСписокТестов(ИсходныйТекст);
	
	Образец = "	юТест1 = ЮнитТестирование1;
	|	ВсеТесты1 = Новый Массив;
	|	ВсеТесты1.Добавить(""Тест_ДваПлюсДва"");
	|	Возврат ВсеТесты1;";
		
	Ожидаем.Что(ОписаниеМетода.ТелоМетода, "Ожидали, что тело метода равно образцу, а это не так").Равно(Образец);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеИмениГлобальнойПеременнойКонтекстаЯдра() Экспорт
	ИсходныйТекст = ПолучитьМакет("БазовыйТест_v3").ПолучитьТекст();
	
	ОписаниеМетода = Конвертер.ПолучитьОписаниеМетода_ПолучитьСписокТестов(ИсходныйТекст);
	
	ОписаниеГлобальнойПеременнойКонтекстаЯдра = ОписаниеМетода.ОписаниеГлобальнойПеременнойКонтекстаЯдра;
	ИмяГлобальнойПеременнойКонтекстаЯдра = ОписаниеГлобальнойПеременнойКонтекстаЯдра.Имя;
	
	Ожидаем.Что(ИмяГлобальнойПеременнойКонтекстаЯдра, "Ожидали, что ИмяГлобальнойПеременнойКонтекстаЯдра равно образцу, а это не так").Равно("юТест1");
	
	ТекстОписания = Сред(ИсходныйТекст, ОписаниеГлобальнойПеременнойКонтекстаЯдра.НачалоОписания, ОписаниеГлобальнойПеременнойКонтекстаЯдра.КонецОписания);
	Ожидаем.Что(ОписаниеГлобальнойПеременнойКонтекстаЯдра.НачалоОписания, "Ожидали, что ОписаниеГлобальнойПеременнойКонтекстаЯдра.КонецОписания равно образцу, а это не так").Равно(0);
	Ожидаем.Что(ОписаниеГлобальнойПеременнойКонтекстаЯдра.КонецОписания, "Ожидали, что ОписаниеГлобальнойПеременнойКонтекстаЯдра.КонецОписания равно образцу, а это не так").Равно(13);
	Ожидаем.Что(ТекстОписания, "Ожидали, что ТекстОписания ГлобальнойПеременнойКонтекстаЯдра равно образцу, а это не так").Равно("Перем юТест1;");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеКоллекцииТестов() Экспорт
	ИсходныйТекст = ПолучитьМакет("БазовыйТест_v3").ПолучитьТекст();
	
	ОписаниеМетода = Конвертер.ПолучитьОписаниеМетода_ПолучитьСписокТестов(ИсходныйТекст);
	
	КоллекцияТестов = ОписаниеМетода.КоллекцияТестов;
	
	Ожидаем.Что(КоллекцияТестов.Количество(), "Ожидали, что КоллекцияТестов.Количество() равно образцу, а это не так").Равно(1);
	Ожидаем.Что(КоллекцияТестов[0], "Ожидали, что имя добавляемого теста равно образцу, а это не так").Равно("Тест_ДваПлюсДва");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьКонвертацию(ИсходныйМакет, МакетОбразецРезультата, ЭтоОбычнаяФорма, ЕстьДвеДвойныеКавычки) Экспорт
	//Конвертер.ВключитьЛог(Истина);
	
	ИсходныйТекст = ПолучитьМакет(ИсходныйМакет).ПолучитьТекст();
	ОбразецРезультата = ПолучитьМакет(МакетОбразецРезультата).ПолучитьТекст();
	
	ТекстРезультата = Конвертер.ПреобразоватьТекст(ИсходныйТекст, ЭтоОбычнаяФорма, ЕстьДвеДвойныеКавычки);
	
	ПоказатьНепустойЛогКонвертера();
	
	СравнитьДлинныеСтроки(ОбразецРезультата, ТекстРезультата);
КонецПроцедуры

Процедура СравнитьДлинныеСтроки(Образец, Значение)
	Для к = 1 По Мин(СтрЧислоСтрок(Значение), СтрЧислоСтрок(Образец))  Цикл
		Ожидаем.Что(СтрПолучитьСтроку(Значение, к), "Ожидали, что СтрПолучитьСтроку(текст результата, "+к+") будет равен образцу, а это не так").Равно(СтрПолучитьСтроку(Образец, к));
	КонецЦикла;
	Ожидаем.Что(СтрЧислоСтрок(Значение), "Ожидали, что СтрЧислоСтрок(текст результата) будет равен образцу, а это не так").Равно(СтрЧислоСтрок(Образец));
	Ожидаем.Что(Значение, "Ожидали, что текст результата будет равен образцу, а это не так").Равно(Образец);
	Ожидаем.Что(СтрДлина(Значение), "Ожидали, что СтрДлина(текст результата) будет равен образцу, а это не так").Равно(СтрДлина(Образец));
КонецПроцедуры

Процедура ПоказатьНепустойЛогКонвертера()
	Лог = Конвертер.ПолучитьЛог();
	Если Не ПустаяСтрока(Лог) Тогда
		Сообщить("Лог <" + Символы.ПС + Лог + Символы.ПС + ">");
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьВКонтекст(Ключ, Значение)
	Контекст = КонтекстЯдра.ПолучитьКонтекст();
	Контекст.Вставить(Ключ, Значение);
	КонтекстЯдра.СохранитьКонтекст(Контекст);
КонецПроцедуры

Функция КаталогПроекта()
	Файл = Новый Файл(КонтекстЯдра.ИспользуемоеИмяФайла);
	Возврат Файл.Путь;
КонецФункции

Функция ПутьКонвертера()
	Возврат КаталогПроекта() + "\utils\xddTestsConvertIntoRebornFormat.epf";
КонецФункции

//} 