
// { Plugin interface
&НаКлиенте
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);
КонецФункции

&НаСервере
Функция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)
	Возврат ЭтотОбъектНаСервере().ОписаниеПлагина(ВозможныеТипыПлагинов);
КонецФункции
// } Plugin interface

// { Loader interface
&НаКлиенте
Функция ВыбратьПутьИнтерактивно(ТекущийПуть = "") Экспорт
	ДиалогВыбораТеста = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораТеста.Фильтр = "Обработка-тест (*.epf)|*.epf|Все файлы|*";
	ДиалогВыбораТеста.МножественныйВыбор = Истина;
	ДиалогВыбораТеста.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораТеста.ПолноеИмяФайла = ТекущийПуть;
	
	Результат = Новый ТекстовыйДокумент;
	Если ДиалогВыбораТеста.Выбрать() Тогда
		Для каждого ПолноеИмяФайла Из ДиалогВыбораТеста.ВыбранныеФайлы Цикл
			Результат.ДобавитьСтроку(ПолноеИмяФайла);
		КонецЦикла;		
	КонецЕсли;
	Текст = Результат.ПолучитьТекст();
	
	Возврат Лев(Текст, СтрДлина(Текст) - 1);
КонецФункции

&НаКлиенте
Функция Загрузить(КонтекстЯдра, Путь) Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	ДеревоТестов = Неопределено;
	Для Сч = 1 По СтрЧислоСтрок(Путь) Цикл
		ФайлОбработки = Новый Файл(СтрПолучитьСтроку(Путь, Сч));
		ПроверитьКорректностьФайла(ФайлОбработки);
		
		Если ДеревоТестов = Неопределено Тогда
			ДеревоТестов = ПостроительДереваТестов.СоздатьКонтейнер(ФайлОбработки.Путь);
		КонецЕсли;
		
		АдресХранилища = "";
		ПоместитьФайл(АдресХранилища, ФайлОбработки.ПолноеИмя, , Ложь, ЭтаФорма.УникальныйИдентификатор);
		КонтекстЯдра.ПодключитьФайлОбработкиНаСервере(АдресХранилища, ФайлОбработки.ИмяБезРасширения);
		
		КонтейнерССервернымиТестамиОбработки = ЗагрузитьФайлНаСервере(ФайлОбработки.ПолноеИмя);
		КонтейнерСКлиентскимиТестамиОбработки = ЗагрузитьФайлНаКлиенте(ПостроительДереваТестов, ФайлОбработки);
		Если КонтейнерСКлиентскимиТестамиОбработки.Строки.Количество() > 0 Тогда
			КонтейнерССервернымиТестамиОбработки.Строки.Добавить(КонтейнерСКлиентскимиТестамиОбработки);
		КонецЕсли;
		Если КонтейнерССервернымиТестамиОбработки.Строки.Количество() > 0 Тогда
			ДеревоТестов.Строки.Добавить(КонтейнерССервернымиТестамиОбработки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоТестов;
КонецФункции

&НаКлиенте
Функция ПолучитьКонтекстПоПути(КонтекстЯдра, Путь) Экспорт
	Перем Контекст;
	
	ПрефиксПутейСФормами = ПрефиксПутейСФормами();
	Если Найти(Путь, ПрефиксПутейСФормами) = 1 Тогда
		ФайлОбработки = Новый Файл(Сред(Путь, СтрДлина(ПрефиксПутейСФормами) + 1));
		ПроверитьКорректностьФайла(ФайлОбработки);
		Контекст = ПолучитьФорму("ВнешняяОбработка." + ФайлОбработки.ИмяБезРасширения + ".Форма", , ЭтаФорма);
	Иначе
		ФайлОбработки = Новый Файл(Путь);
		ПроверитьКорректностьФайла(ФайлОбработки);
		Контекст = ФайлОбработки.ИмяБезРасширения;
	КонецЕсли;
	
	Возврат Контекст;
КонецФункции
// } Loader interface

&НаКлиенте
Процедура ПроверитьКорректностьФайла(Файл)
	Если Не Файл.Существует() Тогда
		ВызватьИсключение "Переданный файл не существует файл <" + Файл.ПолноеИмя + ">";
	КонецЕсли;
	Если Файл.ЭтоКаталог() Тогда
		ВызватьИсключение "Передан каталог вместо файла <" + Файл.ПолноеИмя + ">";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗагрузитьФайлНаСервере(ПолныйПутьКОбработкеНаКлиенте)
	ПостроительДереваТестов = ВнешниеОбработки.Создать("ПостроительДереваТестов");
	ФайлОбработки = Новый Файл(ПолныйПутьКОбработкеНаКлиенте);
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер(ФайлОбработки.ИмяБезРасширения, ПостроительДереваТестов.ИконкиУзловДереваТестов.Обработка);
	Попытка
		Обработка = ВнешниеОбработки.Создать(ФайлОбработки.ИмяБезРасширения);
		СписокТестов = Обработка.ПолучитьСписокТестов();
	Исключение
		// TODO добавить обработку ошибок
		//Описание = ОписаниеОшибки();
		//Сообщить(Описание);
	КонецПопытки;
	Если ЗначениеЗаполнено(СписокТестов) Тогда
		Для каждого Тест Из СписокТестов Цикл
			Элемент = Неопределено;
			Если ТипЗнч(Тест) = Тип("Строка") Тогда
				Элемент = ПостроительДереваТестов.СоздатьЭлемент(ФайлОбработки.ПолноеИмя, Тест);
			ИначеЕсли ТипЗнч(Тест) = Тип("Структура") Тогда
				ИмяМетода = Тест.ИмяТеста;
				Представление = Неопределено;
				Если Не Тест.Свойство("ПредставлениеТеста", Представление) Тогда
					Представление = ИмяМетода;
				КонецЕсли;
				Элемент = ПостроительДереваТестов.СоздатьЭлемент(ФайлОбработки.ПолноеИмя, ИмяМетода, Представление);
				Параметр = Неопределено;
				Если Тест.Свойство("Параметр", Параметр) Тогда
					Элемент.Параметры.Добавить(Параметр);
				КонецЕсли;
			Иначе
				ВызватьИсключение "Тест может быть описан либо строкой либо структурой";
			КонецЕсли;
			Если ЗначениеЗаполнено(Элемент) Тогда
				Контейнер.Строки.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Контейнер;
КонецФункции

&НаКлиенте
Функция ЗагрузитьФайлНаКлиенте(ПостроительДереваТестов, ФайлОбработки)
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер("Форма", ПостроительДереваТестов.Объект.ИконкиУзловДереваТестов.Форма);
	Попытка
		ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ФайлОбработки.ИмяБезРасширения + ".Форма");
		СписокТестов = ФормаОбработки.ПолучитьСписокТестов();
	Исключение
		// TODO добавить поведение при отсутствии управляемой формы у обработки
		//Описание = ОписаниеОшибки();
		//Сообщить(Описание);
	КонецПопытки;
	Если ЗначениеЗаполнено(СписокТестов) Тогда
		Для каждого Тест Из СписокТестов Цикл
			Элемент = Неопределено;
			Если ТипЗнч(Тест) = Тип("Строка") Тогда
				Элемент = ПостроительДереваТестов.СоздатьЭлемент(ФайлОбработки.ПолноеИмя, Тест);
			ИначеЕсли ТипЗнч(Тест) = Тип("Структура") Тогда
				ИмяМетода = Тест.ИмяТеста;
				Представление = Неопределено;
				Если Не Тест.Свойство("ПредставлениеТеста", Представление) Тогда
					Представление = ИмяМетода;
				КонецЕсли;
				Путь = ПрефиксПутейСФормами() + ФайлОбработки.ПолноеИмя;
				Элемент = ПостроительДереваТестов.СоздатьЭлемент(Путь, ИмяМетода, Представление, ПостроительДереваТестов.Объект.ИконкиУзловДереваТестов.ФункцияНаФорме);
				Параметр = Неопределено;
				Если Тест.Свойство("Параметр", Параметр) Тогда
					Элемент.Параметры.Добавить(Параметр);
				КонецЕсли;
			Иначе
				ВызватьИсключение "Тест может быть описан либо строкой либо структурой";
			КонецЕсли;
			Если ЗначениеЗаполнено(Элемент) Тогда
				Контейнер.Строки.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Контейнер;
КонецФункции

&НаКлиенте
Функция ПрефиксПутейСФормами()
	Возврат "УпрФорма # ";
КонецФункции

// { Helpers
&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции
// } Helpers
