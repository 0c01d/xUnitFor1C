
// { Plugin interface
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Тип", ВозможныеТипыПлагинов.Загрузчик);
	Результат.Вставить("Идентификатор", Метаданные().Имя);
	Результат.Вставить("Представление", "Загрузить тесты из файлов");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции
// } Plugin interface

// { Loader interface
#Если ТолстыйКлиентОбычноеПриложение Тогда
Функция ВыбратьПутьИнтерактивно(ТекущийПуть = "") Экспорт
	ДиалогВыбораТеста = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораТеста.Фильтр = "Обработка-тест (*.epf)|*.epf|Все файлы|*";
	ДиалогВыбораТеста.МножественныйВыбор = Истина;
	ДиалогВыбораТеста.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораТеста.ПолноеИмяФайла = ТекущийПуть;
	
	Результат = Новый ТекстовыйДокумент;
	Если ДиалогВыбораТеста.Выбрать() Тогда
		Для каждого ПолноеИмяФайла Из ДиалогВыбораТеста.ВыбранныеФайлы Цикл
			Результат.ДобавитьСтроку(ПолноеИмяФайла);
		КонецЦикла;
	КонецЕсли;
	Текст = Результат.ПолучитьТекст();
	
	Возврат Лев(Текст, СтрДлина(Текст) - 1);
КонецФункции
#КонецЕсли

Функция Загрузить(КонтекстЯдра, Путь) Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	ДеревоТестов = Неопределено;
	Для Сч = 1 По СтрЧислоСтрок(Путь) Цикл
		ФайлОбработки = Новый Файл(СтрПолучитьСтроку(Путь, Сч));
		ПроверитьКорректностьФайла(ФайлОбработки);
		
		Если ДеревоТестов = Неопределено Тогда
			ДеревоТестов = ПостроительДереваТестов.СоздатьКонтейнер(ФайлОбработки.Путь);
		КонецЕсли;
		
		КонтейнерСТестамиОбработки = ЗагрузитьФайл(ПостроительДереваТестов, ФайлОбработки);
		Если КонтейнерСТестамиОбработки.Строки.Количество() > 0 Тогда
			ДеревоТестов.Строки.Добавить(КонтейнерСТестамиОбработки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоТестов;
КонецФункции

Функция ПолучитьКонтекстПоПути(КонтекстЯдра, Путь) Экспорт
	ФайлОбработки = Новый Файл(Путь);
	ПроверитьКорректностьФайла(ФайлОбработки);
	
	Обработка = ВнешниеОбработки.Создать(ФайлОбработки.ПолноеИмя);
	
	Возврат Обработка;
КонецФункции
// } Loader interface

Процедура ПроверитьКорректностьФайла(Файл)
	Если Не Файл.Существует() Тогда
		ВызватьИсключение "Переданный файл не существует файл <" + Файл.ПолноеИмя + ">";
	КонецЕсли;
	Если Файл.ЭтоКаталог() Тогда
		ВызватьИсключение "Передан каталог вместо файла <" + Файл.ПолноеИмя + ">";
	КонецЕсли;
КонецПроцедуры

Функция ЗагрузитьФайл(ПостроительДереваТестов, ФайлОбработки) Экспорт
	Обработка = ВнешниеОбработки.Создать(ФайлОбработки.ПолноеИмя, Ложь);
	Попытка
		СписокТестов = Обработка.ПолучитьСписокТестов();
	Исключение
		// TODO добавить обработку ошибок
		Описание = ОписаниеОшибки();
		Сообщить(Описание);
	КонецПопытки;
	СлучайныйПорядокВыполнения = Истина;
	Попытка
		СлучайныйПорядокВыполнения = Обработка.РазрешенСлучайныйПорядокВыполненияТестов();
	Исключение
	КонецПопытки;
	
	Контейнер = ПолучитьКонтейнерДереваТестовПоСпискуТестов(ПостроительДереваТестов, СписокТестов, ФайлОбработки.ИмяБезРасширения, ФайлОбработки.ПолноеИмя, СлучайныйПорядокВыполнения);
	
	Возврат Контейнер;
КонецФункции

Функция ПолучитьКонтейнерДереваТестовПоСпискуТестов(ПостроительДереваТестов, СписокТестов, ИмяКонтейнера, Путь, СлучайныйПорядокВыполнения = Истина) Экспорт
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер(ИмяКонтейнера, ПостроительДереваТестов.ИконкиУзловДереваТестов.Обработка);
	Контейнер.СлучайныйПорядокВыполнения = СлучайныйПорядокВыполнения;
	Если ЗначениеЗаполнено(СписокТестов) И ТипЗнч(СписокТестов) = Тип("Массив") Тогда
		Для каждого Тест Из СписокТестов Цикл
			Элемент = Неопределено;
			Если ТипЗнч(Тест) = Тип("Строка") Тогда
				Элемент = ПостроительДереваТестов.СоздатьЭлемент(Путь, Тест);
			ИначеЕсли ТипЗнч(Тест) = Тип("Структура") Тогда
				ИмяМетода = Тест.ИмяТеста;
				Представление = Неопределено;
				Если Не Тест.Свойство("ПредставлениеТеста", Представление) Тогда
					Представление = ИмяМетода;
				КонецЕсли;
				Элемент = ПостроительДереваТестов.СоздатьЭлемент(Путь, ИмяМетода, Представление);
				Параметр = Неопределено;
				Если Тест.Свойство("Параметр", Параметр) Тогда
					Элемент.Параметры.Добавить(Параметр);
				КонецЕсли;
			Иначе
				ВызватьИсключение "Тест может быть описан либо строкой либо структурой";
			КонецЕсли;
			Если ЗначениеЗаполнено(Элемент) Тогда
				Контейнер.Строки.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Контейнер;
КонецФункции
