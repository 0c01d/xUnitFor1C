Перем мЗначенияТиповСтроки Экспорт;

// { Plugin interface
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Тип", ВозможныеТипыПлагинов.Загрузчик);
	Результат.Вставить("Идентификатор", Метаданные().Имя);
	Результат.Вставить("Представление", "Загрузить тесты из конфигурации");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции
// } Plugin interface

// { Loader interface
#Если ТолстыйКлиентОбычноеПриложение Тогда
Функция ВыбратьПутьИнтерактивно(ТекущийПуть = "") Экспорт
	ФормаВыбораПодсистем = ЭтотОбъект.ПолучитьФорму("ФормаВыбораПодсистемы");
	ФормаВыбораПодсистем.РежимВыбора = Истина;
	ФормаВыбораПодсистем.ОтборПоИмениТеста = "";
	ВыбранныйПуть = ФормаВыбораПодсистем.ОткрытьМодально();
	
	Возврат ВыбранныйПуть;
КонецФункции
#КонецЕсли

Функция Загрузить(КонтекстЯдра, Путь) Экспорт
	Перем ДеревоТестов;
	
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	ЗагрузчикФайла = КонтекстЯдра.Плагин("ЗагрузчикФайла");
	
	ДеревоТестов = ЗагрузитьПуть(Путь, ПостроительДереваТестов, ЗагрузчикФайла);
	
	Возврат ДеревоТестов;
КонецФункции

Функция ПолучитьКонтекстПоПути(КонтекстЯдра, Путь) Экспорт
	ОбъектМетаданных = ПолучитьОбъектМетаданныхПоПути(Путь);
	Контекст = СоздатьОбработкуПоМетаданным(ОбъектМетаданных);
	
	Возврат Контекст;
КонецФункции
// } Loader interface

Функция ЗагрузитьПуть(Путь, ПостроительДереваТестов, ЗагрузчикФайла) Экспорт
	ОбъектМетаданных = ПолучитьОбъектМетаданныхПоПути(Путь);
	ДеревоТестов = ОбработатьОбъектМетаданных(ОбъектМетаданных, ПостроительДереваТестов, ЗагрузчикФайла);
	
	Возврат ДеревоТестов;
КонецФункции

Функция ПолучитьОбъектМетаданныхПоПути(Путь) Экспорт
	Перем ОбъектКонфигурации;
	Попытка
		Выполнить("ОбъектКонфигурации = " + Путь);
	Исключение
		ВызватьИсключение "Передан невалидный путь <" + Путь + ">";
	КонецПопытки;
	
	Возврат ОбъектКонфигурации;
КонецФункции

Функция ОбработатьОбъектМетаданных(ОбъектМетаданных, ПостроительДереваТестов, ЗагрузчикФайла)
	Если ЭтоПодсистема(ОбъектМетаданных) Тогда
		Контейнер = ЗагрузитьПодсистему(ОбъектМетаданных, ПостроительДереваТестов, ЗагрузчикФайла);
	Иначе
		Контейнер = ЗагрузитьОбработку(ОбъектМетаданных, ПостроительДереваТестов, ЗагрузчикФайла);
	КонецЕсли;
	
	Возврат Контейнер;
КонецФункции

Функция ЭтоПодсистема(ОбъектМетаданных)
	Возврат (Найти(НРег(ОбъектМетаданных.ПолноеИмя()), НРег("Подсистема")) > 0);
КонецФункции

Функция ЗагрузитьПодсистему(Подсистема, ПостроительДереваТестов, ЗагрузчикФайла)
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер(Подсистема.Имя, ПостроительДереваТестов.ИконкиУзловДереваТестов.Подсистема);
	Для каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы цикл
		КонтейнерПодчиненнойПодсистемы = ЗагрузитьПодсистему(ПодчиненнаяПодсистема, ПостроительДереваТестов, ЗагрузчикФайла);
		Если КонтейнерПодчиненнойПодсистемы.Строки.Количество() > 0 Тогда
			Контейнер.Строки.Добавить(КонтейнерПодчиненнойПодсистемы);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ДочернееМетаданное Из Подсистема.Состав цикл
		Если Метаданные.Обработки.Найти(ДочернееМетаданное.Имя) <> Неопределено Тогда
			КонтейнерСТестамиОбработки = ЗагрузитьОбработку(ДочернееМетаданное, ПостроительДереваТестов, ЗагрузчикФайла);
			Если КонтейнерСТестамиОбработки.Строки.Количество() > 0 Тогда
				Контейнер.Строки.Добавить(КонтейнерСТестамиОбработки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Контейнер;
КонецФункции

Функция ЗагрузитьОбработку(МетаданныеОбработки, ПостроительДереваТестов, ЗагрузчикФайла)
	Обработка = СоздатьОбработкуПоМетаданным(МетаданныеОбработки);
	Попытка
		СписокТестов = Обработка.ПолучитьСписокТестов();
	Исключение
		Описание = ОписаниеОшибки();
		Если Найти(Описание, "Недостаточно фактических параметров") > 0 Тогда
			ВызватьИсключение "Старый формат тестов в обработке тестов <"+МетаданныеОбработки.Имя+">."+Символы.ПС+
				"Метод ПолучитьСписокТестов сейчас не принимает параметров";
		КонецЕсли;
		
		Если Найти(Описание, "Метод объекта не обнаружен (ПолучитьСписокТестов)") = 0 Тогда
			ВызватьИсключение Описание;
		КонецЕсли;
	КонецПопытки;
	Путь = СтрЗаменить("Метаданные." + МетаданныеОбработки.ПолноеИмя(), ".Обработка.", ".Обработки.");
	Контейнер = ЗагрузчикФайла.ПолучитьКонтейнерДереваТестовПоСпискуТестов(ПостроительДереваТестов, СписокТестов, МетаданныеОбработки.Имя, Путь);
	
	Возврат Контейнер;
КонецФункции

Функция СоздатьОбработкуПоМетаданным(МетаданныеОбработки)
	Возврат Обработки[МетаданныеОбработки.Имя].Создать();
КонецФункции

//{ Работа со встроенными в конфигурацию тестами и подсистемами
Процедура ЗаполнитьДеревоПодсистем(ДеревоПодсистем, ОтборПоИмениТеста) Экспорт
	Для каждого МетаПодсистема из Метаданные.Подсистемы цикл
		ДобавитьПодсистемуВДерево(МетаПодсистема, ДеревоПодсистем, ЭтотОбъект, ОтборПоИмениТеста);
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьПодсистемуВДерево(ТекМетаПодсистема, РодительскаяСтрока, ОбработкаОбъект, ОтборПоИмениТеста)
	СтрокаПодсистемы = ПодчиненныеСтроки(РодительскаяСтрока).Добавить();
	СтрокаПодсистемы.Имя = ТекМетаПодсистема.Имя;
	СтрокаПодсистемы.Путь = "Метаданные."+СтрЗаменить(ТекМетаПодсистема.ПолноеИмя(), "Подсистема.", "Подсистемы.");
	СтрокаПодсистемы.ТипСтроки = мЗначенияТиповСтроки.Подсистема;
	Для Каждого Подсистема из ТекМетаПодсистема.Подсистемы Цикл 
		ДобавитьПодсистемуВДерево(Подсистема,СтрокаПодсистемы, ОбработкаОбъект, ОтборПоИмениТеста);
	КонецЦикла;
	
	Для каждого ОбъектМетаданных из ТекМетаПодсистема.Состав цикл
		Если Найти(ОбъектМетаданных.ПолноеИмя(), "Обработка."+ОтборПоИмениТеста) = 1 Тогда
			СтрокаТеста = ПодчиненныеСтроки(СтрокаПодсистемы).Добавить();
			СтрокаТеста.Имя = ОбъектМетаданных.Имя;
			СтрокаТеста.Путь = "Метаданные."+СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), "Обработка.", "Обработки.");
			СтрокаТеста.ТипСтроки = мЗначенияТиповСтроки.ТестовыйСлучай;
		КонецЕсли;
	КонецЦикла;
	
	Если ПодчиненныеСтроки(СтрокаПодсистемы).Количество() = 0 Тогда
		ПодчиненныеСтроки(РодительскаяСтрока).Удалить(СтрокаПодсистемы);
	КонецЕсли;
	
КонецФункции

Функция ПодчиненныеСтроки(СтрокаДерева, РезЭтоСтрокаДереваУФ = Ложь) Экспорт
	РезЭтоСтрокаДереваУФ = ЭтоСтрокаДереваУФ(СтрокаДерева);
    Если Не РезЭтоСтрокаДереваУФ Тогда
        Строки = СтрокаДерева.Строки;
    Иначе
        Строки = СтрокаДерева.ПолучитьЭлементы();
	КонецЕсли;
	Возврат Строки;
КонецФункции

Функция ЭтоСтрокаДереваУФ(СтрокаДерева)
	Рез = Ложь;
    Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") ИЛИ ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
    ИначеЕсли ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") ИЛИ ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыДерево") Тогда
		Рез = Истина;
	КонецЕсли;
	Возврат Рез;
КонецФункции
//}

мЗначенияТиповСтроки = Новый Структура;
мЗначенияТиповСтроки.Вставить("КаталогТестов", 0);
мЗначенияТиповСтроки.Вставить("ТестовыйСлучай", 1);
мЗначенияТиповСтроки.Вставить("ТестовыйМетод", 2);
мЗначенияТиповСтроки.Вставить("Подсистема", 3);
мЗначенияТиповСтроки.Вставить("Ошибка", 9);
мЗначенияТиповСтроки = Новый ФиксированнаяСтруктура(мЗначенияТиповСтроки);
