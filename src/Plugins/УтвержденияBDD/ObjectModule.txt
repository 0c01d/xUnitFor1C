перем ПримитивныеТипы ;
перем УниверсальныеКоллекцииЗначений;

Перем СтатусыРезультатаТестирования;
Перем ФлагОтрицанияДляСообщения;

// { Plugin interface
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
    Результат = Новый Структура;
    Результат.Вставить("Тип", ВозможныеТипыПлагинов.Утилита);
    Результат.Вставить("Идентификатор", Метаданные().Имя);
    Результат.Вставить("Представление", "УтвержденияBDD с рекурсивной проверкой для структуры");
    Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
    
КонецПроцедуры
// } Plugin interface

Функция Что(Знач ПроверяемоеЗначение, Знач Сообщение = "") Экспорт
    ЭтотОбъект.ПроверяемоеЗначение = ПроверяемоеЗначение;
    ЭтотОбъект.ДопСообщениеОшибки = Сообщение;
    ЭтотОбъект.ФлагОтрицания = Ложь;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция Не_() Экспорт
    ЭтотОбъект.ФлагОтрицания = Истина;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция ЭтоНе() Экспорт
    Возврат Не_();
КонецФункции

Функция Метод(Знач ИмяМетода, Знач ПараметрыМетода = Неопределено) Экспорт
    ЭтотОбъект.ИмяМетода = ИмяМетода;
    ЭтотОбъект.ПараметрыМетода = ПараметрыМетода;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция ЭтоИстина() Экспорт
    Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение = Истина) Тогда
        СообщениеОшибки = СформироватьСообщениеОбОшибке(Формат(ПроверяемоеЗначение, "БЛ=Ложь; БИ=Истина"), "является ИСТИНОЙ.");
        ВызватьОшибкуПроверки(СообщениеОшибки);
    КонецЕсли;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция ЕстьИстина() Экспорт
    Возврат ЭтоИстина();
КонецФункции

Функция ЭтоЛожь() Экспорт
    Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение = Ложь) Тогда
        СообщениеОшибки = СформироватьСообщениеОбОшибке(Формат(ПроверяемоеЗначение, "БЛ=Ложь; БИ=Истина"), "является ЛОЖЬЮ.");
        ВызватьОшибкуПроверки(СообщениеОшибки);
    КонецЕсли;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция ЕстьЛожь() Экспорт
    Возврат ЭтоЛожь();
КонецФункции

Функция Равно(Знач ОжидаемоеЗначение) Экспорт
    
    СтрокиПроверки = новый Массив;
    СтрокаОшибки = "";
    СтрокиПроверки.Очистить();
    
    РезультатПроверки = Проверить2Значения(ПроверяемоеЗначение,ОжидаемоеЗначение);
    Результат = РезультатПроверки.Тип = 0;
    Если РезультатПроверки.Тип = 0 тогда
        ВызватьОшибкуПроверки(РезультатПроверки.Результат);
    КонецЕсли;
    Возврат ЭтотОбъект;
КонецФункции

Функция Больше(Знач МеньшееЗначение) Экспорт
    Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение > МеньшееЗначение) Тогда
        СообщениеОшибки = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, "БОЛЬШЕ (" + МеньшееЗначение + ").");
        ВызватьОшибкуПроверки(СообщениеОшибки);
    КонецЕсли;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция БольшеИлиРавно(Знач МеньшееИлиРавноеЗначение) Экспорт
    Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение >= МеньшееИлиРавноеЗначение) Тогда
        СообщениеОшибки = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, "БОЛЬШЕ ИЛИ РАВНО (" + МеньшееИлиРавноеЗначение + ").");
        ВызватьОшибкуПроверки(СообщениеОшибки);
    КонецЕсли;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция Минимум(Знач МинимальноеЗначение) Экспорт
    Возврат БольшеИлиРавно(МинимальноеЗначение);
КонецФункции

Функция МеньшеИлиРавно(Знач БольшееИлиРавноеЗначение) Экспорт
    Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение <= БольшееИлиРавноеЗначение) Тогда
        СообщениеОшибки = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, "МЕНЬШЕ ИЛИ РАВНО (" + БольшееИлиРавноеЗначение + ").");
        ВызватьОшибкуПроверки(СообщениеОшибки);
    КонецЕсли;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция Максимум(Знач МаксимальноеЗначение) Экспорт
    Возврат МеньшеИлиРавно(МаксимальноеЗначение);
КонецФункции

Функция Меньше(Знач БольшееЗначение) Экспорт
    Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение < БольшееЗначение) Тогда
        СообщениеОшибки = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, "МЕНЬШЕ (" + БольшееЗначение + ").");
        ВызватьОшибкуПроверки(СообщениеОшибки);
    КонецЕсли;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция Заполнено() Экспорт
    Если Не ЛогическоеВыражениеВерно(ЗначениеЗаполнено(ПроверяемоеЗначение)) Тогда
        СообщениеОшибки = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, "является ЗАПОЛНЕННЫМ.");
        ВызватьОшибкуПроверки(СообщениеОшибки);
    КонецЕсли;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция Существует() Экспорт
    Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение <> Неопределено И ПроверяемоеЗначение <> Null) Тогда
        СообщениеОшибки = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, "СУЩЕСТВУЕТ.");
        ВызватьОшибкуПроверки(СообщениеОшибки);
    КонецЕсли;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция ЭтоНеопределено() Экспорт
    Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение = Неопределено) Тогда
        СообщениеОшибки = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, "является НЕОПРЕДЕЛЕНО.");
        ВызватьОшибкуПроверки(СообщениеОшибки);
    КонецЕсли;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция ЕстьНеопределено() Экспорт
    Возврат ЭтоНеопределено();
КонецФункции

Функция ЭтоNull() Экспорт
    Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение = Null) Тогда
        СообщениеОшибки = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, "является NULL.");
        ВызватьОшибкуПроверки(СообщениеОшибки);
    КонецЕсли;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция ЕстьNull() Экспорт
    Возврат ЭтоNull();
КонецФункции

Функция ИмеетТип(Знач ТипИлиИмяТипа) Экспорт
    ОжидаемыйТип = ?(ТипЗнч(ТипИлиИмяТипа) = Тип("Строка"), Тип(ТипИлиИмяТипа), ТипИлиИмяТипа);
    ТипПроверяемогоЗначения = ТипЗнч(ПроверяемоеЗначение);
    Если Не ЛогическоеВыражениеВерно(ТипПроверяемогоЗначения = ОжидаемыйТип) Тогда
        СообщениеОшибки = СформироватьСообщениеОбОшибке("тип - " + ТипПроверяемогоЗначения, "имеет тип (" + ОжидаемыйТип + ").");
        ВызватьОшибкуПроверки(СообщениеОшибки);
    КонецЕсли;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция Между(Знач НачальноеЗначение, Знач КонечноеЗначение) Экспорт
    Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение >= НачальноеЗначение И ПроверяемоеЗначение <= КонечноеЗначение) Тогда
        СообщениеОшибки = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, "МЕЖДУ (" + НачальноеЗначение + ") и (" + КонечноеЗначение + ").");
        ВызватьОшибкуПроверки(СообщениеОшибки);
    КонецЕсли;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция Содержит(Знач ИскомоеЗначение) Экспорт
    Перем ИскомоеЗначениеНайдено;
    
    ТипПроверяемоегоЗначения = ТипЗнч(ПроверяемоеЗначение);
    Если ТипПроверяемоегоЗначения = Тип("Строка") Тогда
        ИскомоеЗначениеНайдено = Найти(ПроверяемоеЗначение, ИскомоеЗначение) > 0;
    ИначеЕсли ТипПроверяемоегоЗначения = Тип("Массив") Или ТипПроверяемоегоЗначения = Тип("ФиксированныйМассив") Тогда
        ИскомоеЗначениеНайдено = ПроверяемоеЗначение.Найти(ИскомоеЗначение) <> Неопределено;
    ИначеЕсли ТипПроверяемоегоЗначения = Тип("Структура") Или ТипПроверяемоегоЗначения = Тип("ФиксированнаяСтруктура")
        Или ТипПроверяемоегоЗначения = Тип("Соответствие") Или ТипПроверяемоегоЗначения = Тип("ФиксированноеСоответствие") Тогда
        Для каждого КлючЗначение Из ПроверяемоеЗначение Цикл
            ИскомоеЗначениеНайдено = КлючЗначение.Значение = ИскомоеЗначение;
            Если ИскомоеЗначениеНайдено Тогда
                Прервать;
            КонецЕсли;
        КонецЦикла;
    ИначеЕсли ТипПроверяемоегоЗначения = Тип("СписокЗначений") Тогда
        ИскомоеЗначениеНайдено = ПроверяемоеЗначение.НайтиПоЗначению(ИскомоеЗначение) <> Неопределено;
    КонецЕсли;
    
    Если ИскомоеЗначениеНайдено = Неопределено Тогда
        СообщениеОшибки = "Утверждение ""Содержит"" не умеет работать с типом <" + ТипПроверяемоегоЗначения + ">." + ФорматДСО(ДопСообщениеОшибки);
        ВызватьИсключение СообщениеОшибки;
    КонецЕсли;
    
    Если Не ЛогическоеВыражениеВерно(ИскомоеЗначениеНайдено) Тогда
        СообщениеОшибки = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, "СОДЕРЖИТ (" + ИскомоеЗначение + ").");
        ВызватьОшибкуПроверки(СообщениеОшибки);
    КонецЕсли;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция ИмеетДлину(Знач ОжидаемаяДлина) Экспорт
    Перем ФактическаяДлина;
    
    ТипПроверяемоегоЗначения = ТипЗнч(ПроверяемоеЗначение);
    Если ТипПроверяемоегоЗначения = Тип("Строка") Тогда
        ФактическаяДлина = СтрДлина(ПроверяемоеЗначение);
    ИначеЕсли ТипПроверяемоегоЗначения = Тип("Массив") Или ТипПроверяемоегоЗначения = Тип("ФиксированныйМассив")
        Или ТипПроверяемоегоЗначения = Тип("Структура") Или ТипПроверяемоегоЗначения = Тип("ФиксированнаяСтруктура")
        Или ТипПроверяемоегоЗначения = Тип("Соответствие") Или ТипПроверяемоегоЗначения = Тип("ФиксированноеСоответствие")
        Или ТипПроверяемоегоЗначения = Тип("СписокЗначений") Тогда
        ФактическаяДлина = ПроверяемоеЗначение.Количество();
    КонецЕсли;
    
    Если ФактическаяДлина = Неопределено Тогда
        СообщениеОшибки = "Утверждение ""ИмеетДлину"" не умеет работать с типом <" + ТипПроверяемоегоЗначения + ">." + ФорматДСО(ДопСообщениеОшибки);
        ВызватьИсключение СообщениеОшибки;
    КонецЕсли;
    
    Если Не ЛогическоеВыражениеВерно(ФактическаяДлина = ОжидаемаяДлина) Тогда
        СообщениеОшибки = СформироватьСообщениеОбОшибке("<" +ПроверяемоеЗначение + "> с длиной " + ФактическаяДлина, "ИМЕЕТ ДЛИНУ (" + ОжидаемаяДлина + ").");
        ВызватьОшибкуПроверки(СообщениеОшибки);
    КонецЕсли;
    
    Возврат ЭтотОбъект;
КонецФункции

Функция ВыбрасываетИсключение(Знач ФрагментИсключения = "") Экспорт
    Контекст = ПроверяемоеЗначение;
    СтрокаПараметры = "";
    Если ТипЗнч(ПараметрыМетода) = Тип("Массив") Тогда
        Для Сч = 0 По ПараметрыМетода.Количество() - 1 Цикл
            СтрокаПараметры = СтрокаПараметры + ",ПараметрыМетода[" + Сч + "]";
        КонецЦикла;
        СтрокаПараметры = Сред(СтрокаПараметры, 2);
    КонецЕсли;
    СтрокаДляВыполнения = "Контекст." + ИмяМетода + "(" + СтрокаПараметры + ")";
    
    ИсключениеВозникло = Ложь;
    Попытка
        Выполнить(СтрокаДляВыполнения);
    Исключение
        ИсключениеВозникло = Истина;
        ТекстИсключения = ОписаниеОшибки();
    КонецПопытки;
    
    Если Не ЛогическоеВыражениеВерно(ИсключениеВозникло И Найти(ТекстИсключения, ФрагментИсключения) > 0) Тогда
        СообщениеОшибки = "Ожидали, что " + СтрокаДляВыполнения
        + ?(ФлагОтрицания, " НЕ ", " ")
        + "ВЫБРОСИТ ИСКЛЮЧЕНИЕ"
        + ?(ЗначениеЗаполнено(ФрагментИсключения), " СОДЕРЖАЩЕЕ ТЕКСТ <" + ФрагментИсключения + ">, а был текст <" + ТекстИсключения + ">.", "");
        ВызватьОшибкуПроверки(СообщениеОшибки);
    КонецЕсли;
    
    Возврат ЭтотОбъект;
КонецФункции

// { Helpers
Функция ФорматДСО(Знач ДопСообщениеОшибки)
    Если ДопСообщениеОшибки = "" Тогда
        Возврат "";
    КонецЕсли;
    
    Возврат Символы.ПС + ДопСообщениеОшибки;
КонецФункции

Процедура ВызватьОшибкуПроверки(Знач СообщениеОшибки)
    Префикс = "["+ СтатусыРезультатаТестирования.ОшибкаПроверки + "]";
    ВызватьИсключение Префикс + " " + СообщениеОшибки;
КонецПроцедуры

Функция ЛогическоеВыражениеВерно(Знач ЛогическоеВыражение)
    Результат = ФлагОтрицания <> ЛогическоеВыражение;
    ФлагОтрицанияДляСообщения = ФлагОтрицания;
    ФлагОтрицания = Ложь;
    
    Возврат Результат;
КонецФункции

Функция СформироватьСообщениеОбОшибке(Знач ПроверяемоеЗначение, Знач Ожидание)
    Возврат "Ожидали, что проверяемое значение (" + ПроверяемоеЗначение + ")" + ?(ФлагОтрицанияДляСообщения, " НЕ ", " ") + Ожидание + ФорматДСО(ДопСообщениеОшибки);
КонецФункции



Функция Ок(значение)
    возврат Новый Структура("Тип,Результат",1,Значение)
КонецФункции

Функция Ошибка(значение)
    возврат Новый Структура("Тип,Результат",0,Значение)
КонецФункции

функция Проверить2Значения(Проверяемое,Ожидание) экспорт
    типЧто = ТипЗнч(Проверяемое);
    типСЧем = ТипЗнч(Ожидание);
    если типЧто <> типСЧем тогда
        Возврат Ошибка("Типы различаются. Первый - "+типЧто+", Второй - "+типСЧем);
    конецЕсли;
    
    // типы равны!
    если ПримитивныеТипы.СодержитТип(типЧто) тогда
        Если ЛогическоеВыражениеВерно(Проверяемое = Ожидание) тогда
            Возврат Ок(Истина);
        Иначе
            Возврат Ошибка(ФорматированныйВывод("Ожидали, что проверяемое значение (%1) РАВНО (%2)",Проверяемое,Ожидание));
            Возврат ложь;
        КонецЕсли;
    конецЕсли;
    
    уФункция = УниверсальныеКоллекцииЗначений[типЧто];
    если уФункция<> Неопределено тогда
        попытка
            x = Проверяемое;
            y = Ожидание;
            возврат Вычислить(уФункция);
        исключение
            Возврат Ошибка(ОписаниеОшибки());
        конецПопытки
    конецЕсли;
    

конецФункции



функция СравнитьСтруктура(хСтруктура,уСтруктура)
    Если не хСтруктура.Количество() = уСтруктура.Количество() тогда
        Возврат Ошибка(ФорматированныйВывод("Разное количество полей. Ожилось (%1), передано (%2)",хСтруктура.Количество,уСтруктура.Количество()));
    КонецЕсли;
    уЗначение = Неопределено;
    для каждого х из хСтруктура цикл
        уСтруктура.Свойство(х.Ключ,уЗначение);
        РезультатПроверки = Проверить2Значения(х.Значение,уЗначение);
        если не РезультатПроверки.Тип = 1 тогда
            Возврат Ошибка(ФорматированныйВывод("Для ключа %1 ожидается '%2', передано '%3' 
            |%4",х.Ключ,х.Значение,уЗначение,РезультатПроверки.Результат));
        конецЕсли;
    конецЦикла;
    возврат Ок(Истина);
конецФункции


Функция СравнитьСоответствие(хСоответствие,уСоответствие)
    Если не хСоответствие.Количество() = уСоответствие.Количество() тогда
        Возврат Ошибка(ФорматированныйВывод("Разное количество полей. Ожилось (%1), передано (%2)",хСоответствие.Количество,уСоответствие.Количество()));
    КонецЕсли;
    
    для каждого х из хСоответствие цикл
        уЗначение = уСоответствие[х.Ключ];
        РезультатПроверки = Проверить2Значения(х.Значение,уЗначение);
        если не РезультатПроверки.Тип = 1 тогда
            Возврат Ошибка(ФорматированныйВывод("Для ключа %1 ожидается '%2', передано '%3' ",х.Ключ,х.Значение,уЗначение));
        конецЕсли;
    конецЦикла;
    возврат Ок(Истина);
конецФункции

функция СравнитьМассив(хМассив,уМассив)
    если хМассив.Количество() <> уМассив.Количество() тогда
        Возврат Ошибка(ФорматированныйВывод("Разное количество полей. Ожилось (%1), передано (%2)",хМассив.Количество,уМассив.Количество()));
    конецЕсли;
    всегоСтрок = хМассив.Количество() -1;
    для х=0 по всегоСтрок цикл
        РезультатПроверки = Проверить2Значения(хМассив[х],уМассив[х]);
        если не РезультатПроверки.Тип = 1  тогда
            Возврат Ошибка(ФорматированныйВывод("Для строки %1 ожидается '%2', передано '%3' ",х,хМассив[х],уМассив[х]));
        конецЕсли;
    конецЦикла;
    возврат Ок(Истина);
КонецФункции


функция СравнитьСписокЗначений(хСписок,уСписок)
    
    если хСписок.Количество() <> уСписок.Количество() тогда
        Возврат Ошибка(ФорматированныйВывод("Разное количество полей. Ожилось (%1), передано (%2)",хСписок.Количество,уСписок.Количество()));
    конецЕсли;
    всегоСтрок = хСписок.Количество() -1;
    для х=0 по всегоСтрок цикл
        хЭлемент = хСписок.Получить(х);
        уЭлемент = уСписок.Получить(х);
        РезультатПроверки = Проверить2Значения(хЭлемент.Представление,уЭлемент.Представление);
        если не РезультатПроверки.Тип = 1  тогда                                                                                                        
            Возврат Ошибка(ФорматированныйВывод("Представления различаются .  Ожидается '%1', передано '%2'",хЭлемент.Значение,уЭлемент.Значение));
        конецЕсли;
        РезультатПроверки = Проверить2Значения(хЭлемент.Значение,уЭлемент.Значение);
        если не РезультатПроверки.Тип = 1  тогда                                                                                                        
            Возврат Ошибка(ФорматированныйВывод("Значения различаются .  Ожидается '%1', передано '%2'",хЭлемент.Значение,уЭлемент.Значение));
        конецЕсли;
    конецЦикла;
    возврат Ок(Истина);
КонецФункции



Функция СравнитьТаблицаЗначений(хТЗ,уТЗ)
    
    если хТЗ.Количество() <> уТЗ.Количество() тогда
        Возврат Ошибка(ФорматированныйВывод("Разное количество строк. Ожилось (%1), передано (%2)",хТЗ.Количество(),уТЗ.Количество()));
    конецЕсли;
    
    если хТЗ.Колонки.Количество() <> уТЗ.Колонки.Количество() тогда
        Возврат Ошибка(ФорматированныйВывод("Разное количество колонок. Ожилось (%1), передано (%2)",хТЗ.Количество(),уТЗ.Количество()));
    конецЕсли;
    
    СтрокаОшибки = "";
    для каждого х из хТЗ.Колонки цикл
        
        если Неопределено = уТЗ.Колонки.Найти(х.Имя) тогда
            СтрокаОшибки = СтрокаОшибки+?(ПустаяСтрока(СтрокаОшибки),"",Символы.ПС)+
            ФорматированныйВывод("Нет колонки '%1' во ТЗ с ожиданием",х.Имя);
        конецЕсли;
    конецЦикла;
    если не ПустаяСтрока(СтрокаОшибки) тогда
        Возврат Ошибка(СтрокаОшибки);
    конецЕсли;
    всегоСтрок = хТЗ.Количество() - 1;
    для х = 0 по всегоСтрок цикл
        хСтрока = хТЗ[х];
        уСтрока = уТЗ[х];
        для каждого у из хТЗ.Колонки цикл
            РезультатПроверки = Проверить2Значения(хСтрока[у.Имя],уСтрока[у.Имя]);
            если не РезультатПроверки.Тип = 1  тогда                                                                                                        
                СтрокаОшибки = СтрокаОшибки+?(ПустаяСтрока(СтрокаОшибки),"",Символы.ПС)+ФорматированныйВывод("Строка %1, колонка %2. Ожидалось %3, передано %4",х,у.Имя,хСтрока[у.Имя],уСтрока[у.Имя]);
            КонецЕсли;
        конецЦикла
    конецЦикла;
    Если не ПустаяСтрока(СтрокаОшибки) тогда
        Возврат Ошибка(СтрокаОшибки);
    КонецЕсли;
    возврат Ок(Истина);
конецФункции




функция СравнитьДеревоЗначений(хДерево,уДерево)
    если хДерево.Колонки.Количество() <> уДерево.Колонки.Количество() тогда
        Возврат Ошибка(ФорматированныйВывод("Разное количество строк. Ожилось (%1), передано (%2)",хДерево.Колонки.Количество(),уДерево.Колонки.Количество()));
    конецЕсли;
    
    // размерности совпадают. 
    для каждого х из хДерево.Колонки цикл
        если Неопределено = уДерево.Колонки.Найти(х.Имя) тогда
            СтрокаОшибки = СтрокаОшибки+?(ПустаяСтрока(СтрокаОшибки),"",Символы.ПС)+
            ФорматированныйВывод("Нет колонки '%1' во ДЗ с ожиданием",х.Имя);
        конецЕсли;
    конецЦикла;
    если не ПустаяСтрока(СтрокаОшибки) тогда
        Возврат Ошибка(СтрокаОшибки);
    конецЕсли;
    
	Возврат СравнитьСтрокиДереваЗначений(хДерево.Строки,уДерево.Строки,хДерево.Колонки);
КонецФункции

функция СравнитьСтрокиДереваЗначений(хСтроки,уСтроки,колонки)
    
    если хСтроки.Количество() <> уСтроки.Количество() тогда
		Возврат Ошибка(ФорматированныйВывод("Разное количество строк. Ожилось (%1), передано (%2)",хСтроки.Количество(),уСтроки.Количество()));
	конецЕсли;
    СтрокаОшибки = "";
    всегоСтрок = хСтроки.Количество() -1;
	для у = 0 по всегострок цикл
		хстрока = хСтроки[у];
		устрока = уСтроки[у];
		для каждого х из Колонки цикл
            РезультатПроверки = Проверить2Значения(хстрока[х.Имя],устрока[х.Имя]);
            если не РезультатПроверки.Тип = 1  тогда                                                                                                        
                СтрокаОшибки = СтрокаОшибки+?(ПустаяСтрока(СтрокаОшибки),"",Символы.ПС)+
                ФорматированныйВывод("Строка %1, колонка %2. Ожидалось %3, передано %4
                |%5",у,х.Имя,хСтрока[х.Имя],уСтрока[х.Имя],РезультатПроверки.Результат);
            КонецЕсли;
            
            РезультатПроверки = СравнитьСтрокиДереваЗначений(хстрока.Строки,устрока.Строки,колонки);
            если не РезультатПроверки.Тип = 1  тогда                                                                                                        
                СтрокаОшибки = СтрокаОшибки+?(ПустаяСтрока(СтрокаОшибки),"",Символы.ПС)+
                РезультатПроверки.Результат;
            КонецЕсли;
            
        конецЦикла;
	конецЦикла;
    Если не ПустаяСтрока(СтрокаОшибки) тогда
        Возврат Ошибка(СтрокаОшибки);
    КонецЕсли;
    возврат Ок(Истина);
конецФункции

Функция ФорматированныйВывод(Знач СтрокаФормата,п0 = Неопределено,п1 = Неопределено,п2 = Неопределено,п3 = Неопределено,п4 = Неопределено,п5 = Неопределено,п6 = Неопределено,п7 = Неопределено,п8 = Неопределено,п9 = Неопределено)
    
    МассивПараметров= новый Массив();
    МассивПараметров.Добавить(новый Структура("Имя,Значение","%10",п9));
    МассивПараметров.Добавить(новый Структура("Имя,Значение","%9",п8));
    МассивПараметров.Добавить(новый Структура("Имя,Значение","%8",п7));
    МассивПараметров.Добавить(новый Структура("Имя,Значение","%7",п6));
    МассивПараметров.Добавить(новый Структура("Имя,Значение","%6",п5));
    МассивПараметров.Добавить(новый Структура("Имя,Значение","%5",п4));
    МассивПараметров.Добавить(новый Структура("Имя,Значение","%4",п3));
    МассивПараметров.Добавить(новый Структура("Имя,Значение","%3",п2));
    МассивПараметров.Добавить(новый Структура("Имя,Значение","%2",п1));
    МассивПараметров.Добавить(новый Структура("Имя,Значение","%1",п0));

    для каждого х из МассивПараметров цикл
        СтрокаФормата = СтрЗаменить(СтрокаФормата,х.Имя,х.Значение);
    КонецЦикла;
    
    Возврат СтрокаФормата;
КонецФункции
// } Helpers

СтатусыРезультатаТестирования = Новый Структура;
СтатусыРезультатаТестирования.Вставить("ОшибкаПроверки", "Failed");
СтатусыРезультатаТестирования.Вставить("НеизвестнаяОшибка", "Broken");
СтатусыРезультатаТестирования.Вставить("ТестПропущен", "Pending");
СтатусыРезультатаТестирования = Новый ФиксированнаяСтруктура(СтатусыРезультатаТестирования);


массивТипов = новый Массив();
массивТипов.Добавить(Тип("Строка"));
массивТипов.Добавить(Тип("Число"));
массивТипов.Добавить(Тип("Дата"));
массивТипов.Добавить(Тип("NULL")); 
массивТипов.Добавить(Тип("Неопределено"));
массивТипов.Добавить(Тип("Тип"));
массивТипов.Добавить(Тип("Булево"));

ПримитивныеТипы = новый ОписаниеТипов(массивТипов);

УниверсальныеКоллекцииЗначений = новый Соответствие;
УниверсальныеКоллекцииЗначений[тип("Структура")] = "СравнитьСтруктура(x,y)";
УниверсальныеКоллекцииЗначений[тип("Массив")] = "СравнитьМассив(x,y)";
УниверсальныеКоллекцииЗначений[тип("СписокЗначений")] = "СравнитьСписокЗначений(x,y)";
УниверсальныеКоллекцииЗначений[тип("Соответствие")] = "СравнитьСоответствие(x,y)";
УниверсальныеКоллекцииЗначений[тип("ТаблицаЗначений")] = "СравнитьТаблицаЗначений(x,y)";
УниверсальныеКоллекцииЗначений[тип("ДеревоЗначений")] = "СравнитьДеревоЗначений(x,y)";



