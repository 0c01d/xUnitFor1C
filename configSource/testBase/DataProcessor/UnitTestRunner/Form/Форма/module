////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мМассивПиктограммСостояний;
Перем мМассивПиктограммТиповСтроки;

Перем мСохраненныйПутьОтдельногоТестовогоНабора;
Перем мАвтозапускТестовыхНаборов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Открывает диалог выбора каталога тестов.
// Возвращает Истину, если каталог выбран и ложь в противном случае.
// Путь к выбранному каталогу запоминается в реквизите формы Путь.
// 
Функция ВыбратьКаталогТестов()
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Каталог = Путь;
	
	Если ДиалогВыбораКаталога.Выбрать() Тогда
		
		Путь = ДиалогВыбораКаталога.Каталог;
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Разворачивает строки табличного поля дерева тестов.
// По умолчанию разворачивается только самый верхний уровень.
// 
Процедура РазвернутьСтрокиДерева(ВключаяПодчиненные=Ложь)
	
	Для каждого СтрокаДерева из ДеревоТестов.Строки Цикл
		ЭлементыФормы.тпДеревоТестов.Развернуть(СтрокаДерева, ВключаяПодчиненные);
	КонецЦикла;	
	
КонецПроцедуры

Функция ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(РодительскаяСтрока)
	коллекцияСтрок = РодительскаяСтрока.Строки;
	Если коллекцияСтрок.Количество() = 0 Тогда
		Возврат 1; // строка теста
	КонецЕсли;
	количествоТестов = 0;
	Для каждого СтрокаДерева из коллекцияСтрок Цикл
		лКоличество = ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаДерева);
		СтрокаДерева.КоличествоТестов = лКоличество;
        количествоТестов = количествоТестов + лКоличество;
	КонецЦикла;
	Возврат количествоТестов;
КонецФункции

// Устанавливает начальное состояние индикатора выполнения тестов.
// 
Процедура ИнициализироватьИндикаторВыполнения(КоличествоТестовыхСлучаев = 0)
	
	ЭлементыФормы.ИндикаторВыполнения.МаксимальноеЗначение = КоличествоТестовыхСлучаев;
	ЭлементыФормы.ИндикаторВыполнения.Значение = 1;
	ЭлементыФормы.ИндикаторВыполнения.ЦветРамки = Новый Цвет(0, 174, 0); // Зеленый.
	
КонецПроцедуры

// Рекурсивно из строк дерева тестов запоминает в соответствии в качестве ключа
// только те строки дерева тестов, которые являются тестовыми случаями.
// Возвращает созданное и заполненное тестовыми случаями соответствие.
// 
Функция ПолучитьТолькоТестовыеСлучаи(СтрокиДереваТестов, КэшТестовыхСлучаев=Неопределено)
	
	Если КэшТестовыхСлучаев=Неопределено Тогда
		КэшТестовыхСлучаев = Новый Соответствие;
	КонецЕсли;
	
	Для каждого СтрокаДереваТестов из СтрокиДереваТестов Цикл
		Если СтрокаДереваТестов.ТипСтроки = мЗначенияТиповСтроки.ТестовыйМетод Тогда
			КэшТестовыхСлучаев.Вставить(СтрокаДереваТестов);
		Иначе
			ПолучитьТолькоТестовыеСлучаи(СтрокаДереваТестов.Строки, КэшТестовыхСлучаев);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КэшТестовыхСлучаев;
	
КонецФункции

Процедура ЗагрузитьТестыПоРанееСохраненнымПараметрам()
	лПараметры = ВосстановитьЗначение(ПолучитьИмяДляСохраненияПараметров());
	Если ЗначениеЗаполнено(лПараметры) Тогда
		Путь = лПараметры.Путь;
		мСохраненныйПутьОтдельногоТестовогоНабора = лПараметры.мСохраненныйПутьОтдельногоТестовогоНабора;
		
		Если ЗначениеЗаполнено(мСохраненныйПутьОтдельногоТестовогоНабора) Тогда
			
			Форма_ЗагрузитьОтдельныйТестовыйНабор(мСохраненныйПутьОтдельногоТестовогоНабора);
			
		ИначеЕсли ЗначениеЗаполнено(Путь) Тогда
			
			Форма_ЗагрузитьТестовыеНаборы();
			
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Функция ПолучитьИмяДляСохраненияПараметров()
	Возврат Метаданные().Имя + "_Параметры";
КонецФункции

Функция ПолучитьМассивПараметровЗапуска()

	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска, ";");
		//ПервыйПараметр = Врег(ПараметрыЗапуска[0]);
	
		//Отказ = ОбщегоНазначенияКлиентПереопределяемый.ОбработатьПараметрыЗапуска(
		//	ПервыйПараметр, ПараметрыЗапуска) Или Отказ;
	
	Возврат ПараметрыЗапуска;
	
КонецФункции

// Пример строки запуска - "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования"
//	"C:\Program Files (x86)\1cv82\8.2.18.96\bin\1cv8c.exe" /DisableStartupMessages /Execute E:\ТестыИМ\UnitTestRunner.epf /S "as-msk-a6122\im_test" /Out "E:\ТестыИМ\Тесты\log.txt"  /C "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования" /LogUI
Процедура ОбработатьПараметрыЗапуска(ПараметрЗапуска)
	файлЛога = Новый ТекстовыйДокумент;
	путьКТестам = "";
	естьКоманда_Загрузить = Ложь;
	естьКоманда_ВыполнитьТестирование = Ложь;
	естьПутьККаталогуОтчетов = Ложь;
	лЗавершитьРаботуПослеТестирования = Ложь;
	
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат ;
	КонецЕсли;
	
	параметрыЗапуска = ПолучитьМассивПараметровЗапуска();
	
		
	Для Номер = 0 По параметрыЗапуска.Количество()-1 Цикл
		ЭлементМассива = параметрыЗапуска.Получить(Номер);
		
		лКомандаЗапуска = НРег(ЭлементМассива);
		
		Если лКомандаЗапуска = НРег("Тесты_Команда_Тестировать") И ПараметрыЗапуска.Количество() > Номер Тогда
			естьКоманда_ВыполнитьТестирование = Истина;
		
		Если естьКоманда_ВыполнитьТестирование Тогда
			путьКТестам = ПараметрыЗапуска[Номер+1];
			естьКоманда_Загрузить = Истина;
			Продолжить;
			
		КонецЕсли;
		КонецЕсли;
		
		Если (лКомандаЗапуска = НРег("Тесты_Команда_Загрузить") И ПараметрыЗапуска.Количество() > Номер) Тогда 
		естьКоманда_Загрузить = Истина;
		Если естьКоманда_Загрузить Тогда
			путьКТестам = ПараметрыЗапуска[Номер+1];
			Продолжить;
		КонецЕсли;
		КонецЕсли;		
		//Сообщить("путьКТестам = <"+?(путьКТестам = Неопределено, "Неопределено", путьКТестам)+">"); 
		
		Если НРег(ЭлементМассива) = НРег("ЗавершитьРаботуПослеТестирования") Тогда
			лЗавершитьРаботуПослеТестирования = Истина;
		КонецЕсли;
		
		Если лКомандаЗапуска = НРег("Тесты_Команда_КаталогОтчетов") И ПараметрыЗапуска.Количество() > Номер Тогда
			ПутьОтчетаТестирования = ПараметрыЗапуска[Номер+1];
		КонецЕсли;
		
		Если лКомандаЗапуска = НРег("Тесты_Команда_ФорматОтчета") И ПараметрыЗапуска.Количество() > Номер Тогда
			ТипОтчетаОТестировании = ПараметрыЗапуска[Номер+1];
		КонецЕсли;
		
		Если (НРег(лКомандаЗапуска) = Нрег("out") ИЛИ НРег(лКомандаЗапуска) = Нрег("Тесты_Путь_КЛогам"))
			И ПараметрыЗапуска.Количество() > Номер Тогда
			
			ПутьКФайлуЛога = параметрыЗапуска[Номер+1];
		КонецЕсли;
		
	КонецЦикла;
		
			//КонецЕсли;
    
	Если Не естьКоманда_Загрузить Тогда
		Возврат ;
	КонецЕсли;
	
	ЭтаФорма.ЗавершитьРаботуПослеТестирования = лЗавершитьРаботуПослеТестирования;
	Если НЕ ПустаяСтрока(ПутьКФайлуЛога) Тогда
		Попытка
			Запись = Новый ЗаписьТекста(ПутьКФайлуЛога);
			Запись.ЗаписатьСтроку("1"); //По умолчанию считаем что ошибка. Перед завершением работы запишем 0. 
			Запись.Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	
	Если НЕ ПустаяСтрока(путьКТестам) И ПустаяСтрока(ПутьОтчетаТестирования) Тогда
		файл = Новый Файл(путьКТестам);
		Если файл.Существует() Тогда
			Если файл.ЭтоКаталог() Тогда
				ПутьОтчетаТестирования = путьКТестам + "\";
			Иначе
				ПутьОтчетаТестирования = файл.Путь + "\";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда 
		Если Не Прав(ПутьОтчетаТестирования,1) = "\" Тогда 
			ПутьОтчетаТестирования = ПутьОтчетаТестирования+"\";
		КонецЕсли;
	КонецЕсли;

	
	Если НЕ ПустаяСтрока(путьКТестам) Тогда
		мПуть = Путь;
		Путь = путьКТестам;
		Попытка
			Форма_ЗагрузитьТестовыеНаборы();
		Исключение
			текстОшибки = ОписаниеОшибки();
			ВывестиСообщение("ОШИБКА загрузки тестов: "+текстОшибки);
			Если лЗавершитьРаботуПослеТестирования Тогда
				ЗавершитьРаботуСистемы(Ложь);
				Возврат ;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Если естьКоманда_ВыполнитьТестирование Тогда
		Попытка
			ПодключитьОбработчикОжидания("ВыполнитьВсеТесты", 1, Истина);
		Исключение
			текстОшибки = ОписаниеОшибки();
			ВывестиСообщение("ОШИБКА выполнения тестов: "+текстОшибки);
			Если лЗавершитьРаботуПослеТестирования Тогда
				ЗавершитьРаботуСистемы(Ложь);
				Возврат ;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	ЭтаФорма.Заголовок = СокрЛП(Метаданные().Синоним) + ", версия " + Версия(); // специально ЭтотОбъект.Версия() для проверки Экспорта!
	
	ЗагрузитьТестыПоРанееСохраненнымПараметрам();
	
	ОбработатьПараметрыЗапуска(ПараметрЗапуска);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	лПараметры = Новый Структура("Путь, мСохраненныйПутьОтдельногоТестовогоНабора", Путь, мСохраненныйПутьОтдельногоТестовогоНабора);
	СохранитьЗначение(ПолучитьИмяДляСохраненияПараметров(), лПараметры);
КонецПроцедуры

// Обработка оповещений о загрузке или ходе выполнения тестов.
// 
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Возможные события:
	// 		1CUnit.TestLoaded
	// 		1CUnit.TestPassed
	// 		1CUnit.TestNotInplemented
	// 		1CUnit.TestFailed
	
	Если ИмяСобытия = "1CUnit.TestPassed" Тогда
		
		ЭлементыФормы.ИндикаторВыполнения.Значение = ЭлементыФормы.ИндикаторВыполнения.Значение + 1;
		
	ИначеЕсли ИмяСобытия = "1CUnit.TestNotImplemented" Тогда
		
		ЭлементыФормы.ИндикаторВыполнения.Значение = ЭлементыФормы.ИндикаторВыполнения.Значение + 1;
		
		Если ЭлементыФормы.ИндикаторВыполнения.ЦветРамки <> WebЦвета.Красный Тогда
			ЭлементыФормы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Золотой;
		КонецЕсли;
				
	ИначеЕсли ИмяСобытия = "1CUnit.TestFailed" Тогда
		
		ЭлементыФормы.ИндикаторВыполнения.Значение = ЭлементыФормы.ИндикаторВыполнения.Значение + 1;
		ЭлементыФормы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Красный;
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ СТРАНИЦЫ "Тестирование"

Процедура КнопкаВыполнитьВыделенныйНажатие(Элемент)
	
	// В случае множественного выделения в общем случае у нас могут быть одновременно выделены 
	// как строки на уровне обработок тестирования и папок, но и отдельные тестовые случаи.
	// Поэтому мы предварительно из выделенных строк получаем ТОЛЬКО строки, соответствующие 
	// тестовым случаям. При этом, если выделена строка обработки или папка, то значит надо выполнить
	// все тестовые случае, реализованные в этой обработке (или все тестовые случаи, реализованные во
	// всех обработках в выделенной папке). 
	
	КэшТестовыхСлучаев = ПолучитьТолькоТестовыеСлучаи(ЭлементыФормы.тпДеревоТестов.ВыделенныеСтроки);	
	
	ИнициализироватьИндикаторВыполнения(КэшТестовыхСлучаев.Количество());
	
	ПередВыполнениемТестов();
	
	датаНачалаТестирования = ТекущаяДата();
	
	ОчиститьСообщения();
	Для каждого ЭлементКэша  из КэшТестовыхСлучаев Цикл
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли 
		
		СтрокаТестовогоСлучая = ЭлементКэша.Ключ;		
		СтрокаТестовогоСлучая.Состояние = ВыполнитьТест(СтрокаТестовогоСлучая, мСписокОшибок);
		
		ИзменитьСостояниеВыполненияРодителей(СтрокаТестовогоСлучая);
		
	КонецЦикла;
	
	ВывестиОтчетТестирования(датаНачалаТестирования);
		//ВывестиОтчетТестирования(мСписокОшибок, мВсегоТестов, датаНачалаТестирования);
	
КонецПроцедуры

Процедура КнопкаВыполнитьВсеТестыНажатие(Элемент)
	
	ВыполнитьВсеТесты();
		
КонецПроцедуры

Процедура ВыполнитьВсеТесты()
	
	ИнициализироватьИндикаторВыполнения(мКоличествоТестовыхСлучаев);
	
	датаНачалаТестирования = ТекущаяДата();
	
	ОчиститьСообщения();
	ВыполнитьТесты(ДеревоТестов.Строки);
	
	Если ПустаяСтрока(ТипОтчетаОТестировании) Тогда
		ТипОтчетаОТестировании = "mxl";
	КонецЕсли;
	
	табДок = ВывестиОтчетТестирования(датаНачалаТестирования, ТипОтчетаОТестировании);
	
	имяФайлаТестирования = "лог_тестирования";
	
	Если табДок <> Неопределено Тогда
		//ПроверитьТип(табДок, "ТабличныйДокумент", "табДок");
		
		Если НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			
			Если ТипОтчетаОТестировании = "xml" Тогда
				ЗаписьXML = Новый ЗаписьXML;
				Попытка
					ЗаписьXML.ОткрытьФайл(ПутьОтчетаТестирования + "\" + имяФайлаТестирования + "."+ТипОтчетаОТестировании);
					ЗаписьXML.ЗаписатьОбъявлениеXML();
					ЗаписьXML.ЗаписатьБезОбработки(табДок.ПолучитьТекст());
					ЗаписьXML.Закрыть();
				Исключение
				КонецПопытки;
			Иначе
				
				Попытка
					табДок.Записать(ПутьОтчетаТестирования + "\" + имяФайлаТестирования + "."+ТипОтчетаОТестировании, ТипФайлаТабличногоДокумента[ТипОтчетаОТестировании]);
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		Иначе
			табДок.Показать("Отчет об автоматическом тестировании, 1CUnit v." + Версия());
		КонецЕсли;
	Иначе
		Если НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			Если ТипОтчетаОТестировании <> "xml" Тогда
					Если ТипОтчетаОТестировании = "xml" Тогда
						ЗаписьXML = Новый ЗаписьXML;
						Попытка
							ЗаписьXML.ОткрытьФайл(ПутьОтчетаТестирования + "\" + имяФайлаТестирования + "."+ТипОтчетаОТестировании);
							ЗаписьXML.ЗаписатьОбъявлениеXML();
							ЗаписьXML.ЗаписатьБезОбработки(табДок.ПолучитьТекст());
							ЗаписьXML.Закрыть();
						Исключение
							Сообщить("Не удалось записать "+ПутьОтчетаТестирования + "\" + имяФайлаТестирования + "."+ТипОтчетаОТестировании + " ошибка:"+ОписаниеОшибки());
						КонецПопытки;
					Иначе
						Попытка
							табДок.Записать(ПутьОтчетаТестирования + "\" + имяФайлаТестирования + "."+ТипОтчетаОТестировании, ТипФайлаТабличногоДокумента[ТипОтчетаОТестировании]);
						Исключение
						КонецПопытки;
					КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ЭтаФорма.ЗавершитьРаботуПослеТестирования Тогда
		
		Если НЕ ПустаяСтрока(ПутьКФайлуЛога) Тогда
			Попытка
				Запись = Новый ЗаписьТекста(ПутьКФайлуЛога);
				Запись.ЗаписатьСтроку("0"); //Перед завершением работы запишем 0, все завершилось, можно смотреть на отчеты. 
				Запись.Закрыть();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаЗагрузитьТестыНажатие(Элемент)
	мСохраненныйПутьОтдельногоТестовогоНабора = "";
	
	Если ВыбратьКаталогТестов() Тогда
		
		Форма_ЗагрузитьТестовыеНаборы();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаЗагрузитьТестыЗагрузитьТестКейс(Кнопка)
		
	ДиалогВыбораТеста = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораТеста.Фильтр = "Обработка-тест (*.epf)|*.epf|Все файлы|*";
	ДиалогВыбораТеста.МножественныйВыбор = Ложь;
	ДиалогВыбораТеста.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораТеста.Каталог = Путь;
	
	Если ДиалогВыбораТеста.Выбрать() Тогда
		
		Путь = ДиалогВыбораТеста.Каталог;
		Форма_ЗагрузитьОтдельныйТестовыйНабор(ДиалогВыбораТеста.ПолноеИмяФайла);
		
	КонецЕсли;
			
КонецПроцедуры

Процедура КнопкаПерезагрузитьНажатие(Элемент)
		
	Если ЗначениеЗаполнено(мСохраненныйПутьОтдельногоТестовогоНабора) Тогда
		
		Форма_ЗагрузитьОтдельныйТестовыйНабор(мСохраненныйПутьОтдельногоТестовогоНабора);
		
	ИначеЕсли ЗначениеЗаполнено(Путь) Тогда
		
		Форма_ЗагрузитьТестовыеНаборы();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура Форма_ЗагрузитьОтдельныйТестовыйНабор(путьКТестовомуНабору)
	ИнициализироватьИндикаторВыполнения();
	
	мСохраненныйПутьОтдельногоТестовогоНабора = путьКТестовомуНабору;
	
	ЗагрузитьВсеТесты(мСохраненныйПутьОтдельногоТестовогоНабора);
	
	ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(ДеревоТестов);
	РазвернутьСтрокиДерева(Истина);
КонецПроцедуры

Процедура Форма_ЗагрузитьТестовыеНаборы()
	ИнициализироватьИндикаторВыполнения();
	
	ЗагрузитьВсеТесты(Путь);	

	ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(ДеревоТестов);
	РазвернутьСтрокиДерева();
КонецПроцедуры

// Процедура для кнопки "Переоткрыть"
// Закрывает и вновь открывает текущую форму.
// 
Процедура КнопкаПерезагрузитьПерезагрузитьБраузерТестирования(Кнопка)
	
	Для каждого МетаФорма Из ЭтаФорма.Метаданные().Формы Цикл
		ТекФорма = ПолучитьФорму(МетаФорма); // может возвращать неопределено, если есть управляемая форма
		Если ТекФорма <> Неопределено И ТекФорма.Открыта() Тогда
			ТекФорма.Закрыть();
			Если ТекФорма = ЭтаФорма Тогда
				Если Найти(Строка(ТипЗнч(ЭтотОбъект)), "Внешняя обработка объект:") = 1 Тогда
					ВнешниеОбработки.Создать(ЭтотОбъект.ИспользуемоеИмяФайла).ПолучитьФорму(МетаФорма.Имя).Открыть();
				Иначе
					ВнешниеОтчеты.Создать(ЭтотОбъект.ИспользуемоеИмяФайла).ПолучитьФорму(МетаФорма.Имя).Открыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ДеревоТестов

Процедура тпДеревоТестовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ПиктограммаСостояния.УстановитьКартинку(мМассивПиктограммСостояний[ДанныеСтроки.Состояние]);		
	ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(мМассивПиктограммТиповСтроки[ДанныеСтроки.ТипСтроки]);		
	ОформлениеСтроки.Ячейки.ПолныйПуть.УстановитьТекст(СтрЗаменить(ДанныеСтроки.ПолныйПуть, Путь, "..."));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

//{ Состояния тестов
мМассивПиктограммСостояний = Новый Массив(4);
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.НеВыполнялся]	= ЭлементыФормы.ПолеКартинкиСерый.Картинка; 
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.Сломался]		= ЭлементыФормы.ПолеКартинкиКрасный.Картинка;
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.НеРеализован]	= ЭлементыФормы.ПолеКартинкиЖелтый.Картинка;
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.Прошел]			= ЭлементыФормы.ПолеКартинкиЗеленый.Картинка;
//} Состояния тестов

//{ Типы строк дерева тестов
мМассивПиктограммТиповСтроки = Новый Массив(3);
мМассивПиктограммТиповСтроки[мЗначенияТиповСтроки.КаталогТестов]	= ЭлементыФормы.ПолеКартинкиКаталогТестов.Картинка;
мМассивПиктограммТиповСтроки[мЗначенияТиповСтроки.ТестовыйСлучай]			= ЭлементыФормы.ПолеКартинкиТест.Картинка;
мМассивПиктограммТиповСтроки[мЗначенияТиповСтроки.ТестовыйМетод] = ЭлементыФормы.ПолеКартинкиТестовыйСлучай.Картинка;
//} Типы строк дерева тестов

мСохраненныйПутьОтдельногоТестовогоНабора = "";
мАвтозапускТестовыхНаборов = Ложь;