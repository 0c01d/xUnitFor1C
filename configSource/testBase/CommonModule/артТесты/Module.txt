// тестирование и проверка утверждений - assert
 
// проверка идет через ЗначениеЗаполнено, но мутабельные значение всегда считаем заполненными
Процедура ПроверитьЗаполненность(проверяемоеЗначение, СообщениеОбОшибке = "") Экспорт
	Попытка
		фЗаполнено = ЗначениеЗаполнено(проверяемоеЗначение);
	Исключение
		инфоОшибки = ИнформацияОбОшибке();
		Возврат;
	КонецПопытки; 
	Если НЕ фЗаполнено Тогда
		//ВызватьИсключение "Значение не заполнено, а ожидалось заполненность"+
		//		Символы.ПС+"ОШИБКА: "+СообщениеОбОшибке;
	Попытка
		ВызватьИсключение "Значение не заполнено, а ожидалось заполненность"+
				Символы.ПС+"ОШИБКА: "+СообщениеОбОшибке;
	Исключение
		инфоОшибки = ИнформацияОбОшибке();
		ВызватьИсключение "Значение не заполнено, а ожидалось заполненность"+
				Символы.ПС+"ОШИБКА: "+СообщениеОбОшибке;
	КонецПопытки; 
	КонецЕсли; 
КонецПроцедуры

// проверка идет через ЗначениеЗаполнено, но мутабельные значение всегда считаем заполненными
Процедура ПроверитьНеЗаполненность(проверяемоеЗначение, СообщениеОбОшибке = "") Экспорт
	Попытка
		фЗаполнено = ЗначениеЗаполнено(проверяемоеЗначение);
	Исключение
		ВызватьИсключение "Значение <"+проверяемоеЗначение+"> заполнено, а ожидалось незаполненность"+
			Символы.ПС+"ОШИБКА: "+СообщениеОбОшибке;
	КонецПопытки; 
	Если фЗаполнено Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение+"> заполнено, а ожидалось незаполненность"+
				Символы.ПС+"ОШИБКА: "+СообщениеОбОшибке;
	КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьИстину(проверяемоеЗначение1, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 <> Истина Тогда // если без "<> Истина", тогда в случае не булевых значений будут падения
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> имеет значение <Ложь>, а ожидалось значение <Истина>"+
				Символы.ПС+"ОШИБКА: "+СообщениеОбОшибке;
	КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьЛожь(проверяемоеЗначение1, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 <> Ложь Тогда// если без "<> Ложь", тогда в случае не булевых значений будут падения
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> имеет значение <Истина>, а ожидалось значение <Ложь>"+
				Символы.ПС+"ОШИБКА: "+СообщениеОбОшибке;
	КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьРавенство(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 <> проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> не равно <"+проверяемоеЗначение2+">, а ожидалось равенство"+
				Символы.ПС+"ОШИБКА: "+СообщениеОбОшибке;
	КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьНеравенство(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 = проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> равно <"+проверяемоеЗначение2+">, а ожидалось не равенство"+
				Символы.ПС+"ОШИБКА: "+СообщениеОбОшибке;
	КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьМеньше(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 >= проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> больше или равно, чем <"+проверяемоеЗначение2+">, а ожидалось меньше"+
				Символы.ПС+"ОШИБКА: "+СообщениеОбОшибке;
	КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьБольше(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 <= проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> меньше или равно, чем <"+проверяемоеЗначение2+">, а ожидалось больше"+
				Символы.ПС+"ОШИБКА: "+СообщениеОбОшибке;
	КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьМеньшеИлиРавно(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 > проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> больше, чем <"+проверяемоеЗначение2+">, а ожидалось меньше или равно"+
				Символы.ПС+"ОШИБКА: "+СообщениеОбОшибке;
	КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьБольшеИлиРавно(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 < проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> меньше, чем <"+проверяемоеЗначение2+">, а ожидалось больше или равно"+
				Символы.ПС+"ОШИБКА: "+СообщениеОбОшибке;
	КонецЕсли; 
КонецПроцедуры

Процедура ПроверитьТип(значение, ТипИлиИмяТипа, СообщениеОбОшибке = "") Экспорт
	Если ТипЗнч(ТипИлиИмяТипа) = Тип("Строка") Тогда
		искомыйТип = Тип(ТипИлиИмяТипа);
	ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип("Тип") Тогда
		искомыйТип = ТипИлиИмяТипа;
	Иначе
		ВызватьИсключение "ПроверитьТип: Параметр ТипИлиИмяТипа - должен быть тип или строка";
	КонецЕсли; 
	Если ТипЗнч(значение) <> искомыйТип Тогда
		ВызватьИсключение "Значение <"+значение+"> не является типом <"+ТипИлиИмяТипа+">, а ожидалось, что это нужный тип."+
				Символы.ПС+"ОШИБКА: "+СообщениеОбОшибке;
	КонецЕсли; 
КонецПроцедуры

Функция ПолучитьКоличествоДокументовПоОтбору(видДокумента, Дата1, дата2, структураОтбора = Неопределено) Экспорт
		артТесты.ПроверитьЗаполненность(видДокумента, "видДокумента");
		артТесты.ПроверитьЗаполненность(Дата1, "Дата1");
		артТесты.ПроверитьЗаполненность(Дата2, "Дата2");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доки.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	Документ."+видДокумента+" КАК Доки
	|ГДЕ
	|	Доки.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	|	И НЕ Доки.ПометкаУдаления
	//|	И ВЫБОР КОГДА &ТолькоПроведенные ТОГДА Доки.Проведен ИНАЧЕ ИСТИНА КОНЕЦ 
	|";
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", КонецДня(Дата2));
	//Запрос.УстановитьПараметр("ТолькоПроведенные", ТолькоПроведенные);
	
	Если ЗначениеЗаполнено(структураОтбора) Тогда
		Для каждого ключЗначение Из структураОтбора Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Доки."+имяРеквизита+" = &"+имяРеквизита+" ";
			//Запрос.Текст = Запрос.Текст + " И ВЫБОР КОГДА НЕ &"+имяРеквизита+" ЕСТЬ NULL ТОГДА Доки."+имяРеквизита+" = &"+имяРеквизита+" ИНАЧЕ ИСТИНА КОНЕЦ ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.КоличествоДокументов;
КонецФункции

Функция ПолучитьКоличествоЭлементовСправочникаПоОтбору(видСправочника, структураОтбора = Неопределено) Экспорт
		артТесты.ПроверитьЗаполненность(видСправочника, "видСправочника");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Спр.Ссылка) КАК КоличествоЭлементов
	|ИЗ
	|	Справочник."+видСправочника+" КАК Спр
	|ГДЕ
	|	НЕ Спр.ПометкаУдаления
	//|	И ВЫБОР КОГДА &ТолькоПроведенные ТОГДА Доки.Проведен ИНАЧЕ ИСТИНА КОНЕЦ 
	|";
	//Запрос.УстановитьПараметр("ТолькоПроведенные", ТолькоПроведенные);
	
	Если ЗначениеЗаполнено(структураОтбора) Тогда
		Для каждого ключЗначение Из структураОтбора Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Спр."+имяРеквизита+" = &"+имяРеквизита+" ";
			//Запрос.Текст = Запрос.Текст + " И ВЫБОР КОГДА НЕ &"+имяРеквизита+" ЕСТЬ NULL ТОГДА Доки."+имяРеквизита+" = &"+имяРеквизита+" ИНАЧЕ ИСТИНА КОНЕЦ ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.КоличествоЭлементов;
КонецФункции

Функция ПолучитьКоличествоСтрокВДокументахПоОтбору(видДокумента, имяТабличнойЧасти, Дата1, дата2, структураОтбораШапки = Неопределено, структураОтбораТабличнойЧасти = Неопределено) Экспорт
		артТесты.ПроверитьЗаполненность(видДокумента, "видДокумента");
		артТесты.ПроверитьЗаполненность(Дата1, "Дата1");
		артТесты.ПроверитьЗаполненность(Дата2, "Дата2");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Доки.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	Документ."+видДокумента+"."+имяТабличнойЧасти+" КАК Доки
	|ГДЕ
	|	Доки.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	|	И НЕ Доки.Ссылка.ПометкаУдаления
	|";
	//|	ВЫБОР КОГДА &ТолькоПроведенные ТОГДА Доки.Ссылка.Проведен ИНАЧЕ ИСТИНА КОНЕЦ ";
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", КонецДня(Дата2));
	//Запрос.УстановитьПараметр("ТолькоПроведенные", ТолькоПроведенные);
	
	Если ЗначениеЗаполнено(структураОтбораШапки) Тогда
		Для каждого ключЗначение Из структураОтбораШапки Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Доки.Ссылка."+имяРеквизита+" = &"+имяРеквизита+" ";
			//Запрос.Текст = Запрос.Текст + " И ВЫБОР КОГДА НЕ &"+имяРеквизита+" ЕСТЬ NULL ТОГДА Доки."+имяРеквизита+" = &"+имяРеквизита+" ИНАЧЕ ИСТИНА КОНЕЦ ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	Если ЗначениеЗаполнено(структураОтбораТабличнойЧасти) Тогда
		Для каждого ключЗначение Из структураОтбораТабличнойЧасти Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Доки."+имяРеквизита+" = &"+имяРеквизита+" ";
			//Запрос.Текст = Запрос.Текст + " И ВЫБОР КОГДА НЕ &"+имяРеквизита+" ЕСТЬ NULL ТОГДА Доки."+имяРеквизита+" = &"+имяРеквизита+" ИНАЧЕ ИСТИНА КОНЕЦ ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.КоличествоДокументов;
КонецФункции

Функция ПолучитьИтоговуюСуммуТабличнойЧастиДокументовПоОтбору(видДокумента, имяТабличнойЧасти, имяРеквизита, Дата1, дата2, структураОтбораШапки = Неопределено, структураОтбораТабличнойЧасти = Неопределено) Экспорт
		артТесты.ПроверитьЗаполненность(видДокумента, "видДокумента");
		артТесты.ПроверитьЗаполненность(Дата1, "Дата1");
		артТесты.ПроверитьЗаполненность(Дата2, "Дата2");
	Запрос = Новый Запрос;
	текстТабличнаяЧасть = ?(НЕ ЗначениеЗаполнено(имяТабличнойЧасти), "", "."+имяТабличнойЧасти);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Доки."+имяРеквизита+"), 0) КАК Сумма
	|ИЗ
	//|	Документ."+видДокумента+"."+имяТабличнойЧасти+" КАК Доки
	|	Документ."+видДокумента+текстТабличнаяЧасть+" КАК Доки
	|ГДЕ
	|	Доки.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	|	И НЕ Доки.Ссылка.ПометкаУдаления
	|";
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", КонецДня(Дата2));
	
	Если ЗначениеЗаполнено(структураОтбораШапки) Тогда
		Для каждого ключЗначение Из структураОтбораШапки Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Доки.Ссылка."+имяРеквизита+" = &"+имяРеквизита+" ";
			//Запрос.Текст = Запрос.Текст + " И ВЫБОР КОГДА НЕ &"+имяРеквизита+" ЕСТЬ NULL ТОГДА Доки."+имяРеквизита+" = &"+имяРеквизита+" ИНАЧЕ ИСТИНА КОНЕЦ ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
		артТесты.ПроверитьИстину(НЕ (имяТабличнойЧасти = "" И ЗначениеЗаполнено(структураОтбораТабличнойЧасти)), "табличная часть не должна быть указана");
	Если ЗначениеЗаполнено(структураОтбораТабличнойЧасти) Тогда
		Для каждого ключЗначение Из структураОтбораТабличнойЧасти Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Доки."+имяРеквизита+" = &"+имяРеквизита+" ";
			//Запрос.Текст = Запрос.Текст + " И ВЫБОР КОГДА НЕ &"+имяРеквизита+" ЕСТЬ NULL ТОГДА Доки."+имяРеквизита+" = &"+имяРеквизита+" ИНАЧЕ ИСТИНА КОНЕЦ ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.Сумма;
КонецФункции

Функция ПолучитьИтоговуюСуммуДокументовПоОтбору(видДокумента, имяРеквизита, Дата1, дата2, структураОтбораШапки = Неопределено, структураОтбораТабличнойЧасти = Неопределено) Экспорт
	Возврат ПолучитьИтоговуюСуммуТабличнойЧастиДокументовПоОтбору(видДокумента, "", имяРеквизита, Дата1, дата2, структураОтбораШапки, структураОтбораТабличнойЧасти);
КонецФункции

Функция ПолучитьКоличествоЭлементовМетаданногоПоОтбору(типМетаданного, видМетаданного, структураОтбора = Неопределено) Экспорт
		артТесты.ПроверитьЗаполненность(типМетаданного, "типМетаданного");
		артТесты.ПроверитьЗаполненность(видМетаданного, "видМетаданного");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Таб.Ссылка) КАК КоличествоЭлементов
	|ИЗ
	|	"+типМетаданного+"."+видМетаданного+" КАК Таб
	|ГДЕ
	|	НЕ Таб.ПометкаУдаления
	//|	И ВЫБОР КОГДА &ТолькоПроведенные ТОГДА Доки.Проведен ИНАЧЕ ИСТИНА КОНЕЦ 
	|";
	//Запрос.УстановитьПараметр("ТолькоПроведенные", ТолькоПроведенные);
	
	Если ЗначениеЗаполнено(структураОтбора) Тогда
		Для каждого ключЗначение Из структураОтбора Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Таб."+имяРеквизита+" = &"+имяРеквизита+" ";
			//Запрос.Текст = Запрос.Текст + " И ВЫБОР КОГДА НЕ &"+имяРеквизита+" ЕСТЬ NULL ТОГДА Доки."+имяРеквизита+" = &"+имяРеквизита+" ИНАЧЕ ИСТИНА КОНЕЦ ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.КоличествоЭлементов;
КонецФункции

Функция ПолучитьКоличествоБизнесПроцессовПоОтбору(видМетаданного, структураОтбора = Неопределено) Экспорт
	Возврат ПолучитьКоличествоЭлементовМетаданногоПоОтбору("БизнесПроцесс", видМетаданного, структураОтбора);
КонецФункции

Функция ПолучитьКоличествоЗадачПоОтбору(видМетаданного, структураОтбора = Неопределено) Экспорт
	Возврат ПолучитьКоличествоЭлементовМетаданногоПоОтбору("Задача", видМетаданного, структураОтбора);
КонецФункции
