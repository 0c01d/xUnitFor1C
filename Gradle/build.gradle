	//Пример для нашей тестовой базы
	//"C:\Program Files (x86)\1cv82\common\1cestart.exe" /DisableStartupMessages /Execute \\ws-msk-a1934\Обмен\1CUnit\UnitTestRunner.epf /S "as-msk-a6122\im_test" /Out "E:\ТестыИМ\log.txt"  /C "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования" /LogUI
	// или для 8.3
	//"C:\Program Files (x86)\1cv8\8.3.3.721\bin\1cv8c.exe" /DisableStartupMessages /Execute E:\ТестыИМ\UnitTestRunner.epf /S "as-msk-a6122:3541\im_test" /Out "E:\ТестыИМ\Тесты\log.txt"  /C "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования" /LogUI

task xUnitFor1C {
	//task xUnitFor1C << {
	//task xUnitFor1C(type:Exec) {
	//    println System.properties['file.encoding']

def Properties props = new Properties()
	InputStream inputStream = new FileInputStream("./mygradle.properties")
	InputStreamReader isr = new InputStreamReader(inputStream, "cp1251") //"UTF-8")
	props.load(isr);

		//println '""Тесты_Команда_Тестировать;C:\\Обмен\\1CUnit\\Тесты управляемое приложение\\selftests;ЗавершитьРаботуПослеТестирования""'

//println props.catalog1C
println props.xUnitRunner

   //def catalog="C:/Program Files (x86)/1cv82/"
   //def version="8.2.19.73"

   //bin1cv8 = 'C:\\Program Files (x86)\\1cv82\\common\\1cestart.exe'
   //executable(bin1cv8)
   //args  "/DisableStartupMessages", "/Execute", '"C:\\Обмен\\1CUnit\\UnitTestRunner.epf"', "/F", '"W:\\Конфигурации\\Разработка\\1CUnit\\ТестоваяБаза"', "/Out", '"F:\\xUnitFor1C_log.txt"', '/C', '"Тесты_Команда_Тестировать;C:\\Обмен\\1CUnit\\984F~1\\SELFTE~1;ЗавершитьРаботуПослеТестирования;Тесты_Команда_ФорматОтчета;xml;out;C:\\Обмен\\1CUnit\\984F~1\\SELFTE~1/testReport;"', "/LogUI", "/Debug", "/DebuggerURL", "tcp://127.0.0.1:1560"

   //executable('"'+catalog1C+version1C+"/bin/1cv8.exe"+'"')
   //args  "/DisableStartupMessages", "/Execute", xUnitRunner, "/F", mainBase1C, "/Out", xUnitLogFile, '/C', '"Тесты_Команда_Тестировать;'+testsFolder+';ЗавершитьРаботуПослеТестирования;Тесты_Команда_ФорматОтчета;xml;out;'+xUnitLogFolder+';"', "/LogUI", "/Debug", "/DebuggerURL", "tcp://127.0.0.1:1560"
	def cmdLine = ""
	props.with {
		cmdLine = ['"'+catalog1C+version1C+"/bin/1cv8.exe"+'"', "/DisableStartupMessages", "/Execute", xUnitRunner, "/F", mainBase1C, "/Out", xUnitLogFile, 
		'/C', '"Тесты_Команда_Тестировать;'+testsFolder+';ЗавершитьРаботуПослеТестирования;Тесты_Команда_ФорматОтчета;xml;out;'+xUnitLogFolder+';"', 
		"/LogUI", "/Debug", "/DebuggerURL", "tcp://127.0.0.1:1560"]
		//println cmdLine
	}

	def proc = cmdLine.execute()
	proc.waitFor()

	//["executable", "first with space", "second"].execute()

 //  args  "/DisableStartupMessages", "/Execute", xUnitRunner, "/F", '"F:\\1CUnitBase"', "/Out", '"F:\\xUnitFor1C_log.txt"', '/C', '"Тесты_Команда_Тестировать;C:\\Обмен\\1CUnit\\984F~1\\SELFTE~1;ЗавершитьРаботуПослеТестирования;Тесты_Команда_ФорматОтчета;xml;out;C:\\Обмен\\1CUnit\\984F~1\\SELFTE~1/testReport;"', "/LogUI", "/Debug", "/DebuggerURL", "tcp://127.0.0.1:1560"
 //  args  "/DisableStartupMessages", "/Execute", '"C:\\Обмен\\1CUnit\\UnitTestRunner.epf"', "/F", '"F:\\1CUnitBase"', "/Out", '"F:\\xUnitFor1C_log.txt"', '/C', '"Тесты_Команда_Тестировать;C:\\Обмен\\1CUnit\\984F~1\\SELFTE~1;ЗавершитьРаботуПослеТестирования;Тесты_Команда_ФорматОтчета;xml;out;C:\\Обмен\\1CUnit\\984F~1\\SELFTE~1/testReport;"', "/LogUI", "/Debug", "/DebuggerURL", "tcp://127.0.0.1:1560"
 //

	//   //F:\xUnitFor1C_log.txt 

   doLast {
	        //def log = file('C:\\Обмен\\1CUnit\\984F~1\\SELFTE~1\\лог_тестирования.xml')
			//log.eachLine { println it}
      verifyTestsLog("${props.testsFolder}\\лог_тестирования.xml") //'C:\\Обмен\\1CUnit\\984F~1\\SELFTE~1\\лог_тестирования.xml')
   }
}

void verifyTestsLog (xmlLogPath){
    def f = new File(xmlLogPath)
    //def parsedLogXml = (new XmlParser()).parseText(f.getText('utf-8'))
    def xmlString = getUTF8FileTextWithoutBOM(f)

    //void verifyTestsLog (xmlString){
    def testFolders = new XmlParser().parseText(xmlString)
    def success = testFolders.attribute("failures") == "0" //true

    println "folder count:"  +  testFolders.attribute("tests") + ", time : " + testFolders.attribute("time")

		    //testFolders.testsuite.each{ testFolder ->
		    //    println "folder name:"  +  testFolder.@name
		//
		    //    testFolder.testsuite.each{ testsuite ->
		    //        println "\ttestsuite name:"  +  testsuite.@name
		//
		    //        testsuite.testcase.each{ testcase ->
		    //            println "\t\ttestcase name:"  +  testcase.@name + ", status : " + testcase.@status + ", time : " + testcase.@time
		    //            //println "\t\ttestcase name:"  +  testcase.@name + ", classname : " + testcase.@classname + ", status : " + testcase.@status + ", time : " + testcase.@time
		    //        }
		    //    }
		    //}

    if(!success) {
        assert false: "Есть упавшие тесты"
    }

}

String getUTF8FileTextWithoutBOM(file) {
    def xmlString = file.getText('utf8')
    def BOM = (char)65279
    if (xmlString[0] == BOM) {
        return xmlString.substring(1)
    }
    else { return xmlString }
}

// http://infostart.ru/ajax/comment_pub.php?t=102620&c=12
task test4(type:Exec) {
   def catalog="C:/Program Files (x86)/1cv82/"
   def version="8.2.19.73"
   //version="8.2.18.82"
   executable(catalog+version+"/bin/1cv8.exe")
   args "/F", "Z:\\v.kazmin\\test\\msfo\\msfo", "/N", "autotest", "/Execute", "Z:\\Public\\Downloads\\MSFO\\test_4.epf", "/Out", "log.xml"
   doLast {
      echoLog("Log.xml")
   }
}

void echoLog(String name) {

   def f = new File(name)
   def parsedLogXml = (new XmlParser()).parseText(f.getText('utf-8'))
   //def parsedLogXml = (new XmlParser()).parseText(f.getText('cp1251'))
   def succ = true
   parsedLogXml.testcase.each{ test ->
   //parsedLogXml.test.each{ test ->
      println "classname:"  +  test.@classname + ", Name : " +  test.@name + ", result : " + test.result.@value
      //if(test.result.@value!='true') {
      //   succ = false
      //   println test.message.text()
      //   println test.error.text()
      //}
   }
   
   if(succ!=true) {
      assert false: "Error test"
   }
}