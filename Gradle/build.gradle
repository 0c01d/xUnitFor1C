def Properties props

task PropertyFileDelete << {
	def propsFile = new File("${projectDir}/mygradle.properties")
	if (propsFile.exists()) propsFile.delete()
}

task xUnitFor1C () {
	//task xUnitFor1C << {
	//task xUnitFor1C(type:Exec) {
	doFirst {
		props = xUnitFor1C(projectDir) //"./82")
	}
   doLast {
   	checkXmlUnitReport(props)
   }
}

task compileConfigFile << {
	//Строка = "pathToCF;"+ПутьКФайлуКонфигурации+";pathOut;"+ПутьККаталогуДляВыгрузки+";compile;"+ОпцияРабочийКаталог;	
	props = loadProperties(projectDir)

	def cmdLine = ""
	props.with {

		cmdLine = ['"'+catalog1C+version1C+"/bin/1cv8.exe"+'"', "enterprise", startMode, "/DisableStartupMessages", "/Execute", AbsPath(v83unpack), "/N${user1C}", "/N${password1C}", mainBase1CType, AbsPath(mainBase1C), "/Out", "outCompile.txt", 
		//'/C', '"'+"compile;pathToCF;${builds}\bin\1cv8.cf;pathOut;${builds}\src\;" + '"', 
		'/C', "compile;pathToCF;${builds}\bin\1cv8.cf;pathOut;${builds}\src\;", 
		"/LogUI", add1CStartOptions	]
	}

	def proc = cmdLine.execute()
	proc.waitFor()
/*
  <target name="decompile">
      <exec executable="${1cbin}">
          <arg value="ENTERPRISE"/>
          <arg value="${ibService}"/>
          <arg value="/N${iblogin}"/>
          <arg value="/P${ibpassword}"/>
          <arg value="/C&quot;pathToCF;${builds}\bin\1cv8.cf;auto;decompile;out;${builds}\out.txt;pathOut;${builds}\src\;&quot;" />
          <arg value="/Execute&quot;${v83unpack}&quot;"/>
          <arg value="/outoutDecompile.txt"/>
      </exec>
      <loadfile property="checkerror" srcFile="${builds}/out.txt" encoding="cp1251">
          <filterchain>
              <tokenfilter>
                  <containsregex pattern="^[^0-9\-]+(0)$"/>
              </tokenfilter>
          </filterchain>
      </loadfile>
      <fail unless="checkerror"/>
  </target>
*/
}

def checkXmlUnitReport(props) {
	println "выполняю checkXmlUnitReport "

    verifyTestsLog("${props.testsFolder}\\лог_тестирования.xml")
}

def xUnitFor1C (propsDir){

	def Properties props = loadProperties(propsDir)
		//def Properties props = new Properties()
		//InputStream inputStream = new FileInputStream("${propsDir}/mygradle.properties")
		//InputStreamReader isr = new InputStreamReader(inputStream, "cp1251") //"UTF-8")
		//props.load(isr);

	def cmdLine = ""
	props.with {

		cmdLine = ['"'+catalog1C+version1C+"/bin/1cv8.exe"+'"', "enterprise", startMode, "/DisableStartupMessages", "/N${props.user1C}", "/N${props.password1C}", "/Execute", AbsPath(xUnitRunner), mainBase1CType, AbsPath(mainBase1C), "/Out", xUnitLogFile, 
		'/C', '"Тесты_Команда_Тестировать;'+AbsPath(testsFolder)+';ЗавершитьРаботуПослеТестирования;Тесты_Команда_ФорматОтчета;xml;out;'+AbsPath(xUnitLogFolder)+';"', 
		"/LogUI", add1CStartOptions	]
	}

	def proc = cmdLine.execute()
	proc.waitFor()

 	return props
}

def loadProperties(propsDir){

	props = new Properties()
	InputStream inputStream = new FileInputStream("${propsDir}/mygradle.properties")
	InputStreamReader isr = new InputStreamReader(inputStream, "cp1251") //"UTF-8")
	props.load(isr);
	return props
}

String AbsPath(path) {
   def file = new File(path)
   if ( !file.exists() ) 
   	file = new File(""+projectDir + path)
	   
   	return file.absolutePath
}

void verifyTestsLog (xmlLogPath){
    def f = new File(xmlLogPath)
    //def parsedLogXml = (new XmlParser()).parseText(f.getText('utf-8'))
    def xmlString = getUTF8FileTextWithoutBOM(f)

    def testFolders = new XmlParser().parseText(xmlString)
    def success = testFolders.attribute("failures") == "0"

    println "Количество тестов:"  +  testFolders.attribute("tests") + ", общее время выполнения: " + testFolders.attribute("time")

		    //testFolders.testsuite.each{ testFolder ->
		    //    println "folder name:"  +  testFolder.@name
		//
		    //    testFolder.testsuite.each{ testsuite ->
		    //        println "\ttestsuite name:"  +  testsuite.@name
		//
		    //        testsuite.testcase.each{ testcase ->
		    //            println "\t\ttestcase name:"  +  testcase.@name + ", status : " + testcase.@status + ", time : " + testcase.@time
		    //            //println "\t\ttestcase name:"  +  testcase.@name + ", classname : " + testcase.@classname + ", status : " + testcase.@status + ", time : " + testcase.@time
		    //        }
		    //    }
		    //}

    if(!success) {
    	println "Есть упавшие тесты."
        assert false: "Есть упавшие тесты"
    }
    else println "ОК."

}

String getUTF8FileTextWithoutBOM(file) {
    def xmlString = file.getText('utf8')
    def BOM = (char)65279
    if (xmlString[0] == BOM) {
        return xmlString.substring(1)
    }
    else { return xmlString }
}